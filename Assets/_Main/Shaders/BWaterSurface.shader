// Made with Amplify Shader Editor v1.9.6.2
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "BUDU Shaders/BWaterSurface"
{
	Properties
	{
		[HideInInspector] _EmissionColor("Emission Color", Color) = (1,1,1,1)
		[HideInInspector] _AlphaCutoff("Alpha Cutoff ", Range(0, 1)) = 0.5
		[KeywordEnum(None,VoronoiCell,VoronoiCaustic,Perlin,Texture)] _FoamType("FoamType", Float) = 0
		[KeywordEnum(Caustic1,Caustic2,Caustic3,Caustic4,Caustic5,Caustic6,Caustic7,Caustic8)] _CausticFoam_OCT("CausticFoam_OCT", Float) = 0
		[KeywordEnum(Cell1,Cell2,Cell3,Cell4,Cell5,Cell6,Cell7,Cell8)] _CellFoam_OCT("CellFoam_OCT", Float) = 0
		[KeywordEnum(LayerA,LayerB,Multiply,Add,Subtract,Divide,Dot,FMod,FModInvert)] _SelectDeformType("SelectDeformType", Float) = 0
		[KeywordEnum(LayerA,LayerB,Multiply,Add,Subtract,Divide,Dot,FMod,FModInvert)] _SelectWaveType("SelectWaveType", Float) = 0
		[KeywordEnum(None,VoronoiCell,VoronoiCaustic,Perlin,Texture)] _WaveBType("WaveBType", Float) = 0
		[KeywordEnum(Caustic1,Caustic2,Caustic3,Caustic4,Caustic5,Caustic6,Caustic7,Caustic8)] _CausticWaveB_OCT("CausticWaveB_OCT", Float) = 0
		[KeywordEnum(Cell1,Cell2,Cell3,Cell4,Cell5,Cell6,Cell7,Cell8)] _CellWaveB_OCT("CellWaveB_OCT", Float) = 0
		[Toggle]_NormalToggle("NormalToggle", Float) = 1
		_Transparency("Transparency", Range( 0 , 1)) = 1
		_CMYPos("CM Y Pos", Range( -5 , 5)) = 0
		[KeywordEnum(None,VoronoiCell,VoronoiCaustic,Perlin,Texture)] _WaveAType("WaveAType", Float) = 0
		[KeywordEnum(Caustic1,Caustic2,Caustic3,Caustic4,Caustic5,Caustic6,Caustic7,Caustic8)] _CausticWaveA_OCT("CausticWaveA_OCT", Float) = 0
		[KeywordEnum(Cell1,Cell2,Cell3,Cell4,Cell5,Cell6,Cell7,Cell8)] _CellWaveA_OCT("CellWaveA_OCT", Float) = 0
		_CMXPos("CM X Pos", Range( -2 , 2)) = 0
		_CMZPos("CM Z Pos", Range( -2 , 2)) = 0
		_CubeMapRotate("Cube Map Rotate", Range( 0 , 360)) = 0
		[KeywordEnum(Linear,Normal,Gamma)] _FogDepthGradeType("FogDepthGradeType", Float) = 0
		[KeywordEnum(None,VoronoiCell,VoronoiCaustic,Perlin,Texture)] _NoiseBType("NoiseBType", Float) = 0
		[KeywordEnum(Caustic1,Caustic2,Caustic3,Caustic4,Caustic5,Caustic6,Caustic7,Caustic8)] _CausticB_OCT("CausticB_OCT", Float) = 0
		[KeywordEnum(Cell1,Cell2,Cell3,Cell4,Cell5,Cell6,Cell7,Cell8)] _CellB_OCT("CellB_OCT", Float) = 0
		_ScreenContrast("ScreenContrast", Range( 0 , 1)) = 0.6
		[NoScaleOffset]_ReflectMap("Reflect Map", CUBE) = "white" {}
		[HDR]_ReflectColor("Reflect Color", Color) = (1,1,1,1)
		[KeywordEnum(None,VoronoiCell,VoronoiCaustic,Perlin,Texture)] _NoiseAType("NoiseAType", Float) = 0
		[KeywordEnum(Caustic1,Caustic2,Caustic3,Caustic4,Caustic5,Caustic6,Caustic7,Caustic8)] _CausticA_OCT("CausticA_OCT", Float) = 0
		[KeywordEnum(Cell1,Cell2,Cell3,Cell4,Cell5,Cell6,Cell7,Cell8)] _CellA_OCT("CellA_OCT", Float) = 0
		[NoScaleOffset]_BluricRefractionPattern("Bluric Refraction Pattern", 2D) = "white" {}
		_RefractColor("Refract Color", Color) = (0,0,0)
		_ReflectionStrength("Reflection Strength", Range( 0 , 1)) = 1
		_SSSize("SS Size", Float) = 10
		[Toggle(_MASK_ON)] _Mask("Mask", Float) = 0
		[KeywordEnum(Linear,Normal,Gamma)] _MaskGradeType("MaskGradeType", Float) = 0
		[KeywordEnum(Linear,Normal,Gamma)] _TxtGradeType("TxtGradeType", Float) = 0
		[KeywordEnum(Depth,FlowTexture)] _FlowMapType("FlowMapType", Float) = 1
		_MGradeAmplitude("M Grade Amplitude", Range( 0 , 4)) = 1
		_PatternHeight("Pattern Height", Range( -1 , 1)) = 0.1
		_PatternMultiplier("Pattern Multiplier", Range( 1 , 10)) = 1
		[Toggle]_RefractionToggle("RefractionToggle", Float) = 0
		[Toggle]_Reflect("Reflect", Float) = 0
		_NTypeAAnchorX("NType A Anchor X", Float) = 0
		_FoamAnchorX("Foam Anchor X", Float) = 0
		_WTypeBAnchorX("WType B Anchor X", Float) = 0
		_WTypeAAnchorX("WType A Anchor X", Float) = 0
		_NTypeBAnchorX("NType B Anchor X", Float) = 0
		_NTypeBTileX("NType B Tile X", Float) = 1
		_WTypeATileX("WType A Tile X", Float) = 1
		_FoamTileX("Foam Tile X", Float) = 1
		_WTypeBTileX("WType B Tile X", Float) = 1
		_NTypeATileX("NType A Tile X", Float) = 1
		_NTypeBTileY("NType B Tile Y", Float) = 1
		_WTypeBTileY("WType B Tile Y", Float) = 1
		_FoamTileY("Foam Tile Y", Float) = 1
		_WTypeATileY("WType A Tile Y", Float) = 1
		_SSTileX("SS Tile X", Float) = 1
		_NTypeATileY("NType A Tile Y", Float) = 1
		_NTypeBOffsetX("NType B Offset X", Float) = 0
		_NTypeAOffsetX("NType A Offset X", Float) = 0
		_FoamOffsetX("Foam Offset X", Float) = 0
		_WTypeBOffsetX("WType B Offset X", Float) = 0
		_WTypeAOffsetX("WType A Offset X", Float) = 0
		_WBNoiseScale("WB Noise Scale", Float) = 8
		_FoamNoiseScale("Foam Noise Scale", Float) = 8
		_SSTileY("SS Tile Y", Float) = 1
		_WANoiseScale("WA Noise Scale", Float) = 8
		_ANoiseScale("A Noise Scale", Float) = 8
		_BNoiseScale("B Noise Scale", Float) = 8
		[Toggle]_SSBluricTransparent("SS Bluric Transparent", Float) = 0
		_NTypeBSpeedX("NType B Speed X", Float) = 0.1
		_WTypeASpeedX("WType A Speed X", Float) = 0.1
		_WTypeBSpeedX("WType B Speed X", Float) = 0.1
		_FoamSpeedX("Foam Speed X", Float) = 0.1
		_NTypeASpeedX("NType A Speed X", Float) = 0.1
		_WTypeASpeedY("WType A Speed Y", Float) = 0.1
		_WTypeBSpeedY("WType B Speed Y", Float) = 0.1
		_FoamSpeedY("Foam Speed Y", Float) = 0.1
		_NTypeASpeedY("NType A Speed Y", Float) = 0.1
		_NTypeBSpeedY("NType B Speed Y", Float) = 0.1
		_NTypeBOverallSpeed("NType B OverallSpeed", Float) = 1
		_FoamOverallSpeed("Foam OverallSpeed", Float) = 1
		_WTypeBOverallSpeed("WType B OverallSpeed", Float) = 1
		_WTypeAOverallSpeed("WType A OverallSpeed", Float) = 1
		_NTypeAOverallSpeed("NType A OverallSpeed", Float) = 1
		[NoScaleOffset]_DeformNoiseTypeB("Deform Noise Type B", 2D) = "white" {}
		[NoScaleOffset]_DeformNoiseTypeA("Deform Noise Type A", 2D) = "white" {}
		[NoScaleOffset]_WaveTypeB("Wave Type B", 2D) = "white" {}
		[NoScaleOffset]_FoamTexture("Foam Texture", 2D) = "white" {}
		[NoScaleOffset]_WaveTypeA("Wave Type A", 2D) = "white" {}
		_NTypeARotate("NType A Rotate", Range( -360 , 360)) = 0
		_WTypeARotate("WType A Rotate", Range( -360 , 360)) = 0
		_FoamRotate("Foam Rotate", Range( -360 , 360)) = 0
		_WTypeBRotate("WType B Rotate", Range( -360 , 360)) = 0
		_NTypeBRotate("NType B Rotate", Range( -360 , 360)) = 0
		_FlowTextureExponential("FlowTextureExponential", Range( 0 , 4)) = 1
		_FlowTextureAmplitude("FlowTextureAmplitude", Range( 0 , 4)) = 1
		_WaveBAmplitude("WaveBAmplitude", Range( 0 , 4)) = 1
		_WaveAAmplitude("WaveAAmplitude", Range( 0 , 4)) = 1
		_FoamAmplitude("FoamAmplitude", Range( 0 , 4)) = 1
		_DFAAmplitude("DFAAmplitude", Range( 0 , 4)) = 1
		_WaveBExp("WaveBExp", Range( 0 , 4)) = 1
		_WaveAExp("WaveAExp", Range( 0 , 4)) = 1
		_FoamExp("FoamExp", Range( 0 , 4)) = 1
		_DFAExp("DFAExp", Range( 0 , 4)) = 1
		_DFBExp("DFBExp", Range( 0 , 4)) = 1
		[KeywordEnum(Linear,Normal,Gamma)] _WaveAGradeType("WaveAGradeType", Float) = 0
		[KeywordEnum(Linear,Normal,Gamma)] _WaveBGradeType("WaveBGradeType", Float) = 0
		[KeywordEnum(Linear,Normal,Gamma)] _DFAGradeType("DFAGradeType", Float) = 0
		[KeywordEnum(Linear,Normal,Gamma)] _FoamGradeType("FoamGradeType", Float) = 0
		[KeywordEnum(Linear,Normal,Gamma)] _DFBGradeType("DFBGradeType", Float) = 0
		_WaveAContrast("Wave A Contrast", Range( 0 , 3)) = 1
		_WaveBContrast("Wave B Contrast", Range( 0 , 3)) = 1
		_NoiseAContrast("Noise A Contrast", Range( 0 , 3)) = 1
		_FoamContrast("Foam Contrast", Range( 0 , 3)) = 1
		_DFBAmplitude("DFBAmplitude", Range( 0 , 4)) = 1
		_WaveBIntensity("WaveBIntensity", Range( 0 , 1)) = 1
		_WaveAIntensity("WaveAIntensity", Range( 0 , 1)) = 1
		_NA_Intensity("NA_Intensity", Range( 0 , 1)) = 1
		_NoiseBContrast("Noise B Contrast", Range( 0 , 3)) = 1
		[Toggle(_DFNOISEAINVERT_ON)] _DfNoiseAInvert("DfNoiseAInvert", Float) = 0
		[Toggle(_FOAMINVERT_ON)] _FoamInvert("FoamInvert", Float) = 0
		[Toggle]_MidBDeformToggle("MidBDeformToggle", Float) = 0
		[Toggle]_FoamDeformToggle("FoamDeformToggle", Float) = 0
		[Toggle]_MidADeformToggle("MidADeformToggle", Float) = 0
		_DefWeightFoam("DefWeightFoam", Range( -20 , 20)) = 1
		_DefWeightB("DefWeightB", Range( -20 , 20)) = 1
		_DefWeightA("DefWeightA", Range( -20 , 20)) = 1
		[Toggle]_MidFlowMask("MidFlowMask", Float) = 0
		[Toggle(_WAVEAINVERT_ON)] _WaveAInvert("WaveAInvert", Float) = 0
		[Toggle(_WAVEBINVERT_ON)] _WaveBInvert("WaveBInvert", Float) = 0
		[Toggle(_DFNOISEBINVERT_ON)] _DfNoiseBInvert("DfNoiseBInvert", Float) = 0
		_NB_Intensity("NB_Intensity", Range( 0 , 1)) = 1
		_NTypeBRotateSpeed("NType B Rotate Speed", Float) = 0
		_WTypeARotateSpeed("WType A Rotate Speed", Float) = 0
		_NormalIntensity("Normal Intensity", Range( -10 , 10)) = 1
		_NormalGradePower("Normal Grade Power", Range( 0 , 2)) = 0.5
		_ShoreBumpIntensity("Shore Bump Intensity", Range( -1 , 1)) = 0.3
		_FoamIntensity("Foam Intensity", Range( 0 , 1)) = 1
		_Smoothness("Smoothness", Range( 0 , 1)) = 0.5
		_Specular("Specular", Range( 0 , 10)) = 1
		[Toggle]_MiddleFoamToggle("Middle Foam Toggle", Float) = 0
		[Toggle]_ShoreFoamToggle("Shore Foam Toggle", Float) = 0
		_SpecularColor("Specular Color", Color) = (0,0,0)
		_MiddleWaveBumpIntensity("Middle Wave Bump Intensity", Range( -1 , 1)) = 0.3
		[Toggle]_SurfaceToggle("SurfaceToggle", Float) = 0
		_SurfaceIntensity("SurfaceIntensity", Range( 0 , 1)) = 1
		_MiddleWaveIntensity("MiddleWaveIntensity", Range( 0 , 1)) = 1
		[Toggle]_TRSurfWaveToggle("TRSurfWaveToggle", Float) = 0
		_ShoreIntensity("ShoreIntensity", Range( 0 , 1)) = 1
		_FoamRotateSpeed("Foam Rotate Speed", Float) = 0
		_WTypeBRotateSpeed("WType B Rotate Speed", Float) = 0
		_VT_Intensity("VT_Intensity", Range( 0.01 , 10)) = 1
		_NTypeARotateSpeed("NType A Rotate Speed", Float) = 0
		_NTypeBOffsetY("NType B Offset Y", Float) = 0
		_NTypeAOffsetY("NType A Offset Y", Float) = 0
		_WTypeAOffsetY("WType A Offset Y", Float) = 0
		_WTypeBOffsetY("WType B Offset Y", Float) = 0
		_FoamOffsetY("Foam Offset Y", Float) = 0
		[Toggle]_FogToggle("FogToggle", Float) = 0
		_NTypeBAnchorY("NType B Anchor Y", Float) = 0
		_FogDepthSize("Fog Depth Size", Range( 0 , 1)) = 0
		_WTypeAAnchorY("WType A Anchor Y", Float) = 0
		_FoamAnchorY("Foam Anchor Y", Float) = 0
		_WTypeBAnchorY("WType B Anchor Y", Float) = 0
		_WaveLength("WaveLength", Float) = 4
		_EdgeWaveMultiplier("EdgeWaveMultiplier", Float) = 1
		_NTypeAAnchorY("NType A Anchor Y", Float) = 0
		_EdgeWaveExponential("EdgeWaveExponential", Float) = 1
		_BVoronoiAngleSpeed("B Voronoi Angle Speed", Range( -8 , 8)) = 1
		[Toggle]_Displacement("Displacement", Float) = 0
		_WAVoronoiAngleSpeed("WA Voronoi Angle Speed", Range( -8 , 8)) = 1
		_FoamVoronoiAngleSpeed("Foam Voronoi Angle Speed", Range( -8 , 8)) = 1
		_WBVoronoiAngleSpeed("WB Voronoi Angle Speed", Range( -8 , 8)) = 1
		_AVoronoiAngleSpeed("A Voronoi Angle Speed", Range( -8 , 8)) = 1
		_AVoronoiSmooth("A Voronoi Smooth", Range( 0 , 1)) = 0
		_FoamVoronoiSmooth("Foam Voronoi Smooth", Range( 0 , 1)) = 0
		_WBVoronoiSmooth("WB Voronoi Smooth", Range( 0 , 1)) = 0
		_WAVoronoiSmooth("WA Voronoi Smooth", Range( 0 , 1)) = 0
		_BVoronoiSmooth("B Voronoi Smooth", Range( 0 , 1)) = 0
		[HideInInspector][IntRange]_CheckDef("CheckDef", Float) = 0
		[HideInInspector][IntRange]_dfNoiseBFold("dfNoiseBFold", Float) = 0
		[HideInInspector][IntRange]_dMaskFold("dMaskFold", Float) = 0
		[HideInInspector][IntRange]_dfNoiseAFold("dfNoiseAFold", Float) = 0
		[HideInInspector][IntRange]_DeformFold("DeformFold", Float) = 0
		[HideInInspector][IntRange]_fMaskFold("fMaskFold", Float) = 0
		[HideInInspector][IntRange]_wBFold("wBFold", Float) = 0
		[HideInInspector][IntRange]_SSTxtInfo("SSTxtInfo", Float) = 0
		[HideInInspector][IntRange]_fMapFold("fMapFold", Float) = 0
		[HideInInspector][IntRange]_wAFold("wAFold", Float) = 0
		[HideInInspector][IntRange]_foamFold("foamFold", Float) = 0
		[HideInInspector][IntRange]_otherFold("otherFold", Float) = 0
		[HideInInspector][IntRange]_CheckMidWave("CheckMidWave", Float) = 0
		[HideInInspector][IntRange]_CheckFlowMap("CheckFlowMap", Float) = 0
		[HideInInspector][IntRange]_fTxtFold("fTxtFold", Float) = 0
		[KeywordEnum(Linear,Normal,Gamma)] _DepthGradeType("DepthGradeType", Float) = 1
		[Toggle]_DepthNegative("DepthNegative", Float) = 0
		_DepthDistance("Depth Distance", Float) = 1
		_DepthExponential("Depth Exponential", Float) = 1
		_DepthSize("Depth Size", Range( 0 , 2)) = 1
		[NoScaleOffset]_FlowMap("Flow Map", 2D) = "white" {}
		[NoScaleOffset]_TextureMap("Texture Map", 2D) = "white" {}
		[NoScaleOffset]_MaskMap("Mask Map", 2D) = "white" {}
		_MaskGradePower("Mask Grade Power", Range( 0.3 , 5)) = 1
		_MaskGradeAmplitude("Mask Grade Amplitude", Range( 1 , 4)) = 1
		_InfluenceFlow("InfluenceFlow", Range( -4 , 4)) = 2
		_OffsetB("Offset B", Range( -1 , 1)) = 0.5
		_FlowSpeed("Flow Speed", Float) = 0.25
		_ReflectionMultiplier("Reflection Multiplier", Range( 1 , 10)) = 1
		_FlowTextureContrast("Flow Texture Contrast", Range( -4 , 4)) = 1
		_MapExponential("Map Exponential", Range( -0.4 , 2)) = 0.3
		_MapChangeSpeed("Map Change Speed", Range( 0 , 20)) = 1
		_ATileY("ATileY", Float) = 1
		_ATileX("ATileX", Float) = 1
		[IntRange]_RotateA("Rotate A", Range( 0 , 4)) = 0
		_BTileX("BTileX", Float) = 1
		_BTileY("BTileY", Float) = 1
		[IntRange]_RotateB("Rotate B", Range( 0 , 4)) = 0
		_FogDepthDistance("Fog Depth Distance", Float) = 5
		_FogDepthExponential("Fog Depth Exponential", Float) = 1
		_FogColor("Fog Color", Color) = (0,0.5249081,0.6792453,1)
		[Toggle]_MirrorReflect("MirrorReflect", Float) = 0
		_MirrorRefIntensity("MirrorRefIntensity", Range( 0 , 1)) = 1
		_MirrorRefColor("MirrorRefColor", Color) = (1,1,1,1)
		[Toggle]_CMReflect("CMReflect", Float) = 0
		[HideInInspector] _texcoord( "", 2D ) = "white" {}


		//_TransmissionShadow( "Transmission Shadow", Range( 0, 1 ) ) = 0.5
		//_TransStrength( "Trans Strength", Range( 0, 50 ) ) = 1
		//_TransNormal( "Trans Normal Distortion", Range( 0, 1 ) ) = 0.5
		//_TransScattering( "Trans Scattering", Range( 1, 50 ) ) = 2
		//_TransDirect( "Trans Direct", Range( 0, 1 ) ) = 0.9
		//_TransAmbient( "Trans Ambient", Range( 0, 1 ) ) = 0.1
		//_TransShadow( "Trans Shadow", Range( 0, 1 ) ) = 0.5
		//_TessPhongStrength( "Tess Phong Strength", Range( 0, 1 ) ) = 0.5
		//_TessValue( "Tess Max Tessellation", Range( 1, 32 ) ) = 16
		//_TessMin( "Tess Min Distance", Float ) = 10
		//_TessMax( "Tess Max Distance", Float ) = 25
		//_TessEdgeLength ( "Tess Edge length", Range( 2, 50 ) ) = 16
		//_TessMaxDisp( "Tess Max Displacement", Float ) = 25

		[HideInInspector][ToggleOff] _SpecularHighlights("Specular Highlights", Float) = 0
		[HideInInspector][ToggleOff] _EnvironmentReflections("Environment Reflections", Float) = 0
		[HideInInspector][ToggleOff] _ReceiveShadows("Receive Shadows", Float) = 1.0

		[HideInInspector] _QueueOffset("_QueueOffset", Float) = 0
        [HideInInspector] _QueueControl("_QueueControl", Float) = -1

        [HideInInspector][NoScaleOffset] unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset] unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset] unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}

		// Blending
		[Enum(UnityEngine.Rendering.BlendMode)]_SrcBlend("Src Blend", Float) = 1.0
		[Enum(UnityEngine.Rendering.BlendMode)]_DstBlend("Dst Blend", Float) = 0.0
		_ZWrite("ZWrite", Float) = 1.0

	}

	SubShader
	{
		LOD 0

		

		Tags { "RenderPipeline"="UniversalPipeline" "RenderType"="Transparent" "Queue"="Transparent" "UniversalMaterialType"="SimpleLit" }

		Cull Back
		ZWrite Off
		ZTest LEqual
		Offset 0 , 0
		AlphaToMask Off

		

		HLSLINCLUDE
		#pragma target 4.5
		#pragma prefer_hlslcc gles
		// ensure rendering platforms toggle list is visible

		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Filtering.hlsl"

		#ifndef ASE_TESS_FUNCS
		#define ASE_TESS_FUNCS
		float4 FixedTess( float tessValue )
		{
			return tessValue;
		}

		float CalcDistanceTessFactor (float4 vertex, float minDist, float maxDist, float tess, float4x4 o2w, float3 cameraPos )
		{
			float3 wpos = mul(o2w,vertex).xyz;
			float dist = distance (wpos, cameraPos);
			float f = clamp(1.0 - (dist - minDist) / (maxDist - minDist), 0.01, 1.0) * tess;
			return f;
		}

		float4 CalcTriEdgeTessFactors (float3 triVertexFactors)
		{
			float4 tess;
			tess.x = 0.5 * (triVertexFactors.y + triVertexFactors.z);
			tess.y = 0.5 * (triVertexFactors.x + triVertexFactors.z);
			tess.z = 0.5 * (triVertexFactors.x + triVertexFactors.y);
			tess.w = (triVertexFactors.x + triVertexFactors.y + triVertexFactors.z) / 3.0f;
			return tess;
		}

		float CalcEdgeTessFactor (float3 wpos0, float3 wpos1, float edgeLen, float3 cameraPos, float4 scParams )
		{
			float dist = distance (0.5 * (wpos0+wpos1), cameraPos);
			float len = distance(wpos0, wpos1);
			float f = max(len * scParams.y / (edgeLen * dist), 1.0);
			return f;
		}

		float DistanceFromPlane (float3 pos, float4 plane)
		{
			float d = dot (float4(pos,1.0f), plane);
			return d;
		}

		bool WorldViewFrustumCull (float3 wpos0, float3 wpos1, float3 wpos2, float cullEps, float4 planes[6] )
		{
			float4 planeTest;
			planeTest.x = (( DistanceFromPlane(wpos0, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
							(( DistanceFromPlane(wpos1, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
							(( DistanceFromPlane(wpos2, planes[0]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.y = (( DistanceFromPlane(wpos0, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
							(( DistanceFromPlane(wpos1, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
							(( DistanceFromPlane(wpos2, planes[1]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.z = (( DistanceFromPlane(wpos0, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
							(( DistanceFromPlane(wpos1, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
							(( DistanceFromPlane(wpos2, planes[2]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.w = (( DistanceFromPlane(wpos0, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
							(( DistanceFromPlane(wpos1, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
							(( DistanceFromPlane(wpos2, planes[3]) > -cullEps) ? 1.0f : 0.0f );
			return !all (planeTest);
		}

		float4 DistanceBasedTess( float4 v0, float4 v1, float4 v2, float tess, float minDist, float maxDist, float4x4 o2w, float3 cameraPos )
		{
			float3 f;
			f.x = CalcDistanceTessFactor (v0,minDist,maxDist,tess,o2w,cameraPos);
			f.y = CalcDistanceTessFactor (v1,minDist,maxDist,tess,o2w,cameraPos);
			f.z = CalcDistanceTessFactor (v2,minDist,maxDist,tess,o2w,cameraPos);

			return CalcTriEdgeTessFactors (f);
		}

		float4 EdgeLengthBasedTess( float4 v0, float4 v1, float4 v2, float edgeLength, float4x4 o2w, float3 cameraPos, float4 scParams )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;
			tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
			tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
			tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
			tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			return tess;
		}

		float4 EdgeLengthBasedTessCull( float4 v0, float4 v1, float4 v2, float edgeLength, float maxDisplacement, float4x4 o2w, float3 cameraPos, float4 scParams, float4 planes[6] )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;

			if (WorldViewFrustumCull(pos0, pos1, pos2, maxDisplacement, planes))
			{
				tess = 0.0f;
			}
			else
			{
				tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
				tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
				tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
				tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			}
			return tess;
		}
		#endif //ASE_TESS_FUNCS
		ENDHLSL

		
		Pass
		{
			
			Name "Forward"
			Tags { "LightMode"="UniversalForward" }

			Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha
			ZWrite Off
			ZTest LEqual
			Offset 0 , 0
			ColorMask RGBA

			

			HLSLPROGRAM

			

			#define _SPECULAR_SETUP 1
			#pragma shader_feature_local_fragment _SPECULARHIGHLIGHTS_OFF
			#pragma shader_feature_local_fragment _ENVIRONMENTREFLECTIONS_OFF
			#pragma multi_compile_fragment _ _SCREEN_SPACE_OCCLUSION
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _ASE_LIGHTING_SIMPLE
			#define _SURFACE_TYPE_TRANSPARENT 1
			#pragma shader_feature_local _RECEIVE_SHADOWS_OFF
			#define _NORMAL_DROPOFF_TS 1
			#define _EMISSION
			#define _NORMALMAP 1
			#define ASE_SRP_VERSION 140010
			#define REQUIRE_DEPTH_TEXTURE 1
			#define REQUIRE_OPAQUE_TEXTURE 1


			

			#pragma multi_compile _ _MAIN_LIGHT_SHADOWS _MAIN_LIGHT_SHADOWS_CASCADE _MAIN_LIGHT_SHADOWS_SCREEN
			#pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS

			
            #pragma multi_compile _ EVALUATE_SH_MIXED EVALUATE_SH_VERTEX
		

			#pragma multi_compile_fragment _ _ADDITIONAL_LIGHT_SHADOWS
			#pragma multi_compile_fragment _ _REFLECTION_PROBE_BLENDING
			#pragma multi_compile_fragment _ _REFLECTION_PROBE_BOX_PROJECTION

			

			
			#pragma multi_compile_fragment _ _SHADOWS_SOFT _SHADOWS_SOFT_LOW _SHADOWS_SOFT_MEDIUM _SHADOWS_SOFT_HIGH
           

			#pragma multi_compile_fragment _ _DBUFFER_MRT1 _DBUFFER_MRT2 _DBUFFER_MRT3
			#pragma multi_compile _ _LIGHT_LAYERS
			#pragma multi_compile_fragment _ _LIGHT_COOKIES
			#pragma multi_compile _ _FORWARD_PLUS

			

			#pragma multi_compile _ LIGHTMAP_SHADOW_MIXING
			#pragma multi_compile _ SHADOWS_SHADOWMASK
			#pragma multi_compile _ DIRLIGHTMAP_COMBINED
			#pragma multi_compile _ LIGHTMAP_ON
			#pragma multi_compile _ DYNAMICLIGHTMAP_ON
			#pragma multi_compile_fragment _ DEBUG_DISPLAY

			#pragma vertex vert
			#pragma fragment frag

			#if defined(_SPECULAR_SETUP) && defined(_ASE_LIGHTING_SIMPLE)
				#define _SPECULAR_COLOR 1
			#endif

			#define SHADERPASS SHADERPASS_FORWARD

			
            #if ASE_SRP_VERSION >=140007
			#include_with_pragmas "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DOTS.hlsl"
			#endif
		

			
			#if ASE_SRP_VERSION >=140007
			#include_with_pragmas "Packages/com.unity.render-pipelines.universal/ShaderLibrary/RenderingLayers.hlsl"
			#endif
		

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Input.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"

			
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRendering.hlsl"
           

			
            #if ASE_SRP_VERSION >=140009
			#include_with_pragmas "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRenderingKeywords.hlsl"
			#endif
		

			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Shadows.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DBuffer.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/Editor/ShaderGraph/Includes/ShaderPass.hlsl"

			#if defined(LOD_FADE_CROSSFADE)
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/LODCrossFade.hlsl"
            #endif

			#if defined(UNITY_INSTANCING_ENABLED) && defined(_TERRAIN_INSTANCED_PERPIXEL_NORMAL)
				#define ENABLE_TERRAIN_PERPIXEL_NORMAL
			#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_FRAG_SCREEN_POSITION
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_WORLD_VIEW_DIR
			#pragma shader_feature_local _CAUSTICB_OCT_CAUSTIC1 _CAUSTICB_OCT_CAUSTIC2 _CAUSTICB_OCT_CAUSTIC3 _CAUSTICB_OCT_CAUSTIC4 _CAUSTICB_OCT_CAUSTIC5 _CAUSTICB_OCT_CAUSTIC6 _CAUSTICB_OCT_CAUSTIC7 _CAUSTICB_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEBTYPE_NONE _NOISEBTYPE_VORONOICELL _NOISEBTYPE_VORONOICAUSTIC _NOISEBTYPE_PERLIN _NOISEBTYPE_TEXTURE
			#pragma shader_feature_local _CELLB_OCT_CELL1 _CELLB_OCT_CELL2 _CELLB_OCT_CELL3 _CELLB_OCT_CELL4 _CELLB_OCT_CELL5 _CELLB_OCT_CELL6 _CELLB_OCT_CELL7 _CELLB_OCT_CELL8
			#pragma shader_feature_local _CELLA_OCT_CELL1 _CELLA_OCT_CELL2 _CELLA_OCT_CELL3 _CELLA_OCT_CELL4 _CELLA_OCT_CELL5 _CELLA_OCT_CELL6 _CELLA_OCT_CELL7 _CELLA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICA_OCT_CAUSTIC1 _CAUSTICA_OCT_CAUSTIC2 _CAUSTICA_OCT_CAUSTIC3 _CAUSTICA_OCT_CAUSTIC4 _CAUSTICA_OCT_CAUSTIC5 _CAUSTICA_OCT_CAUSTIC6 _CAUSTICA_OCT_CAUSTIC7 _CAUSTICA_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEATYPE_NONE _NOISEATYPE_VORONOICELL _NOISEATYPE_VORONOICAUSTIC _NOISEATYPE_PERLIN _NOISEATYPE_TEXTURE
			#pragma shader_feature_local _WAVEBTYPE_NONE _WAVEBTYPE_VORONOICELL _WAVEBTYPE_VORONOICAUSTIC _WAVEBTYPE_PERLIN _WAVEBTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICWAVEB_OCT_CAUSTIC1 _CAUSTICWAVEB_OCT_CAUSTIC2 _CAUSTICWAVEB_OCT_CAUSTIC3 _CAUSTICWAVEB_OCT_CAUSTIC4 _CAUSTICWAVEB_OCT_CAUSTIC5 _CAUSTICWAVEB_OCT_CAUSTIC6 _CAUSTICWAVEB_OCT_CAUSTIC7 _CAUSTICWAVEB_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLWAVEB_OCT_CELL1 _CELLWAVEB_OCT_CELL2 _CELLWAVEB_OCT_CELL3 _CELLWAVEB_OCT_CELL4 _CELLWAVEB_OCT_CELL5 _CELLWAVEB_OCT_CELL6 _CELLWAVEB_OCT_CELL7 _CELLWAVEB_OCT_CELL8
			#pragma shader_feature_local _WAVEAGRADETYPE_LINEAR _WAVEAGRADETYPE_NORMAL _WAVEAGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBGRADETYPE_LINEAR _WAVEBGRADETYPE_NORMAL _WAVEBGRADETYPE_GAMMA
			#pragma shader_feature_local _DEPTHGRADETYPE_LINEAR _DEPTHGRADETYPE_NORMAL _DEPTHGRADETYPE_GAMMA
			#pragma shader_feature_local _FLOWMAPTYPE_DEPTH _FLOWMAPTYPE_FLOWTEXTURE
			#pragma shader_feature_local _MASK_ON
			#pragma shader_feature_local _MASKGRADETYPE_LINEAR _MASKGRADETYPE_NORMAL _MASKGRADETYPE_GAMMA
			#pragma shader_feature_local _TXTGRADETYPE_LINEAR _TXTGRADETYPE_NORMAL _TXTGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBINVERT_ON
			#pragma shader_feature_local _WAVEAINVERT_ON
			#pragma shader_feature_local _SELECTWAVETYPE_LAYERA _SELECTWAVETYPE_LAYERB _SELECTWAVETYPE_MULTIPLY _SELECTWAVETYPE_ADD _SELECTWAVETYPE_SUBTRACT _SELECTWAVETYPE_DIVIDE _SELECTWAVETYPE_DOT _SELECTWAVETYPE_FMOD _SELECTWAVETYPE_FMODINVERT
			#pragma shader_feature_local _DFAGRADETYPE_LINEAR _DFAGRADETYPE_NORMAL _DFAGRADETYPE_GAMMA
			#pragma shader_feature_local _DFBGRADETYPE_LINEAR _DFBGRADETYPE_NORMAL _DFBGRADETYPE_GAMMA
			#pragma shader_feature_local _DFNOISEAINVERT_ON
			#pragma shader_feature_local _DFNOISEBINVERT_ON
			#pragma shader_feature_local _SELECTDEFORMTYPE_LAYERA _SELECTDEFORMTYPE_LAYERB _SELECTDEFORMTYPE_MULTIPLY _SELECTDEFORMTYPE_ADD _SELECTDEFORMTYPE_SUBTRACT _SELECTDEFORMTYPE_DIVIDE _SELECTDEFORMTYPE_DOT _SELECTDEFORMTYPE_FMOD _SELECTDEFORMTYPE_FMODINVERT
			#pragma shader_feature_local _FOAMTYPE_NONE _FOAMTYPE_VORONOICELL _FOAMTYPE_VORONOICAUSTIC _FOAMTYPE_PERLIN _FOAMTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICFOAM_OCT_CAUSTIC1 _CAUSTICFOAM_OCT_CAUSTIC2 _CAUSTICFOAM_OCT_CAUSTIC3 _CAUSTICFOAM_OCT_CAUSTIC4 _CAUSTICFOAM_OCT_CAUSTIC5 _CAUSTICFOAM_OCT_CAUSTIC6 _CAUSTICFOAM_OCT_CAUSTIC7 _CAUSTICFOAM_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLFOAM_OCT_CELL1 _CELLFOAM_OCT_CELL2 _CELLFOAM_OCT_CELL3 _CELLFOAM_OCT_CELL4 _CELLFOAM_OCT_CELL5 _CELLFOAM_OCT_CELL6 _CELLFOAM_OCT_CELL7 _CELLFOAM_OCT_CELL8
			#pragma shader_feature_local _CELLWAVEA_OCT_CELL1 _CELLWAVEA_OCT_CELL2 _CELLWAVEA_OCT_CELL3 _CELLWAVEA_OCT_CELL4 _CELLWAVEA_OCT_CELL5 _CELLWAVEA_OCT_CELL6 _CELLWAVEA_OCT_CELL7 _CELLWAVEA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICWAVEA_OCT_CAUSTIC1 _CAUSTICWAVEA_OCT_CAUSTIC2 _CAUSTICWAVEA_OCT_CAUSTIC3 _CAUSTICWAVEA_OCT_CAUSTIC4 _CAUSTICWAVEA_OCT_CAUSTIC5 _CAUSTICWAVEA_OCT_CAUSTIC6 _CAUSTICWAVEA_OCT_CAUSTIC7 _CAUSTICWAVEA_OCT_CAUSTIC8
			#pragma shader_feature_local _WAVEATYPE_NONE _WAVEATYPE_VORONOICELL _WAVEATYPE_VORONOICAUSTIC _WAVEATYPE_PERLIN _WAVEATYPE_TEXTURE
			#pragma shader_feature_local _FOAMINVERT_ON
			#pragma shader_feature_local _FOAMGRADETYPE_LINEAR _FOAMGRADETYPE_NORMAL _FOAMGRADETYPE_GAMMA
			#pragma shader_feature_local _FOGDEPTHGRADETYPE_LINEAR _FOGDEPTHGRADETYPE_NORMAL _FOGDEPTHGRADETYPE_GAMMA


			#if defined(ASE_EARLY_Z_DEPTH_OPTIMIZE) && (SHADER_TARGET >= 45)
				#define ASE_SV_DEPTH SV_DepthLessEqual
				#define ASE_SV_POSITION_QUALIFIERS linear noperspective centroid
			#else
				#define ASE_SV_DEPTH SV_Depth
				#define ASE_SV_POSITION_QUALIFIERS
			#endif

			struct VertexInput
			{
				float4 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 texcoord : TEXCOORD0;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct VertexOutput
			{
				ASE_SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				float4 clipPosV : TEXCOORD0;
				float4 lightmapUVOrVertexSH : TEXCOORD1;
				half4 fogFactorAndVertexLight : TEXCOORD2;
				float4 tSpace0 : TEXCOORD3;
				float4 tSpace1 : TEXCOORD4;
				float4 tSpace2 : TEXCOORD5;
				#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR)
					float4 shadowCoord : TEXCOORD6;
				#endif
				#if defined(DYNAMICLIGHTMAP_ON)
					float2 dynamicLightmapUV : TEXCOORD7;
				#endif
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			CBUFFER_START(UnityPerMaterial)
			float4 _ReflectColor;
			float4 _MaskMap_ST;
			float4 _FogColor;
			float4 _MirrorRefColor;
			float3 _RefractColor;
			float3 _SpecularColor;
			float _FlowTextureAmplitude;
			float _FlowTextureExponential;
			float _FlowTextureContrast;
			float _MaskGradeAmplitude;
			float _MaskGradePower;
			float _ShoreIntensity;
			float _FoamIntensity;
			float _BVoronoiAngleSpeed;
			float _MapChangeSpeed;
			float _FoamVoronoiAngleSpeed;
			float _FoamVoronoiSmooth;
			float _FoamDeformToggle;
			float _DefWeightFoam;
			float _FoamTileX;
			float _FoamTileY;
			float _FoamOffsetX;
			float _FoamSpeedX;
			float _FoamNoiseScale;
			float _RotateB;
			float _BTileX;
			float _BTileY;
			float _ShoreBumpIntensity;
			float _NormalGradePower;
			float _NormalIntensity;
			float _foamFold;
			float _otherFold;
			float _Displacement;
			float _ShoreFoamToggle;
			float _DepthNegative;
			float _OffsetB;
			float _DepthDistance;
			float _DepthSize;
			float _MapExponential;
			float _InfluenceFlow;
			float _ATileX;
			float _ATileY;
			float _FlowSpeed;
			float _RotateA;
			float _FoamOverallSpeed;
			float _DepthExponential;
			float _FoamSpeedY;
			float _FoamAnchorY;
			float _FoamAnchorX;
			float _ScreenContrast;
			float _FogToggle;
			float _Reflect;
			float _CMReflect;
			float _ReflectionStrength;
			float _CubeMapRotate;
			float _CMXPos;
			float _CMYPos;
			float _CMZPos;
			float _ReflectionMultiplier;
			float _MirrorReflect;
			float _MirrorRefIntensity;
			float _FogDepthDistance;
			float _FogDepthExponential;
			float _FogDepthSize;
			float _Specular;
			float _Smoothness;
			float _RefractionToggle;
			float _NormalToggle;
			float _SSBluricTransparent;
			float _SurfaceIntensity;
			float _MiddleWaveBumpIntensity;
			float _FoamRotateSpeed;
			float _FoamRotate;
			float _FoamAmplitude;
			float _FoamExp;
			float _FoamContrast;
			float _MiddleFoamToggle;
			float _MiddleWaveIntensity;
			float _FoamOffsetY;
			float _MidFlowMask;
			float _DefWeightA;
			float _MidBDeformToggle;
			float _DefWeightB;
			float _EdgeWaveExponential;
			float _EdgeWaveMultiplier;
			float _WaveLength;
			float _VT_Intensity;
			float _SurfaceToggle;
			float _MidADeformToggle;
			float _TRSurfWaveToggle;
			float _PatternMultiplier;
			float _SSTileY;
			float _ANoiseScale;
			float _AVoronoiSmooth;
			float _AVoronoiAngleSpeed;
			float _NTypeARotate;
			float _WAVoronoiAngleSpeed;
			float _WAVoronoiSmooth;
			float _WANoiseScale;
			float _WTypeATileX;
			float _NTypeATileX;
			float _WTypeATileY;
			float _WTypeAOffsetY;
			float _WTypeASpeedX;
			float _WTypeASpeedY;
			float _WTypeAOverallSpeed;
			float _WTypeARotate;
			float _WTypeARotateSpeed;
			float _WTypeAAnchorX;
			float _WTypeAAnchorY;
			float _WTypeAOffsetX;
			float _NTypeATileY;
			float _NTypeAOffsetX;
			float _NTypeAOffsetY;
			float _BNoiseScale;
			float _NTypeBTileX;
			float _NTypeBTileY;
			float _NTypeBOffsetX;
			float _NTypeBOffsetY;
			float _NTypeBSpeedX;
			float _NTypeBSpeedY;
			float _NTypeBOverallSpeed;
			float _NTypeBAnchorX;
			float _NTypeBAnchorY;
			float _BVoronoiSmooth;
			float _NTypeBRotateSpeed;
			float _NTypeBRotate;
			float _NTypeAAnchorY;
			float _NTypeAAnchorX;
			float _NTypeARotateSpeed;
			float _NTypeAOverallSpeed;
			float _NTypeASpeedY;
			float _NTypeASpeedX;
			float _WBVoronoiAngleSpeed;
			float _WBVoronoiSmooth;
			float _WBNoiseScale;
			float _WTypeBTileX;
			float _dfNoiseBFold;
			float _dfNoiseAFold;
			float _DeformFold;
			float _CheckFlowMap;
			float _fMapFold;
			float _wAFold;
			float _CheckMidWave;
			float _DFBAmplitude;
			float _DFAAmplitude;
			float _DFBExp;
			float _DFAExp;
			float _NoiseAContrast;
			float _NoiseBContrast;
			float _NA_Intensity;
			float _NB_Intensity;
			float _wBFold;
			float _SSTxtInfo;
			float _SSSize;
			float _SSTileX;
			float _dMaskFold;
			float _PatternHeight;
			float _fMaskFold;
			float _CheckDef;
			float _WTypeBTileY;
			float _WTypeBOffsetX;
			float _WTypeBOffsetY;
			float _WTypeBSpeedX;
			float _WTypeBSpeedY;
			float _WTypeBOverallSpeed;
			float _WTypeBRotate;
			float _WTypeBRotateSpeed;
			float _WTypeBAnchorX;
			float _WTypeBAnchorY;
			float _WaveAAmplitude;
			float _WaveBAmplitude;
			float _WaveAExp;
			float _WaveBExp;
			float _MGradeAmplitude;
			float _WaveBContrast;
			float _WaveAContrast;
			float _WaveAIntensity;
			float _WaveBIntensity;
			float _fTxtFold;
			float _Transparency;
			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			CBUFFER_END

			#ifdef SCENEPICKINGPASS
				float4 _SelectionID;
			#endif

			#ifdef SCENESELECTIONPASS
				int _ObjectId;
				int _PassValue;
			#endif

			sampler2D _DeformNoiseTypeB;
			sampler2D _DeformNoiseTypeA;
			sampler2D _WaveTypeB;
			sampler2D _WaveTypeA;
			sampler2D _TextureMap;
			sampler2D _FlowMap;
			sampler2D _MaskMap;
			sampler2D _FoamTexture;
			sampler2D _BluricRefractionPattern;
			samplerCUBE _ReflectMap;
			sampler2D _ReflectionMap;


			float SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD(float2 uv)
			{
				#if defined(REQUIRE_DEPTH_TEXTURE)
				#if defined(UNITY_STEREO_INSTANCING_ENABLED) || defined(UNITY_STEREO_MULTIVIEW_ENABLED)
				 	float rawDepth = SAMPLE_TEXTURE2D_ARRAY_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, unity_StereoEyeIndex, 0).r;
				#else
				 	float rawDepth = SAMPLE_DEPTH_TEXTURE_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, 0);
				#endif
				return rawDepth;
				#endif // REQUIRE_DEPTH_TEXTURE
				return 0;
			}
			
			float2 voronoihash2_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float3 mod2D289( float3 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float2 mod2D289( float2 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float3 permute( float3 x ) { return mod2D289( ( ( x * 34.0 ) + 1.0 ) * x ); }
			float snoise( float2 v )
			{
				const float4 C = float4( 0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439 );
				float2 i = floor( v + dot( v, C.yy ) );
				float2 x0 = v - i + dot( i, C.xx );
				float2 i1;
				i1 = ( x0.x > x0.y ) ? float2( 1.0, 0.0 ) : float2( 0.0, 1.0 );
				float4 x12 = x0.xyxy + C.xxzz;
				x12.xy -= i1;
				i = mod2D289( i );
				float3 p = permute( permute( i.y + float3( 0.0, i1.y, 1.0 ) ) + i.x + float3( 0.0, i1.x, 1.0 ) );
				float3 m = max( 0.5 - float3( dot( x0, x0 ), dot( x12.xy, x12.xy ), dot( x12.zw, x12.zw ) ), 0.0 );
				m = m * m;
				m = m * m;
				float3 x = 2.0 * frac( p * C.www ) - 1.0;
				float3 h = abs( x ) - 0.5;
				float3 ox = floor( x + 0.5 );
				float3 a0 = x - ox;
				m *= 1.79284291400159 - 0.85373472095314 * ( a0 * a0 + h * h );
				float3 g;
				g.x = a0.x * x0.x + h.x * x0.y;
				g.yz = a0.yz * x12.xz + h.yz * x12.yw;
				return 130.0 * dot( m, g );
			}
			
			float2 voronoihash8_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float3 PerturbNormal107_g1( float3 surf_pos, float3 surf_norm, float height, float scale )
			{
				// "Bump Mapping Unparametrized Surfaces on the GPU" by Morten S. Mikkelsen
				float3 vSigmaS = ddx( surf_pos );
				float3 vSigmaT = ddy( surf_pos );
				float3 vN = surf_norm;
				float3 vR1 = cross( vSigmaT , vN );
				float3 vR2 = cross( vN , vSigmaS );
				float fDet = dot( vSigmaS , vR1 );
				float dBs = ddx( height );
				float dBt = ddy( height );
				float3 vSurfGrad = scale * 0.05 * sign( fDet ) * ( dBs * vR1 + dBt * vR2 );
				return normalize ( abs( fDet ) * vN - vSurfGrad );
			}
			
			inline float4 ASE_ComputeGrabScreenPos( float4 pos )
			{
				#if UNITY_UV_STARTS_AT_TOP
				float scale = -1.0;
				#else
				float scale = 1.0;
				#endif
				float4 o = pos;
				o.y = pos.w * 0.5f;
				o.y = ( pos.y - o.y ) * _ProjectionParams.x * scale + o.y;
				return o;
			}
			

			VertexOutput VertexFunction( VertexInput v  )
			{
				VertexOutput o = (VertexOutput)0;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				float RF_Zero315 = 0.0;
				float3 temp_cast_0 = (RF_Zero315).xxx;
				float4 ase_clipPos = TransformObjectToHClip((v.positionOS).xyz);
				float4 screenPos = ComputeScreenPos(ase_clipPos);
				float4 ase_screenPosNorm = screenPos / screenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_3 );
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_6 );
				float3 temp_cast_7 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_7;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_7;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = v.texcoord.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_8 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_8 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = v.texcoord.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = v.texcoord.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ), 0, 0.0) ).rgb , tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ), 0, 0.0) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_9 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_9 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_12 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = v.texcoord.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_13 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_13 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_12;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_16 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_18 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = v.texcoord.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_19 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_20 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_21 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_22 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_22;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2Dlod( _DeformNoiseTypeA, float4( UV20_g516, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_22;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = v.texcoord.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_24 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_25 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_26 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_27 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_27;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_24;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_25;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_26;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2Dlod( _FoamTexture, float4( UV20_g786, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_27;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_28 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_28 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_32 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = v.texcoord.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_35 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_36 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_37 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_38 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_38;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_35;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_36;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_37;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2Dlod( _WaveTypeA, float4( UV20_g790, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_38;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_39 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_39 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_43 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_45 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = v.texcoord.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_46 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_47 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_48 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_49 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_49;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_46;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_47;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_48;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2Dlod( _DeformNoiseTypeB, float4( UV20_g512, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_49;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = v.texcoord.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_51 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_52 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_53 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_54 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_54;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_51;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_52;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_53;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2Dlod( _WaveTypeB, float4( UV20_g540, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_54;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_55 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_55 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_58 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_58;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 linearToGamma1730 = FastLinearToSRGB( RF_SurfaceWave1466 );
				float3 linearToGamma1731 = FastLinearToSRGB( RF_FlowMask535 );
				float3 saferPower1714 = abs( ( 1.0 - linearToGamma1731 ) );
				float3 temp_cast_64 = (_EdgeWaveExponential).xxx;
				float3 RF_Vertex_Offset1726 = (( _Displacement )?( ( ( ( linearToGamma1730 * saturate( (pow( saferPower1714 , temp_cast_64 )*_EdgeWaveMultiplier + 0.0) ) ) * _WaveLength ) * v.normalOS ) ):( temp_cast_0 ));
				
				float4 RF_VertexTangent1706 = ( _VT_Intensity * v.positionOS );
				
				o.ase_texcoord8.xyz = v.texcoord.xyz;
				o.ase_texcoord9 = v.positionOS;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord8.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.positionOS.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif

				float3 vertexValue = RF_Vertex_Offset1726;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.positionOS.xyz = vertexValue;
				#else
					v.positionOS.xyz += vertexValue;
				#endif
				v.normalOS = v.normalOS;
				v.tangentOS = RF_VertexTangent1706;

				VertexPositionInputs vertexInput = GetVertexPositionInputs( v.positionOS.xyz );
				VertexNormalInputs normalInput = GetVertexNormalInputs( v.normalOS, v.tangentOS );

				o.tSpace0 = float4( normalInput.normalWS, vertexInput.positionWS.x );
				o.tSpace1 = float4( normalInput.tangentWS, vertexInput.positionWS.y );
				o.tSpace2 = float4( normalInput.bitangentWS, vertexInput.positionWS.z );

				#if defined(LIGHTMAP_ON)
					OUTPUT_LIGHTMAP_UV( v.texcoord1, unity_LightmapST, o.lightmapUVOrVertexSH.xy );
				#endif

				#if !defined(LIGHTMAP_ON)
					OUTPUT_SH( normalInput.normalWS.xyz, o.lightmapUVOrVertexSH.xyz );
				#endif

				#if defined(DYNAMICLIGHTMAP_ON)
					o.dynamicLightmapUV.xy = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
				#endif

				#if defined(ENABLE_TERRAIN_PERPIXEL_NORMAL)
					o.lightmapUVOrVertexSH.zw = v.texcoord.xy;
					o.lightmapUVOrVertexSH.xy = v.texcoord.xy * unity_LightmapST.xy + unity_LightmapST.zw;
				#endif

				half3 vertexLight = VertexLighting( vertexInput.positionWS, normalInput.normalWS );

				#ifdef ASE_FOG
					half fogFactor = ComputeFogFactor( vertexInput.positionCS.z );
				#else
					half fogFactor = 0;
				#endif

				o.fogFactorAndVertexLight = half4(fogFactor, vertexLight);

				#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR)
					o.shadowCoord = GetShadowCoord( vertexInput );
				#endif

				o.positionCS = vertexInput.positionCS;
				o.clipPosV = vertexInput.positionCS;
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 texcoord : TEXCOORD0;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( VertexInput v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.texcoord = v.texcoord;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
				return patch[id];
			}

			[domain("tri")]
			VertexOutput DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				VertexInput o = (VertexInput) 0;
				o.positionOS = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.texcoord = patch[0].texcoord * bary.x + patch[1].texcoord * bary.y + patch[2].texcoord * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].vertex.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			VertexOutput vert ( VertexInput v )
			{
				return VertexFunction( v );
			}
			#endif

			half4 frag ( VertexOutput IN
						#ifdef ASE_DEPTH_WRITE_ON
						,out float outputDepth : ASE_SV_DEPTH
						#endif
						#ifdef _WRITE_RENDERING_LAYERS
						, out float4 outRenderingLayers : SV_Target1
						#endif
						 ) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

				#if defined(LOD_FADE_CROSSFADE)
					LODFadeCrossFade( IN.positionCS );
				#endif

				#if defined(ENABLE_TERRAIN_PERPIXEL_NORMAL)
					float2 sampleCoords = (IN.lightmapUVOrVertexSH.zw / _TerrainHeightmapRecipSize.zw + 0.5f) * _TerrainHeightmapRecipSize.xy;
					float3 WorldNormal = TransformObjectToWorldNormal(normalize(SAMPLE_TEXTURE2D(_TerrainNormalmapTexture, sampler_TerrainNormalmapTexture, sampleCoords).rgb * 2 - 1));
					float3 WorldTangent = -cross(GetObjectToWorldMatrix()._13_23_33, WorldNormal);
					float3 WorldBiTangent = cross(WorldNormal, -WorldTangent);
				#else
					float3 WorldNormal = normalize( IN.tSpace0.xyz );
					float3 WorldTangent = IN.tSpace1.xyz;
					float3 WorldBiTangent = IN.tSpace2.xyz;
				#endif

				float3 WorldPosition = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 WorldViewDirection = _WorldSpaceCameraPos.xyz  - WorldPosition;
				float4 ShadowCoords = float4( 0, 0, 0, 0 );

				float4 ClipPos = IN.clipPosV;
				float4 ScreenPos = ComputeScreenPos( IN.clipPosV );

				float2 NormalizedScreenSpaceUV = GetNormalizedScreenSpaceUV(IN.positionCS);

				#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR)
					ShadowCoords = IN.shadowCoord;
				#elif defined(MAIN_LIGHT_CALCULATE_SHADOWS)
					ShadowCoords = TransformWorldToShadowCoord( WorldPosition );
				#endif

				WorldViewDirection = SafeNormalize( WorldViewDirection );

				float RF_Zero315 = 0.0;
				float3 temp_cast_0 = (RF_Zero315).xxx;
				float4 ase_screenPosNorm = ScreenPos / ScreenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_3 );
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_6 );
				float3 temp_cast_7 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_7;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_7;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = IN.ase_texcoord8.xyz.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_8 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_8 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = IN.ase_texcoord8.xyz.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = IN.ase_texcoord8.xyz.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ) ).rgb , tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_9 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_9 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_12 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = IN.ase_texcoord8.xyz.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_13 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_13 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_12;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_16 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_18 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = IN.ase_texcoord8.xyz.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_19 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_20 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_21 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_22 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_22;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2D( _DeformNoiseTypeA, UV20_g516 ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_22;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = IN.ase_texcoord8.xyz.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_24 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_25 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_26 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_27 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_27;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_24;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_25;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_26;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2D( _FoamTexture, UV20_g786 ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_27;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_28 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_28 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_32 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = IN.ase_texcoord8.xyz.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_35 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_36 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_37 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_38 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_38;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_35;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_36;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_37;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2D( _WaveTypeA, UV20_g790 ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_38;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_39 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_39 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_43 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_45 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = IN.ase_texcoord8.xyz.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_46 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_47 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_48 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_49 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_49;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_46;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_47;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_48;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2D( _DeformNoiseTypeB, UV20_g512 ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_49;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = IN.ase_texcoord8.xyz.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_51 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_52 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_53 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_54 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_54;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_51;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_52;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_53;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2D( _WaveTypeB, UV20_g540 ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_54;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_55 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_55 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_58 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_58;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_FinalSurface1629 = (( _SurfaceToggle )?( ( _SurfaceIntensity * linearToGamma1433 ) ):( temp_cast_0 ));
				
				float2 temp_output_1_0_g780 = float2( 0,0 );
				float dotResult4_g780 = dot( temp_output_1_0_g780 , temp_output_1_0_g780 );
				float3 appendResult10_g780 = (float3((temp_output_1_0_g780).x , (temp_output_1_0_g780).y , sqrt( ( 1.0 - saturate( dotResult4_g780 ) ) )));
				float3 normalizeResult12_g780 = normalize( appendResult10_g780 );
				float3 surf_pos107_g1 = WorldPosition;
				float3 surf_norm107_g1 = WorldNormal;
				float3 linearToGamma1508 = LinearToGamma22( saturate( ( float4( ( RF_FlowMap536 * _ShoreBumpIntensity ) , 0.0 ) + ( _MiddleWaveBumpIntensity * RF_MidWave1281 ) ) ).xyz );
				float3 temp_cast_67 = ((0.01 + (_NormalGradePower - 0.0) * (2.0 - 0.01) / (2.0 - 0.0))).xxx;
				float height107_g1 = pow( linearToGamma1508 , temp_cast_67 ).x;
				float scale107_g1 = _NormalIntensity;
				float3 localPerturbNormal107_g1 = PerturbNormal107_g1( surf_pos107_g1 , surf_norm107_g1 , height107_g1 , scale107_g1 );
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				float3 worldToTangentDir42_g1 = mul( ase_worldToTangent, localPerturbNormal107_g1);
				float2 appendResult1488 = (float2(_SSTileX , _SSTileY));
				float4 unityObjectToClipPos1477 = TransformWorldToHClip(TransformObjectToWorld(IN.ase_texcoord9.xyz));
				float4 computeScreenPos1478 = ComputeScreenPos( unityObjectToClipPos1477 );
				float2 break1493 = ( appendResult1488 * (computeScreenPos1478).xy );
				float temp_output_1492_0 = (computeScreenPos1478).w;
				float4 appendResult1494 = (float4(break1493.x , break1493.y , (computeScreenPos1478).z , temp_output_1492_0));
				float3 unpack1485 = UnpackNormalScale( tex2D( _BluricRefractionPattern, ( ( appendResult1494 / temp_output_1492_0 ) * _SSSize ).xy ), ( (-0.1 + (_PatternHeight - -1.0) * (0.1 - -0.1) / (1.0 - -1.0)) * _PatternMultiplier ) );
				unpack1485.z = lerp( 1, unpack1485.z, saturate(( (-0.1 + (_PatternHeight - -1.0) * (0.1 - -0.1) / (1.0 - -1.0)) * _PatternMultiplier )) );
				float3 RF_BumpForSmooth1486 = unpack1485;
				float3 RF_NewObjectNormal1230 = (( _SSBluricTransparent )?( BlendNormalRNM( (( _NormalToggle )?( worldToTangentDir42_g1 ):( normalizeResult12_g780 )) , RF_BumpForSmooth1486 ) ):( (( _NormalToggle )?( worldToTangentDir42_g1 ):( normalizeResult12_g780 )) ));
				
				float4 temp_cast_71 = (RF_Zero315).xxxx;
				float4 ase_grabScreenPos = ASE_ComputeGrabScreenPos( ScreenPos );
				float4 ase_grabScreenPosNorm = ase_grabScreenPos / ase_grabScreenPos.w;
				float4 fetchOpaqueVal1443 = float4( SHADERGRAPH_SAMPLE_SCENE_COLOR( saturate( ( ase_grabScreenPosNorm + float4( RF_NewObjectNormal1230 , 0.0 ) ) ).xy ), 1.0 );
				float4 saferPower1461 = abs( fetchOpaqueVal1443 );
				float4 temp_cast_75 = ((0.3 + (_ScreenContrast - 0.0) * (1.5 - 0.3) / (1.0 - 0.0))).xxxx;
				float4 RF_Refraction1447 = (( _RefractionToggle )?( ( float4( _RefractColor , 0.0 ) * pow( saferPower1461 , temp_cast_75 ) * 0.6 ) ):( temp_cast_71 ));
				float4 temp_cast_76 = (RF_Zero315).xxxx;
				float4 temp_cast_77 = (RF_Zero315).xxxx;
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 worldRefl1398 = normalize( reflect( -WorldViewDirection, float3( dot( tanToWorld0, RF_NewObjectNormal1230 ), dot( tanToWorld1, RF_NewObjectNormal1230 ), dot( tanToWorld2, RF_NewObjectNormal1230 ) ) ) );
				float3 VertexPos5_g776 = worldRefl1398;
				float3 appendResult10_g776 = (float3(0.0 , VertexPos5_g776.y , 0.0));
				float3 VertexPosRotationAxis11_g776 = appendResult10_g776;
				float3 break13_g776 = VertexPos5_g776;
				float3 appendResult14_g776 = (float3(break13_g776.x , 0.0 , break13_g776.z));
				float3 VertexPosOtherAxis12_g776 = appendResult14_g776;
				float Angle3_g776 = radians( _CubeMapRotate );
				float3 appendResult1409 = (float3(_CMXPos , -_CMYPos , _CMZPos));
				float RF_One317 = 1.0;
				float4 temp_cast_78 = (RF_Zero315).xxxx;
				float4 RF_Reflect1423 = (( _Reflect )?( ( (( _CMReflect )?( ( _ReflectionStrength * ( texCUBE( _ReflectMap, ( ( VertexPosRotationAxis11_g776 + ( VertexPosOtherAxis12_g776 * cos( Angle3_g776 ) ) + ( cross( float3(0,1,0) , VertexPosOtherAxis12_g776 ) * sin( Angle3_g776 ) ) ) + appendResult1409 ) ) * _ReflectColor ) * ( _ReflectionMultiplier + RF_One317 ) ) ):( temp_cast_77 )) + (( _MirrorReflect )?( ( tex2D( _ReflectionMap, ( ase_screenPosNorm + float4( RF_NewObjectNormal1230 , 0.0 ) ).xy ) * _MirrorRefIntensity * _MirrorRefColor ) ):( temp_cast_78 )) ) ):( temp_cast_76 ));
				float screenDepth1_g772 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g772 = abs( ( screenDepth1_g772 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _FogDepthDistance ) );
				float saferPower3_g772 = abs( distanceDepth1_g772 );
				float temp_output_29_0_g772 = ( ( saturate( pow( saferPower3_g772 , max( _FogDepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + ((2.0 + (_FogDepthSize - 0.0) * (3.0 - 2.0) / (1.0 - 0.0)) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_81 = (temp_output_29_0_g772).xxx;
				float3 temp_cast_82 = (temp_output_29_0_g772).xxx;
				float3 gammaToLinear30_g772 = SRGBToLinear( temp_cast_82 );
				float3 temp_cast_83 = (temp_output_29_0_g772).xxx;
				float3 temp_cast_84 = (temp_output_29_0_g772).xxx;
				float3 temp_cast_85 = (temp_output_29_0_g772).xxx;
				float3 linearToGamma31_g772 = LinearToSRGB( temp_cast_85 );
				float3 temp_cast_86 = (temp_output_29_0_g772).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g772 = gammaToLinear30_g772;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g772 = temp_cast_86;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g772 = linearToGamma31_g772;
				#else
				float3 staticSwitch32_g772 = temp_cast_86;
				#endif
				float3 temp_output_36_0_g772 = saturate( staticSwitch32_g772 );
				float3 temp_output_1179_0 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g772 ) ):( temp_output_36_0_g772 ));
				float3 gammaToLinear1181 = Gamma22ToLinear( temp_output_1179_0 );
				float3 linearToGamma1180 = LinearToGamma22( temp_output_1179_0 );
				#if defined( _FOGDEPTHGRADETYPE_LINEAR )
				float3 staticSwitch1182 = gammaToLinear1181;
				#elif defined( _FOGDEPTHGRADETYPE_NORMAL )
				float3 staticSwitch1182 = temp_output_1179_0;
				#elif defined( _FOGDEPTHGRADETYPE_GAMMA )
				float3 staticSwitch1182 = linearToGamma1180;
				#else
				float3 staticSwitch1182 = gammaToLinear1181;
				#endif
				float3 RF_FogDepth1187 = saturate( ( 1.0 - staticSwitch1182 ) );
				float4 lerpResult1194 = lerp( saturate( RF_Refraction1447 ) , _FogColor , float4( RF_FogDepth1187 , 0.0 ));
				float4 RF_Comp_Fog1197 = (( _FogToggle )?( ( lerpResult1194 + RF_Reflect1423 ) ):( ( RF_Reflect1423 + RF_Refraction1447 ) ));
				float4 lerpResult1586 = lerp( RF_Refraction1447 , RF_Comp_Fog1197 , RF_One317);
				float4 RF_FinalEmission1624 = ( lerpResult1586 + RF_Reflect1423 );
				
				float3 RF_Specular1705 = ( _SpecularColor * _Specular );
				
				float3 temp_cast_89 = (_Transparency).xxx;
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 RF_TransparentIntensity1436 = (( _TRSurfWaveToggle )?( ( _Transparency * RF_SurfaceWave1466 ) ):( temp_cast_89 ));
				

				float3 BaseColor = RF_FinalSurface1629;
				float3 Normal = RF_NewObjectNormal1230;
				float3 Emission = RF_FinalEmission1624.rgb;
				float3 Specular = RF_Specular1705;
				float Metallic = 0;
				float Smoothness = _Smoothness;
				float Occlusion = 1;
				float Alpha = RF_TransparentIntensity1436.x;
				float AlphaClipThreshold = 0.5;
				float AlphaClipThresholdShadow = 0.5;
				float3 BakedGI = 0;
				float3 RefractionColor = 1;
				float RefractionIndex = 1;
				float3 Transmission = 1;
				float3 Translucency = 1;

				#ifdef ASE_DEPTH_WRITE_ON
					float DepthValue = IN.positionCS.z;
				#endif

				#ifdef _CLEARCOAT
					float CoatMask = 0;
					float CoatSmoothness = 0;
				#endif

				#ifdef _ALPHATEST_ON
					clip(Alpha - AlphaClipThreshold);
				#endif

				InputData inputData = (InputData)0;
				inputData.positionWS = WorldPosition;
				inputData.viewDirectionWS = WorldViewDirection;

				#ifdef _NORMALMAP
						#if _NORMAL_DROPOFF_TS
							inputData.normalWS = TransformTangentToWorld(Normal, half3x3(WorldTangent, WorldBiTangent, WorldNormal));
						#elif _NORMAL_DROPOFF_OS
							inputData.normalWS = TransformObjectToWorldNormal(Normal);
						#elif _NORMAL_DROPOFF_WS
							inputData.normalWS = Normal;
						#endif
					inputData.normalWS = NormalizeNormalPerPixel(inputData.normalWS);
				#else
					inputData.normalWS = WorldNormal;
				#endif

				#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR)
					inputData.shadowCoord = ShadowCoords;
				#elif defined(MAIN_LIGHT_CALCULATE_SHADOWS)
					inputData.shadowCoord = TransformWorldToShadowCoord(inputData.positionWS);
				#else
					inputData.shadowCoord = float4(0, 0, 0, 0);
				#endif

				#ifdef ASE_FOG
					inputData.fogCoord = IN.fogFactorAndVertexLight.x;
				#endif
					inputData.vertexLighting = IN.fogFactorAndVertexLight.yzw;

				#if defined(ENABLE_TERRAIN_PERPIXEL_NORMAL)
					float3 SH = SampleSH(inputData.normalWS.xyz);
				#else
					float3 SH = IN.lightmapUVOrVertexSH.xyz;
				#endif

				#if defined(DYNAMICLIGHTMAP_ON)
					inputData.bakedGI = SAMPLE_GI(IN.lightmapUVOrVertexSH.xy, IN.dynamicLightmapUV.xy, SH, inputData.normalWS);
				#else
					inputData.bakedGI = SAMPLE_GI(IN.lightmapUVOrVertexSH.xy, SH, inputData.normalWS);
				#endif

				#ifdef ASE_BAKEDGI
					inputData.bakedGI = BakedGI;
				#endif

				inputData.normalizedScreenSpaceUV = NormalizedScreenSpaceUV;
				inputData.shadowMask = SAMPLE_SHADOWMASK(IN.lightmapUVOrVertexSH.xy);

				#if defined(DEBUG_DISPLAY)
					#if defined(DYNAMICLIGHTMAP_ON)
						inputData.dynamicLightmapUV = IN.dynamicLightmapUV.xy;
					#endif
					#if defined(LIGHTMAP_ON)
						inputData.staticLightmapUV = IN.lightmapUVOrVertexSH.xy;
					#else
						inputData.vertexSH = SH;
					#endif
				#endif

				SurfaceData surfaceData;
				surfaceData.albedo              = BaseColor;
				surfaceData.metallic            = saturate(Metallic);
				surfaceData.specular            = Specular;
				surfaceData.smoothness          = saturate(Smoothness),
				surfaceData.occlusion           = Occlusion,
				surfaceData.emission            = Emission,
				surfaceData.alpha               = saturate(Alpha);
				surfaceData.normalTS            = Normal;
				surfaceData.clearCoatMask       = 0;
				surfaceData.clearCoatSmoothness = 1;

				#ifdef _CLEARCOAT
					surfaceData.clearCoatMask       = saturate(CoatMask);
					surfaceData.clearCoatSmoothness = saturate(CoatSmoothness);
				#endif

				#ifdef _DBUFFER
					ApplyDecalToSurfaceData(IN.positionCS, surfaceData, inputData);
				#endif

				#ifdef _ASE_LIGHTING_SIMPLE
					half4 color = UniversalFragmentBlinnPhong( inputData, surfaceData);
				#else
					half4 color = UniversalFragmentPBR( inputData, surfaceData);
				#endif

				#ifdef ASE_TRANSMISSION
				{
					float shadow = _TransmissionShadow;

					#define SUM_LIGHT_TRANSMISSION(Light)\
						float3 atten = Light.color * Light.distanceAttenuation;\
						atten = lerp( atten, atten * Light.shadowAttenuation, shadow );\
						half3 transmission = max( 0, -dot( inputData.normalWS, Light.direction ) ) * atten * Transmission;\
						color.rgb += BaseColor * transmission;

					SUM_LIGHT_TRANSMISSION( GetMainLight( inputData.shadowCoord ) );

					#if defined(_ADDITIONAL_LIGHTS)
						uint meshRenderingLayers = GetMeshRenderingLayer();
						uint pixelLightCount = GetAdditionalLightsCount();
						#if USE_FORWARD_PLUS
							for (uint lightIndex = 0; lightIndex < min(URP_FP_DIRECTIONAL_LIGHTS_COUNT, MAX_VISIBLE_LIGHTS); lightIndex++)
							{
								FORWARD_PLUS_SUBTRACTIVE_LIGHT_CHECK

								Light light = GetAdditionalLight(lightIndex, inputData.positionWS);
								#ifdef _LIGHT_LAYERS
								if (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))
								#endif
								{
									SUM_LIGHT_TRANSMISSION( light );
								}
							}
						#endif
						LIGHT_LOOP_BEGIN( pixelLightCount )
							Light light = GetAdditionalLight(lightIndex, inputData.positionWS);
							#ifdef _LIGHT_LAYERS
							if (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))
							#endif
							{
								SUM_LIGHT_TRANSMISSION( light );
							}
						LIGHT_LOOP_END
					#endif
				}
				#endif

				#ifdef ASE_TRANSLUCENCY
				{
					float shadow = _TransShadow;
					float normal = _TransNormal;
					float scattering = _TransScattering;
					float direct = _TransDirect;
					float ambient = _TransAmbient;
					float strength = _TransStrength;

					#define SUM_LIGHT_TRANSLUCENCY(Light)\
						float3 atten = Light.color * Light.distanceAttenuation;\
						atten = lerp( atten, atten * Light.shadowAttenuation, shadow );\
						half3 lightDir = Light.direction + inputData.normalWS * normal;\
						half VdotL = pow( saturate( dot( inputData.viewDirectionWS, -lightDir ) ), scattering );\
						half3 translucency = atten * ( VdotL * direct + inputData.bakedGI * ambient ) * Translucency;\
						color.rgb += BaseColor * translucency * strength;

					SUM_LIGHT_TRANSLUCENCY( GetMainLight( inputData.shadowCoord ) );

					#if defined(_ADDITIONAL_LIGHTS)
						uint meshRenderingLayers = GetMeshRenderingLayer();
						uint pixelLightCount = GetAdditionalLightsCount();
						#if USE_FORWARD_PLUS
							for (uint lightIndex = 0; lightIndex < min(URP_FP_DIRECTIONAL_LIGHTS_COUNT, MAX_VISIBLE_LIGHTS); lightIndex++)
							{
								FORWARD_PLUS_SUBTRACTIVE_LIGHT_CHECK

								Light light = GetAdditionalLight(lightIndex, inputData.positionWS);
								#ifdef _LIGHT_LAYERS
								if (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))
								#endif
								{
									SUM_LIGHT_TRANSLUCENCY( light );
								}
							}
						#endif
						LIGHT_LOOP_BEGIN( pixelLightCount )
							Light light = GetAdditionalLight(lightIndex, inputData.positionWS);
							#ifdef _LIGHT_LAYERS
							if (IsMatchingLightLayer(light.layerMask, meshRenderingLayers))
							#endif
							{
								SUM_LIGHT_TRANSLUCENCY( light );
							}
						LIGHT_LOOP_END
					#endif
				}
				#endif

				#ifdef ASE_REFRACTION
					float4 projScreenPos = ScreenPos / ScreenPos.w;
					float3 refractionOffset = ( RefractionIndex - 1.0 ) * mul( UNITY_MATRIX_V, float4( WorldNormal,0 ) ).xyz * ( 1.0 - dot( WorldNormal, WorldViewDirection ) );
					projScreenPos.xy += refractionOffset.xy;
					float3 refraction = SHADERGRAPH_SAMPLE_SCENE_COLOR( projScreenPos.xy ) * RefractionColor;
					color.rgb = lerp( refraction, color.rgb, color.a );
					color.a = 1;
				#endif

				#ifdef ASE_FINAL_COLOR_ALPHA_MULTIPLY
					color.rgb *= color.a;
				#endif

				#ifdef ASE_FOG
					#ifdef TERRAIN_SPLAT_ADDPASS
						color.rgb = MixFogColor(color.rgb, half3( 0, 0, 0 ), IN.fogFactorAndVertexLight.x );
					#else
						color.rgb = MixFog(color.rgb, IN.fogFactorAndVertexLight.x);
					#endif
				#endif

				#ifdef ASE_DEPTH_WRITE_ON
					outputDepth = DepthValue;
				#endif

				#ifdef _WRITE_RENDERING_LAYERS
					uint renderingLayers = GetMeshRenderingLayer();
					outRenderingLayers = float4( EncodeMeshRenderingLayer( renderingLayers ), 0, 0, 0 );
				#endif

				return color;
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "ShadowCaster"
			Tags { "LightMode"="ShadowCaster" }

			ZWrite On
			ZTest LEqual
			AlphaToMask Off
			ColorMask 0

			HLSLPROGRAM

			

			#define _SPECULAR_SETUP 1
			#pragma multi_compile_instancing
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_FOG 1
			#define _ASE_LIGHTING_SIMPLE
			#define _SURFACE_TYPE_TRANSPARENT 1
			#define _NORMAL_DROPOFF_TS 1
			#define _EMISSION
			#define _NORMALMAP 1
			#define ASE_SRP_VERSION 140010
			#define REQUIRE_DEPTH_TEXTURE 1


			

			#pragma multi_compile_vertex _ _CASTING_PUNCTUAL_LIGHT_SHADOW

			#pragma vertex vert
			#pragma fragment frag

			#if defined(_SPECULAR_SETUP) && defined(_ASE_LIGHTING_SIMPLE)
				#define _SPECULAR_COLOR 1
			#endif

			#define SHADERPASS SHADERPASS_SHADOWCASTER

			
            #if ASE_SRP_VERSION >=140007
			#include_with_pragmas "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DOTS.hlsl"
			#endif
		

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Input.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"

			
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRendering.hlsl"
           

			
            #if ASE_SRP_VERSION >=140009
			#include_with_pragmas "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRenderingKeywords.hlsl"
			#endif
		

			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/Editor/ShaderGraph/Includes/ShaderPass.hlsl"

			#if defined(LOD_FADE_CROSSFADE)
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/LODCrossFade.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_FRAG_SCREEN_POSITION
			#pragma shader_feature_local _CAUSTICB_OCT_CAUSTIC1 _CAUSTICB_OCT_CAUSTIC2 _CAUSTICB_OCT_CAUSTIC3 _CAUSTICB_OCT_CAUSTIC4 _CAUSTICB_OCT_CAUSTIC5 _CAUSTICB_OCT_CAUSTIC6 _CAUSTICB_OCT_CAUSTIC7 _CAUSTICB_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEBTYPE_NONE _NOISEBTYPE_VORONOICELL _NOISEBTYPE_VORONOICAUSTIC _NOISEBTYPE_PERLIN _NOISEBTYPE_TEXTURE
			#pragma shader_feature_local _CELLB_OCT_CELL1 _CELLB_OCT_CELL2 _CELLB_OCT_CELL3 _CELLB_OCT_CELL4 _CELLB_OCT_CELL5 _CELLB_OCT_CELL6 _CELLB_OCT_CELL7 _CELLB_OCT_CELL8
			#pragma shader_feature_local _CELLA_OCT_CELL1 _CELLA_OCT_CELL2 _CELLA_OCT_CELL3 _CELLA_OCT_CELL4 _CELLA_OCT_CELL5 _CELLA_OCT_CELL6 _CELLA_OCT_CELL7 _CELLA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICA_OCT_CAUSTIC1 _CAUSTICA_OCT_CAUSTIC2 _CAUSTICA_OCT_CAUSTIC3 _CAUSTICA_OCT_CAUSTIC4 _CAUSTICA_OCT_CAUSTIC5 _CAUSTICA_OCT_CAUSTIC6 _CAUSTICA_OCT_CAUSTIC7 _CAUSTICA_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEATYPE_NONE _NOISEATYPE_VORONOICELL _NOISEATYPE_VORONOICAUSTIC _NOISEATYPE_PERLIN _NOISEATYPE_TEXTURE
			#pragma shader_feature_local _WAVEBTYPE_NONE _WAVEBTYPE_VORONOICELL _WAVEBTYPE_VORONOICAUSTIC _WAVEBTYPE_PERLIN _WAVEBTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICWAVEB_OCT_CAUSTIC1 _CAUSTICWAVEB_OCT_CAUSTIC2 _CAUSTICWAVEB_OCT_CAUSTIC3 _CAUSTICWAVEB_OCT_CAUSTIC4 _CAUSTICWAVEB_OCT_CAUSTIC5 _CAUSTICWAVEB_OCT_CAUSTIC6 _CAUSTICWAVEB_OCT_CAUSTIC7 _CAUSTICWAVEB_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLWAVEB_OCT_CELL1 _CELLWAVEB_OCT_CELL2 _CELLWAVEB_OCT_CELL3 _CELLWAVEB_OCT_CELL4 _CELLWAVEB_OCT_CELL5 _CELLWAVEB_OCT_CELL6 _CELLWAVEB_OCT_CELL7 _CELLWAVEB_OCT_CELL8
			#pragma shader_feature_local _WAVEAGRADETYPE_LINEAR _WAVEAGRADETYPE_NORMAL _WAVEAGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBGRADETYPE_LINEAR _WAVEBGRADETYPE_NORMAL _WAVEBGRADETYPE_GAMMA
			#pragma shader_feature_local _DEPTHGRADETYPE_LINEAR _DEPTHGRADETYPE_NORMAL _DEPTHGRADETYPE_GAMMA
			#pragma shader_feature_local _FLOWMAPTYPE_DEPTH _FLOWMAPTYPE_FLOWTEXTURE
			#pragma shader_feature_local _MASK_ON
			#pragma shader_feature_local _MASKGRADETYPE_LINEAR _MASKGRADETYPE_NORMAL _MASKGRADETYPE_GAMMA
			#pragma shader_feature_local _TXTGRADETYPE_LINEAR _TXTGRADETYPE_NORMAL _TXTGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBINVERT_ON
			#pragma shader_feature_local _WAVEAINVERT_ON
			#pragma shader_feature_local _SELECTWAVETYPE_LAYERA _SELECTWAVETYPE_LAYERB _SELECTWAVETYPE_MULTIPLY _SELECTWAVETYPE_ADD _SELECTWAVETYPE_SUBTRACT _SELECTWAVETYPE_DIVIDE _SELECTWAVETYPE_DOT _SELECTWAVETYPE_FMOD _SELECTWAVETYPE_FMODINVERT
			#pragma shader_feature_local _DFAGRADETYPE_LINEAR _DFAGRADETYPE_NORMAL _DFAGRADETYPE_GAMMA
			#pragma shader_feature_local _DFBGRADETYPE_LINEAR _DFBGRADETYPE_NORMAL _DFBGRADETYPE_GAMMA
			#pragma shader_feature_local _DFNOISEAINVERT_ON
			#pragma shader_feature_local _DFNOISEBINVERT_ON
			#pragma shader_feature_local _SELECTDEFORMTYPE_LAYERA _SELECTDEFORMTYPE_LAYERB _SELECTDEFORMTYPE_MULTIPLY _SELECTDEFORMTYPE_ADD _SELECTDEFORMTYPE_SUBTRACT _SELECTDEFORMTYPE_DIVIDE _SELECTDEFORMTYPE_DOT _SELECTDEFORMTYPE_FMOD _SELECTDEFORMTYPE_FMODINVERT
			#pragma shader_feature_local _FOAMTYPE_NONE _FOAMTYPE_VORONOICELL _FOAMTYPE_VORONOICAUSTIC _FOAMTYPE_PERLIN _FOAMTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICFOAM_OCT_CAUSTIC1 _CAUSTICFOAM_OCT_CAUSTIC2 _CAUSTICFOAM_OCT_CAUSTIC3 _CAUSTICFOAM_OCT_CAUSTIC4 _CAUSTICFOAM_OCT_CAUSTIC5 _CAUSTICFOAM_OCT_CAUSTIC6 _CAUSTICFOAM_OCT_CAUSTIC7 _CAUSTICFOAM_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLFOAM_OCT_CELL1 _CELLFOAM_OCT_CELL2 _CELLFOAM_OCT_CELL3 _CELLFOAM_OCT_CELL4 _CELLFOAM_OCT_CELL5 _CELLFOAM_OCT_CELL6 _CELLFOAM_OCT_CELL7 _CELLFOAM_OCT_CELL8
			#pragma shader_feature_local _CELLWAVEA_OCT_CELL1 _CELLWAVEA_OCT_CELL2 _CELLWAVEA_OCT_CELL3 _CELLWAVEA_OCT_CELL4 _CELLWAVEA_OCT_CELL5 _CELLWAVEA_OCT_CELL6 _CELLWAVEA_OCT_CELL7 _CELLWAVEA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICWAVEA_OCT_CAUSTIC1 _CAUSTICWAVEA_OCT_CAUSTIC2 _CAUSTICWAVEA_OCT_CAUSTIC3 _CAUSTICWAVEA_OCT_CAUSTIC4 _CAUSTICWAVEA_OCT_CAUSTIC5 _CAUSTICWAVEA_OCT_CAUSTIC6 _CAUSTICWAVEA_OCT_CAUSTIC7 _CAUSTICWAVEA_OCT_CAUSTIC8
			#pragma shader_feature_local _WAVEATYPE_NONE _WAVEATYPE_VORONOICELL _WAVEATYPE_VORONOICAUSTIC _WAVEATYPE_PERLIN _WAVEATYPE_TEXTURE
			#pragma shader_feature_local _FOAMINVERT_ON
			#pragma shader_feature_local _FOAMGRADETYPE_LINEAR _FOAMGRADETYPE_NORMAL _FOAMGRADETYPE_GAMMA


			#if defined(ASE_EARLY_Z_DEPTH_OPTIMIZE) && (SHADER_TARGET >= 45)
				#define ASE_SV_DEPTH SV_DepthLessEqual
				#define ASE_SV_POSITION_QUALIFIERS linear noperspective centroid
			#else
				#define ASE_SV_DEPTH SV_Depth
				#define ASE_SV_POSITION_QUALIFIERS
			#endif

			struct VertexInput
			{
				float4 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct VertexOutput
			{
				ASE_SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				float4 clipPosV : TEXCOORD0;
				#if defined(ASE_NEEDS_FRAG_WORLD_POSITION)
					float3 positionWS : TEXCOORD1;
				#endif
				#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR) && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					float4 shadowCoord : TEXCOORD2;
				#endif				
				float4 ase_texcoord3 : TEXCOORD3;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			CBUFFER_START(UnityPerMaterial)
			float4 _ReflectColor;
			float4 _MaskMap_ST;
			float4 _FogColor;
			float4 _MirrorRefColor;
			float3 _RefractColor;
			float3 _SpecularColor;
			float _FlowTextureAmplitude;
			float _FlowTextureExponential;
			float _FlowTextureContrast;
			float _MaskGradeAmplitude;
			float _MaskGradePower;
			float _ShoreIntensity;
			float _FoamIntensity;
			float _BVoronoiAngleSpeed;
			float _MapChangeSpeed;
			float _FoamVoronoiAngleSpeed;
			float _FoamVoronoiSmooth;
			float _FoamDeformToggle;
			float _DefWeightFoam;
			float _FoamTileX;
			float _FoamTileY;
			float _FoamOffsetX;
			float _FoamSpeedX;
			float _FoamNoiseScale;
			float _RotateB;
			float _BTileX;
			float _BTileY;
			float _ShoreBumpIntensity;
			float _NormalGradePower;
			float _NormalIntensity;
			float _foamFold;
			float _otherFold;
			float _Displacement;
			float _ShoreFoamToggle;
			float _DepthNegative;
			float _OffsetB;
			float _DepthDistance;
			float _DepthSize;
			float _MapExponential;
			float _InfluenceFlow;
			float _ATileX;
			float _ATileY;
			float _FlowSpeed;
			float _RotateA;
			float _FoamOverallSpeed;
			float _DepthExponential;
			float _FoamSpeedY;
			float _FoamAnchorY;
			float _FoamAnchorX;
			float _ScreenContrast;
			float _FogToggle;
			float _Reflect;
			float _CMReflect;
			float _ReflectionStrength;
			float _CubeMapRotate;
			float _CMXPos;
			float _CMYPos;
			float _CMZPos;
			float _ReflectionMultiplier;
			float _MirrorReflect;
			float _MirrorRefIntensity;
			float _FogDepthDistance;
			float _FogDepthExponential;
			float _FogDepthSize;
			float _Specular;
			float _Smoothness;
			float _RefractionToggle;
			float _NormalToggle;
			float _SSBluricTransparent;
			float _SurfaceIntensity;
			float _MiddleWaveBumpIntensity;
			float _FoamRotateSpeed;
			float _FoamRotate;
			float _FoamAmplitude;
			float _FoamExp;
			float _FoamContrast;
			float _MiddleFoamToggle;
			float _MiddleWaveIntensity;
			float _FoamOffsetY;
			float _MidFlowMask;
			float _DefWeightA;
			float _MidBDeformToggle;
			float _DefWeightB;
			float _EdgeWaveExponential;
			float _EdgeWaveMultiplier;
			float _WaveLength;
			float _VT_Intensity;
			float _SurfaceToggle;
			float _MidADeformToggle;
			float _TRSurfWaveToggle;
			float _PatternMultiplier;
			float _SSTileY;
			float _ANoiseScale;
			float _AVoronoiSmooth;
			float _AVoronoiAngleSpeed;
			float _NTypeARotate;
			float _WAVoronoiAngleSpeed;
			float _WAVoronoiSmooth;
			float _WANoiseScale;
			float _WTypeATileX;
			float _NTypeATileX;
			float _WTypeATileY;
			float _WTypeAOffsetY;
			float _WTypeASpeedX;
			float _WTypeASpeedY;
			float _WTypeAOverallSpeed;
			float _WTypeARotate;
			float _WTypeARotateSpeed;
			float _WTypeAAnchorX;
			float _WTypeAAnchorY;
			float _WTypeAOffsetX;
			float _NTypeATileY;
			float _NTypeAOffsetX;
			float _NTypeAOffsetY;
			float _BNoiseScale;
			float _NTypeBTileX;
			float _NTypeBTileY;
			float _NTypeBOffsetX;
			float _NTypeBOffsetY;
			float _NTypeBSpeedX;
			float _NTypeBSpeedY;
			float _NTypeBOverallSpeed;
			float _NTypeBAnchorX;
			float _NTypeBAnchorY;
			float _BVoronoiSmooth;
			float _NTypeBRotateSpeed;
			float _NTypeBRotate;
			float _NTypeAAnchorY;
			float _NTypeAAnchorX;
			float _NTypeARotateSpeed;
			float _NTypeAOverallSpeed;
			float _NTypeASpeedY;
			float _NTypeASpeedX;
			float _WBVoronoiAngleSpeed;
			float _WBVoronoiSmooth;
			float _WBNoiseScale;
			float _WTypeBTileX;
			float _dfNoiseBFold;
			float _dfNoiseAFold;
			float _DeformFold;
			float _CheckFlowMap;
			float _fMapFold;
			float _wAFold;
			float _CheckMidWave;
			float _DFBAmplitude;
			float _DFAAmplitude;
			float _DFBExp;
			float _DFAExp;
			float _NoiseAContrast;
			float _NoiseBContrast;
			float _NA_Intensity;
			float _NB_Intensity;
			float _wBFold;
			float _SSTxtInfo;
			float _SSSize;
			float _SSTileX;
			float _dMaskFold;
			float _PatternHeight;
			float _fMaskFold;
			float _CheckDef;
			float _WTypeBTileY;
			float _WTypeBOffsetX;
			float _WTypeBOffsetY;
			float _WTypeBSpeedX;
			float _WTypeBSpeedY;
			float _WTypeBOverallSpeed;
			float _WTypeBRotate;
			float _WTypeBRotateSpeed;
			float _WTypeBAnchorX;
			float _WTypeBAnchorY;
			float _WaveAAmplitude;
			float _WaveBAmplitude;
			float _WaveAExp;
			float _WaveBExp;
			float _MGradeAmplitude;
			float _WaveBContrast;
			float _WaveAContrast;
			float _WaveAIntensity;
			float _WaveBIntensity;
			float _fTxtFold;
			float _Transparency;
			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			CBUFFER_END

			#ifdef SCENEPICKINGPASS
				float4 _SelectionID;
			#endif

			#ifdef SCENESELECTIONPASS
				int _ObjectId;
				int _PassValue;
			#endif

			sampler2D _DeformNoiseTypeB;
			sampler2D _DeformNoiseTypeA;
			sampler2D _WaveTypeB;
			sampler2D _WaveTypeA;
			sampler2D _TextureMap;
			sampler2D _FlowMap;
			sampler2D _MaskMap;
			sampler2D _FoamTexture;


			float SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD(float2 uv)
			{
				#if defined(REQUIRE_DEPTH_TEXTURE)
				#if defined(UNITY_STEREO_INSTANCING_ENABLED) || defined(UNITY_STEREO_MULTIVIEW_ENABLED)
				 	float rawDepth = SAMPLE_TEXTURE2D_ARRAY_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, unity_StereoEyeIndex, 0).r;
				#else
				 	float rawDepth = SAMPLE_DEPTH_TEXTURE_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, 0);
				#endif
				return rawDepth;
				#endif // REQUIRE_DEPTH_TEXTURE
				return 0;
			}
			
			float2 voronoihash2_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float3 mod2D289( float3 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float2 mod2D289( float2 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float3 permute( float3 x ) { return mod2D289( ( ( x * 34.0 ) + 1.0 ) * x ); }
			float snoise( float2 v )
			{
				const float4 C = float4( 0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439 );
				float2 i = floor( v + dot( v, C.yy ) );
				float2 x0 = v - i + dot( i, C.xx );
				float2 i1;
				i1 = ( x0.x > x0.y ) ? float2( 1.0, 0.0 ) : float2( 0.0, 1.0 );
				float4 x12 = x0.xyxy + C.xxzz;
				x12.xy -= i1;
				i = mod2D289( i );
				float3 p = permute( permute( i.y + float3( 0.0, i1.y, 1.0 ) ) + i.x + float3( 0.0, i1.x, 1.0 ) );
				float3 m = max( 0.5 - float3( dot( x0, x0 ), dot( x12.xy, x12.xy ), dot( x12.zw, x12.zw ) ), 0.0 );
				m = m * m;
				m = m * m;
				float3 x = 2.0 * frac( p * C.www ) - 1.0;
				float3 h = abs( x ) - 0.5;
				float3 ox = floor( x + 0.5 );
				float3 a0 = x - ox;
				m *= 1.79284291400159 - 0.85373472095314 * ( a0 * a0 + h * h );
				float3 g;
				g.x = a0.x * x0.x + h.x * x0.y;
				g.yz = a0.yz * x12.xz + h.yz * x12.yw;
				return 130.0 * dot( m, g );
			}
			
			float2 voronoihash8_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			

			float3 _LightDirection;
			float3 _LightPosition;

			VertexOutput VertexFunction( VertexInput v )
			{
				VertexOutput o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( o );

				float RF_Zero315 = 0.0;
				float3 temp_cast_0 = (RF_Zero315).xxx;
				float4 ase_clipPos = TransformObjectToHClip((v.positionOS).xyz);
				float4 screenPos = ComputeScreenPos(ase_clipPos);
				float4 ase_screenPosNorm = screenPos / screenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_3 );
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_6 );
				float3 temp_cast_7 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_7;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_7;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = v.ase_texcoord.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_8 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_8 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = v.ase_texcoord.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = v.ase_texcoord.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ), 0, 0.0) ).rgb , tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ), 0, 0.0) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_9 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_9 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_12 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = v.ase_texcoord.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_13 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_13 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_12;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_16 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_18 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = v.ase_texcoord.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_19 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_20 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_21 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_22 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_22;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2Dlod( _DeformNoiseTypeA, float4( UV20_g516, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_22;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = v.ase_texcoord.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_24 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_25 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_26 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_27 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_27;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_24;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_25;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_26;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2Dlod( _FoamTexture, float4( UV20_g786, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_27;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_28 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_28 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_32 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = v.ase_texcoord.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_35 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_36 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_37 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_38 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_38;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_35;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_36;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_37;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2Dlod( _WaveTypeA, float4( UV20_g790, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_38;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_39 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_39 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_43 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_45 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = v.ase_texcoord.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_46 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_47 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_48 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_49 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_49;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_46;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_47;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_48;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2Dlod( _DeformNoiseTypeB, float4( UV20_g512, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_49;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = v.ase_texcoord.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_51 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_52 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_53 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_54 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_54;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_51;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_52;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_53;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2Dlod( _WaveTypeB, float4( UV20_g540, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_54;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_55 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_55 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_58 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_58;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 linearToGamma1730 = FastLinearToSRGB( RF_SurfaceWave1466 );
				float3 linearToGamma1731 = FastLinearToSRGB( RF_FlowMask535 );
				float3 saferPower1714 = abs( ( 1.0 - linearToGamma1731 ) );
				float3 temp_cast_64 = (_EdgeWaveExponential).xxx;
				float3 RF_Vertex_Offset1726 = (( _Displacement )?( ( ( ( linearToGamma1730 * saturate( (pow( saferPower1714 , temp_cast_64 )*_EdgeWaveMultiplier + 0.0) ) ) * _WaveLength ) * v.normalOS ) ):( temp_cast_0 ));
				
				o.ase_texcoord3.xy = v.ase_texcoord.xy;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord3.zw = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.positionOS.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif

				float3 vertexValue = RF_Vertex_Offset1726;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.positionOS.xyz = vertexValue;
				#else
					v.positionOS.xyz += vertexValue;
				#endif

				v.normalOS = v.normalOS;

				float3 positionWS = TransformObjectToWorld( v.positionOS.xyz );

				#if defined(ASE_NEEDS_FRAG_WORLD_POSITION)
					o.positionWS = positionWS;
				#endif

				float3 normalWS = TransformObjectToWorldDir(v.normalOS);

				#if _CASTING_PUNCTUAL_LIGHT_SHADOW
					float3 lightDirectionWS = normalize(_LightPosition - positionWS);
				#else
					float3 lightDirectionWS = _LightDirection;
				#endif

				float4 positionCS = TransformWorldToHClip(ApplyShadowBias(positionWS, normalWS, lightDirectionWS));

				#if UNITY_REVERSED_Z
					positionCS.z = min(positionCS.z, UNITY_NEAR_CLIP_VALUE);
				#else
					positionCS.z = max(positionCS.z, UNITY_NEAR_CLIP_VALUE);
				#endif

				#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR) && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					VertexPositionInputs vertexInput = (VertexPositionInputs)0;
					vertexInput.positionWS = positionWS;
					vertexInput.positionCS = positionCS;
					o.shadowCoord = GetShadowCoord( vertexInput );
				#endif

				o.positionCS = positionCS;
				o.clipPosV = positionCS;
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( VertexInput v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.positionOS;
				o.normalOS = v.normalOS;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
				return patch[id];
			}

			[domain("tri")]
			VertexOutput DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				VertexInput o = (VertexInput) 0;
				o.positionOS = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].vertex.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			VertexOutput vert ( VertexInput v )
			{
				return VertexFunction( v );
			}
			#endif

			half4 frag(	VertexOutput IN
						#ifdef ASE_DEPTH_WRITE_ON
						,out float outputDepth : ASE_SV_DEPTH
						#endif
						 ) : SV_TARGET
			{
				UNITY_SETUP_INSTANCE_ID( IN );
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( IN );

				#if defined(ASE_NEEDS_FRAG_WORLD_POSITION)
					float3 WorldPosition = IN.positionWS;
				#endif

				float4 ShadowCoords = float4( 0, 0, 0, 0 );
				float4 ClipPos = IN.clipPosV;
				float4 ScreenPos = ComputeScreenPos( IN.clipPosV );

				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR)
						ShadowCoords = IN.shadowCoord;
					#elif defined(MAIN_LIGHT_CALCULATE_SHADOWS)
						ShadowCoords = TransformWorldToShadowCoord( WorldPosition );
					#endif
				#endif

				float3 temp_cast_0 = (_Transparency).xxx;
				float4 ase_screenPosNorm = ScreenPos / ScreenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_3 );
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_6 );
				float3 temp_cast_7 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_7;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_7;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = IN.ase_texcoord3.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_8 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_8 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = IN.ase_texcoord3.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = IN.ase_texcoord3.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ) ).rgb , tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_9 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_9 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_12 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = IN.ase_texcoord3.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_13 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_13 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_12;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_16 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_18 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = IN.ase_texcoord3.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_19 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_20 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_21 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_22 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_22;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2D( _DeformNoiseTypeA, UV20_g516 ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_22;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = IN.ase_texcoord3.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_24 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_25 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_26 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_27 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_27;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_24;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_25;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_26;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2D( _FoamTexture, UV20_g786 ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_27;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_28 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_28 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_32 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = IN.ase_texcoord3.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_35 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_36 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_37 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_38 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_38;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_35;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_36;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_37;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2D( _WaveTypeA, UV20_g790 ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_38;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_39 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_39 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_43 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_45 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = IN.ase_texcoord3.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_46 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_47 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_48 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_49 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_49;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_46;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_47;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_48;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2D( _DeformNoiseTypeB, UV20_g512 ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_49;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = IN.ase_texcoord3.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_51 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_52 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_53 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_54 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_54;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_51;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_52;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_53;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2D( _WaveTypeB, UV20_g540 ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_54;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_55 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_55 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_58 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_58;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 RF_TransparentIntensity1436 = (( _TRSurfWaveToggle )?( ( _Transparency * RF_SurfaceWave1466 ) ):( temp_cast_0 ));
				

				float Alpha = RF_TransparentIntensity1436.x;
				float AlphaClipThreshold = 0.5;
				float AlphaClipThresholdShadow = 0.5;

				#ifdef ASE_DEPTH_WRITE_ON
					float DepthValue = IN.positionCS.z;
				#endif

				#ifdef _ALPHATEST_ON
					#ifdef _ALPHATEST_SHADOW_ON
						clip(Alpha - AlphaClipThresholdShadow);
					#else
						clip(Alpha - AlphaClipThreshold);
					#endif
				#endif

				#if defined(LOD_FADE_CROSSFADE)
					LODFadeCrossFade( IN.positionCS );
				#endif

				#ifdef ASE_DEPTH_WRITE_ON
					outputDepth = DepthValue;
				#endif

				return 0;
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "DepthOnly"
			Tags { "LightMode"="DepthOnly" }

			ZWrite On
			ColorMask R
			AlphaToMask Off

			HLSLPROGRAM

			

			#define _SPECULAR_SETUP 1
			#pragma multi_compile_instancing
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_FOG 1
			#define _ASE_LIGHTING_SIMPLE
			#define _SURFACE_TYPE_TRANSPARENT 1
			#define _NORMAL_DROPOFF_TS 1
			#define _EMISSION
			#define _NORMALMAP 1
			#define ASE_SRP_VERSION 140010
			#define REQUIRE_DEPTH_TEXTURE 1


			

			#pragma vertex vert
			#pragma fragment frag

			#if defined(_SPECULAR_SETUP) && defined(_ASE_LIGHTING_SIMPLE)
				#define _SPECULAR_COLOR 1
			#endif

			#define SHADERPASS SHADERPASS_DEPTHONLY

			
            #if ASE_SRP_VERSION >=140007
			#include_with_pragmas "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DOTS.hlsl"
			#endif
		

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Input.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"

			
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRendering.hlsl"
           

			
            #if ASE_SRP_VERSION >=140009
			#include_with_pragmas "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRenderingKeywords.hlsl"
			#endif
		

			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/Editor/ShaderGraph/Includes/ShaderPass.hlsl"

			#if defined(LOD_FADE_CROSSFADE)
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/LODCrossFade.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_FRAG_SCREEN_POSITION
			#pragma shader_feature_local _CAUSTICB_OCT_CAUSTIC1 _CAUSTICB_OCT_CAUSTIC2 _CAUSTICB_OCT_CAUSTIC3 _CAUSTICB_OCT_CAUSTIC4 _CAUSTICB_OCT_CAUSTIC5 _CAUSTICB_OCT_CAUSTIC6 _CAUSTICB_OCT_CAUSTIC7 _CAUSTICB_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEBTYPE_NONE _NOISEBTYPE_VORONOICELL _NOISEBTYPE_VORONOICAUSTIC _NOISEBTYPE_PERLIN _NOISEBTYPE_TEXTURE
			#pragma shader_feature_local _CELLB_OCT_CELL1 _CELLB_OCT_CELL2 _CELLB_OCT_CELL3 _CELLB_OCT_CELL4 _CELLB_OCT_CELL5 _CELLB_OCT_CELL6 _CELLB_OCT_CELL7 _CELLB_OCT_CELL8
			#pragma shader_feature_local _CELLA_OCT_CELL1 _CELLA_OCT_CELL2 _CELLA_OCT_CELL3 _CELLA_OCT_CELL4 _CELLA_OCT_CELL5 _CELLA_OCT_CELL6 _CELLA_OCT_CELL7 _CELLA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICA_OCT_CAUSTIC1 _CAUSTICA_OCT_CAUSTIC2 _CAUSTICA_OCT_CAUSTIC3 _CAUSTICA_OCT_CAUSTIC4 _CAUSTICA_OCT_CAUSTIC5 _CAUSTICA_OCT_CAUSTIC6 _CAUSTICA_OCT_CAUSTIC7 _CAUSTICA_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEATYPE_NONE _NOISEATYPE_VORONOICELL _NOISEATYPE_VORONOICAUSTIC _NOISEATYPE_PERLIN _NOISEATYPE_TEXTURE
			#pragma shader_feature_local _WAVEBTYPE_NONE _WAVEBTYPE_VORONOICELL _WAVEBTYPE_VORONOICAUSTIC _WAVEBTYPE_PERLIN _WAVEBTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICWAVEB_OCT_CAUSTIC1 _CAUSTICWAVEB_OCT_CAUSTIC2 _CAUSTICWAVEB_OCT_CAUSTIC3 _CAUSTICWAVEB_OCT_CAUSTIC4 _CAUSTICWAVEB_OCT_CAUSTIC5 _CAUSTICWAVEB_OCT_CAUSTIC6 _CAUSTICWAVEB_OCT_CAUSTIC7 _CAUSTICWAVEB_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLWAVEB_OCT_CELL1 _CELLWAVEB_OCT_CELL2 _CELLWAVEB_OCT_CELL3 _CELLWAVEB_OCT_CELL4 _CELLWAVEB_OCT_CELL5 _CELLWAVEB_OCT_CELL6 _CELLWAVEB_OCT_CELL7 _CELLWAVEB_OCT_CELL8
			#pragma shader_feature_local _WAVEAGRADETYPE_LINEAR _WAVEAGRADETYPE_NORMAL _WAVEAGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBGRADETYPE_LINEAR _WAVEBGRADETYPE_NORMAL _WAVEBGRADETYPE_GAMMA
			#pragma shader_feature_local _DEPTHGRADETYPE_LINEAR _DEPTHGRADETYPE_NORMAL _DEPTHGRADETYPE_GAMMA
			#pragma shader_feature_local _FLOWMAPTYPE_DEPTH _FLOWMAPTYPE_FLOWTEXTURE
			#pragma shader_feature_local _MASK_ON
			#pragma shader_feature_local _MASKGRADETYPE_LINEAR _MASKGRADETYPE_NORMAL _MASKGRADETYPE_GAMMA
			#pragma shader_feature_local _TXTGRADETYPE_LINEAR _TXTGRADETYPE_NORMAL _TXTGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBINVERT_ON
			#pragma shader_feature_local _WAVEAINVERT_ON
			#pragma shader_feature_local _SELECTWAVETYPE_LAYERA _SELECTWAVETYPE_LAYERB _SELECTWAVETYPE_MULTIPLY _SELECTWAVETYPE_ADD _SELECTWAVETYPE_SUBTRACT _SELECTWAVETYPE_DIVIDE _SELECTWAVETYPE_DOT _SELECTWAVETYPE_FMOD _SELECTWAVETYPE_FMODINVERT
			#pragma shader_feature_local _DFAGRADETYPE_LINEAR _DFAGRADETYPE_NORMAL _DFAGRADETYPE_GAMMA
			#pragma shader_feature_local _DFBGRADETYPE_LINEAR _DFBGRADETYPE_NORMAL _DFBGRADETYPE_GAMMA
			#pragma shader_feature_local _DFNOISEAINVERT_ON
			#pragma shader_feature_local _DFNOISEBINVERT_ON
			#pragma shader_feature_local _SELECTDEFORMTYPE_LAYERA _SELECTDEFORMTYPE_LAYERB _SELECTDEFORMTYPE_MULTIPLY _SELECTDEFORMTYPE_ADD _SELECTDEFORMTYPE_SUBTRACT _SELECTDEFORMTYPE_DIVIDE _SELECTDEFORMTYPE_DOT _SELECTDEFORMTYPE_FMOD _SELECTDEFORMTYPE_FMODINVERT
			#pragma shader_feature_local _FOAMTYPE_NONE _FOAMTYPE_VORONOICELL _FOAMTYPE_VORONOICAUSTIC _FOAMTYPE_PERLIN _FOAMTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICFOAM_OCT_CAUSTIC1 _CAUSTICFOAM_OCT_CAUSTIC2 _CAUSTICFOAM_OCT_CAUSTIC3 _CAUSTICFOAM_OCT_CAUSTIC4 _CAUSTICFOAM_OCT_CAUSTIC5 _CAUSTICFOAM_OCT_CAUSTIC6 _CAUSTICFOAM_OCT_CAUSTIC7 _CAUSTICFOAM_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLFOAM_OCT_CELL1 _CELLFOAM_OCT_CELL2 _CELLFOAM_OCT_CELL3 _CELLFOAM_OCT_CELL4 _CELLFOAM_OCT_CELL5 _CELLFOAM_OCT_CELL6 _CELLFOAM_OCT_CELL7 _CELLFOAM_OCT_CELL8
			#pragma shader_feature_local _CELLWAVEA_OCT_CELL1 _CELLWAVEA_OCT_CELL2 _CELLWAVEA_OCT_CELL3 _CELLWAVEA_OCT_CELL4 _CELLWAVEA_OCT_CELL5 _CELLWAVEA_OCT_CELL6 _CELLWAVEA_OCT_CELL7 _CELLWAVEA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICWAVEA_OCT_CAUSTIC1 _CAUSTICWAVEA_OCT_CAUSTIC2 _CAUSTICWAVEA_OCT_CAUSTIC3 _CAUSTICWAVEA_OCT_CAUSTIC4 _CAUSTICWAVEA_OCT_CAUSTIC5 _CAUSTICWAVEA_OCT_CAUSTIC6 _CAUSTICWAVEA_OCT_CAUSTIC7 _CAUSTICWAVEA_OCT_CAUSTIC8
			#pragma shader_feature_local _WAVEATYPE_NONE _WAVEATYPE_VORONOICELL _WAVEATYPE_VORONOICAUSTIC _WAVEATYPE_PERLIN _WAVEATYPE_TEXTURE
			#pragma shader_feature_local _FOAMINVERT_ON
			#pragma shader_feature_local _FOAMGRADETYPE_LINEAR _FOAMGRADETYPE_NORMAL _FOAMGRADETYPE_GAMMA


			#if defined(ASE_EARLY_Z_DEPTH_OPTIMIZE) && (SHADER_TARGET >= 45)
				#define ASE_SV_DEPTH SV_DepthLessEqual
				#define ASE_SV_POSITION_QUALIFIERS linear noperspective centroid
			#else
				#define ASE_SV_DEPTH SV_Depth
				#define ASE_SV_POSITION_QUALIFIERS
			#endif

			struct VertexInput
			{
				float4 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct VertexOutput
			{
				ASE_SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				float4 clipPosV : TEXCOORD0;
				#if defined(ASE_NEEDS_FRAG_WORLD_POSITION)
				float3 positionWS : TEXCOORD1;
				#endif
				#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR) && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
				float4 shadowCoord : TEXCOORD2;
				#endif
				float4 ase_texcoord3 : TEXCOORD3;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			CBUFFER_START(UnityPerMaterial)
			float4 _ReflectColor;
			float4 _MaskMap_ST;
			float4 _FogColor;
			float4 _MirrorRefColor;
			float3 _RefractColor;
			float3 _SpecularColor;
			float _FlowTextureAmplitude;
			float _FlowTextureExponential;
			float _FlowTextureContrast;
			float _MaskGradeAmplitude;
			float _MaskGradePower;
			float _ShoreIntensity;
			float _FoamIntensity;
			float _BVoronoiAngleSpeed;
			float _MapChangeSpeed;
			float _FoamVoronoiAngleSpeed;
			float _FoamVoronoiSmooth;
			float _FoamDeformToggle;
			float _DefWeightFoam;
			float _FoamTileX;
			float _FoamTileY;
			float _FoamOffsetX;
			float _FoamSpeedX;
			float _FoamNoiseScale;
			float _RotateB;
			float _BTileX;
			float _BTileY;
			float _ShoreBumpIntensity;
			float _NormalGradePower;
			float _NormalIntensity;
			float _foamFold;
			float _otherFold;
			float _Displacement;
			float _ShoreFoamToggle;
			float _DepthNegative;
			float _OffsetB;
			float _DepthDistance;
			float _DepthSize;
			float _MapExponential;
			float _InfluenceFlow;
			float _ATileX;
			float _ATileY;
			float _FlowSpeed;
			float _RotateA;
			float _FoamOverallSpeed;
			float _DepthExponential;
			float _FoamSpeedY;
			float _FoamAnchorY;
			float _FoamAnchorX;
			float _ScreenContrast;
			float _FogToggle;
			float _Reflect;
			float _CMReflect;
			float _ReflectionStrength;
			float _CubeMapRotate;
			float _CMXPos;
			float _CMYPos;
			float _CMZPos;
			float _ReflectionMultiplier;
			float _MirrorReflect;
			float _MirrorRefIntensity;
			float _FogDepthDistance;
			float _FogDepthExponential;
			float _FogDepthSize;
			float _Specular;
			float _Smoothness;
			float _RefractionToggle;
			float _NormalToggle;
			float _SSBluricTransparent;
			float _SurfaceIntensity;
			float _MiddleWaveBumpIntensity;
			float _FoamRotateSpeed;
			float _FoamRotate;
			float _FoamAmplitude;
			float _FoamExp;
			float _FoamContrast;
			float _MiddleFoamToggle;
			float _MiddleWaveIntensity;
			float _FoamOffsetY;
			float _MidFlowMask;
			float _DefWeightA;
			float _MidBDeformToggle;
			float _DefWeightB;
			float _EdgeWaveExponential;
			float _EdgeWaveMultiplier;
			float _WaveLength;
			float _VT_Intensity;
			float _SurfaceToggle;
			float _MidADeformToggle;
			float _TRSurfWaveToggle;
			float _PatternMultiplier;
			float _SSTileY;
			float _ANoiseScale;
			float _AVoronoiSmooth;
			float _AVoronoiAngleSpeed;
			float _NTypeARotate;
			float _WAVoronoiAngleSpeed;
			float _WAVoronoiSmooth;
			float _WANoiseScale;
			float _WTypeATileX;
			float _NTypeATileX;
			float _WTypeATileY;
			float _WTypeAOffsetY;
			float _WTypeASpeedX;
			float _WTypeASpeedY;
			float _WTypeAOverallSpeed;
			float _WTypeARotate;
			float _WTypeARotateSpeed;
			float _WTypeAAnchorX;
			float _WTypeAAnchorY;
			float _WTypeAOffsetX;
			float _NTypeATileY;
			float _NTypeAOffsetX;
			float _NTypeAOffsetY;
			float _BNoiseScale;
			float _NTypeBTileX;
			float _NTypeBTileY;
			float _NTypeBOffsetX;
			float _NTypeBOffsetY;
			float _NTypeBSpeedX;
			float _NTypeBSpeedY;
			float _NTypeBOverallSpeed;
			float _NTypeBAnchorX;
			float _NTypeBAnchorY;
			float _BVoronoiSmooth;
			float _NTypeBRotateSpeed;
			float _NTypeBRotate;
			float _NTypeAAnchorY;
			float _NTypeAAnchorX;
			float _NTypeARotateSpeed;
			float _NTypeAOverallSpeed;
			float _NTypeASpeedY;
			float _NTypeASpeedX;
			float _WBVoronoiAngleSpeed;
			float _WBVoronoiSmooth;
			float _WBNoiseScale;
			float _WTypeBTileX;
			float _dfNoiseBFold;
			float _dfNoiseAFold;
			float _DeformFold;
			float _CheckFlowMap;
			float _fMapFold;
			float _wAFold;
			float _CheckMidWave;
			float _DFBAmplitude;
			float _DFAAmplitude;
			float _DFBExp;
			float _DFAExp;
			float _NoiseAContrast;
			float _NoiseBContrast;
			float _NA_Intensity;
			float _NB_Intensity;
			float _wBFold;
			float _SSTxtInfo;
			float _SSSize;
			float _SSTileX;
			float _dMaskFold;
			float _PatternHeight;
			float _fMaskFold;
			float _CheckDef;
			float _WTypeBTileY;
			float _WTypeBOffsetX;
			float _WTypeBOffsetY;
			float _WTypeBSpeedX;
			float _WTypeBSpeedY;
			float _WTypeBOverallSpeed;
			float _WTypeBRotate;
			float _WTypeBRotateSpeed;
			float _WTypeBAnchorX;
			float _WTypeBAnchorY;
			float _WaveAAmplitude;
			float _WaveBAmplitude;
			float _WaveAExp;
			float _WaveBExp;
			float _MGradeAmplitude;
			float _WaveBContrast;
			float _WaveAContrast;
			float _WaveAIntensity;
			float _WaveBIntensity;
			float _fTxtFold;
			float _Transparency;
			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			CBUFFER_END

			#ifdef SCENEPICKINGPASS
				float4 _SelectionID;
			#endif

			#ifdef SCENESELECTIONPASS
				int _ObjectId;
				int _PassValue;
			#endif

			sampler2D _DeformNoiseTypeB;
			sampler2D _DeformNoiseTypeA;
			sampler2D _WaveTypeB;
			sampler2D _WaveTypeA;
			sampler2D _TextureMap;
			sampler2D _FlowMap;
			sampler2D _MaskMap;
			sampler2D _FoamTexture;


			float SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD(float2 uv)
			{
				#if defined(REQUIRE_DEPTH_TEXTURE)
				#if defined(UNITY_STEREO_INSTANCING_ENABLED) || defined(UNITY_STEREO_MULTIVIEW_ENABLED)
				 	float rawDepth = SAMPLE_TEXTURE2D_ARRAY_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, unity_StereoEyeIndex, 0).r;
				#else
				 	float rawDepth = SAMPLE_DEPTH_TEXTURE_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, 0);
				#endif
				return rawDepth;
				#endif // REQUIRE_DEPTH_TEXTURE
				return 0;
			}
			
			float2 voronoihash2_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float3 mod2D289( float3 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float2 mod2D289( float2 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float3 permute( float3 x ) { return mod2D289( ( ( x * 34.0 ) + 1.0 ) * x ); }
			float snoise( float2 v )
			{
				const float4 C = float4( 0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439 );
				float2 i = floor( v + dot( v, C.yy ) );
				float2 x0 = v - i + dot( i, C.xx );
				float2 i1;
				i1 = ( x0.x > x0.y ) ? float2( 1.0, 0.0 ) : float2( 0.0, 1.0 );
				float4 x12 = x0.xyxy + C.xxzz;
				x12.xy -= i1;
				i = mod2D289( i );
				float3 p = permute( permute( i.y + float3( 0.0, i1.y, 1.0 ) ) + i.x + float3( 0.0, i1.x, 1.0 ) );
				float3 m = max( 0.5 - float3( dot( x0, x0 ), dot( x12.xy, x12.xy ), dot( x12.zw, x12.zw ) ), 0.0 );
				m = m * m;
				m = m * m;
				float3 x = 2.0 * frac( p * C.www ) - 1.0;
				float3 h = abs( x ) - 0.5;
				float3 ox = floor( x + 0.5 );
				float3 a0 = x - ox;
				m *= 1.79284291400159 - 0.85373472095314 * ( a0 * a0 + h * h );
				float3 g;
				g.x = a0.x * x0.x + h.x * x0.y;
				g.yz = a0.yz * x12.xz + h.yz * x12.yw;
				return 130.0 * dot( m, g );
			}
			
			float2 voronoihash8_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			

			VertexOutput VertexFunction( VertexInput v  )
			{
				VertexOutput o = (VertexOutput)0;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				float RF_Zero315 = 0.0;
				float3 temp_cast_0 = (RF_Zero315).xxx;
				float4 ase_clipPos = TransformObjectToHClip((v.positionOS).xyz);
				float4 screenPos = ComputeScreenPos(ase_clipPos);
				float4 ase_screenPosNorm = screenPos / screenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_3 );
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_6 );
				float3 temp_cast_7 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_7;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_7;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = v.ase_texcoord.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_8 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_8 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = v.ase_texcoord.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = v.ase_texcoord.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ), 0, 0.0) ).rgb , tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ), 0, 0.0) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_9 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_9 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_12 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = v.ase_texcoord.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_13 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_13 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_12;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_16 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_18 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = v.ase_texcoord.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_19 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_20 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_21 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_22 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_22;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2Dlod( _DeformNoiseTypeA, float4( UV20_g516, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_22;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = v.ase_texcoord.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_24 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_25 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_26 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_27 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_27;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_24;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_25;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_26;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2Dlod( _FoamTexture, float4( UV20_g786, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_27;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_28 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_28 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_32 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = v.ase_texcoord.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_35 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_36 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_37 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_38 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_38;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_35;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_36;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_37;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2Dlod( _WaveTypeA, float4( UV20_g790, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_38;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_39 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_39 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_43 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_45 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = v.ase_texcoord.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_46 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_47 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_48 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_49 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_49;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_46;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_47;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_48;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2Dlod( _DeformNoiseTypeB, float4( UV20_g512, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_49;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = v.ase_texcoord.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_51 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_52 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_53 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_54 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_54;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_51;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_52;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_53;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2Dlod( _WaveTypeB, float4( UV20_g540, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_54;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_55 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_55 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_58 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_58;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 linearToGamma1730 = FastLinearToSRGB( RF_SurfaceWave1466 );
				float3 linearToGamma1731 = FastLinearToSRGB( RF_FlowMask535 );
				float3 saferPower1714 = abs( ( 1.0 - linearToGamma1731 ) );
				float3 temp_cast_64 = (_EdgeWaveExponential).xxx;
				float3 RF_Vertex_Offset1726 = (( _Displacement )?( ( ( ( linearToGamma1730 * saturate( (pow( saferPower1714 , temp_cast_64 )*_EdgeWaveMultiplier + 0.0) ) ) * _WaveLength ) * v.normalOS ) ):( temp_cast_0 ));
				
				o.ase_texcoord3.xy = v.ase_texcoord.xy;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord3.zw = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.positionOS.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif

				float3 vertexValue = RF_Vertex_Offset1726;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.positionOS.xyz = vertexValue;
				#else
					v.positionOS.xyz += vertexValue;
				#endif

				v.normalOS = v.normalOS;

				VertexPositionInputs vertexInput = GetVertexPositionInputs( v.positionOS.xyz );

				#if defined(ASE_NEEDS_FRAG_WORLD_POSITION)
					o.positionWS = vertexInput.positionWS;
				#endif

				#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR) && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					o.shadowCoord = GetShadowCoord( vertexInput );
				#endif

				o.positionCS = vertexInput.positionCS;
				o.clipPosV = vertexInput.positionCS;
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( VertexInput v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.positionOS;
				o.normalOS = v.normalOS;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
				return patch[id];
			}

			[domain("tri")]
			VertexOutput DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				VertexInput o = (VertexInput) 0;
				o.positionOS = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].vertex.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			VertexOutput vert ( VertexInput v )
			{
				return VertexFunction( v );
			}
			#endif

			half4 frag(	VertexOutput IN
						#ifdef ASE_DEPTH_WRITE_ON
						,out float outputDepth : ASE_SV_DEPTH
						#endif
						 ) : SV_TARGET
			{
				UNITY_SETUP_INSTANCE_ID(IN);
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( IN );

				#if defined(ASE_NEEDS_FRAG_WORLD_POSITION)
				float3 WorldPosition = IN.positionWS;
				#endif

				float4 ShadowCoords = float4( 0, 0, 0, 0 );
				float4 ClipPos = IN.clipPosV;
				float4 ScreenPos = ComputeScreenPos( IN.clipPosV );

				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR)
						ShadowCoords = IN.shadowCoord;
					#elif defined(MAIN_LIGHT_CALCULATE_SHADOWS)
						ShadowCoords = TransformWorldToShadowCoord( WorldPosition );
					#endif
				#endif

				float3 temp_cast_0 = (_Transparency).xxx;
				float4 ase_screenPosNorm = ScreenPos / ScreenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_3 );
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_6 );
				float3 temp_cast_7 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_7;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_7;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = IN.ase_texcoord3.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_8 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_8 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = IN.ase_texcoord3.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = IN.ase_texcoord3.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ) ).rgb , tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_9 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_9 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_12 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = IN.ase_texcoord3.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_13 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_13 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_12;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_16 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_18 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = IN.ase_texcoord3.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_19 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_20 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_21 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_22 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_22;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2D( _DeformNoiseTypeA, UV20_g516 ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_22;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = IN.ase_texcoord3.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_24 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_25 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_26 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_27 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_27;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_24;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_25;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_26;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2D( _FoamTexture, UV20_g786 ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_27;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_28 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_28 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_32 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = IN.ase_texcoord3.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_35 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_36 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_37 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_38 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_38;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_35;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_36;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_37;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2D( _WaveTypeA, UV20_g790 ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_38;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_39 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_39 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_43 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_45 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = IN.ase_texcoord3.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_46 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_47 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_48 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_49 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_49;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_46;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_47;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_48;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2D( _DeformNoiseTypeB, UV20_g512 ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_49;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = IN.ase_texcoord3.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_51 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_52 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_53 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_54 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_54;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_51;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_52;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_53;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2D( _WaveTypeB, UV20_g540 ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_54;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_55 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_55 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_58 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_58;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 RF_TransparentIntensity1436 = (( _TRSurfWaveToggle )?( ( _Transparency * RF_SurfaceWave1466 ) ):( temp_cast_0 ));
				

				float Alpha = RF_TransparentIntensity1436.x;
				float AlphaClipThreshold = 0.5;

				#ifdef ASE_DEPTH_WRITE_ON
					float DepthValue = IN.positionCS.z;
				#endif

				#ifdef _ALPHATEST_ON
					clip(Alpha - AlphaClipThreshold);
				#endif

				#if defined(LOD_FADE_CROSSFADE)
					LODFadeCrossFade( IN.positionCS );
				#endif

				#ifdef ASE_DEPTH_WRITE_ON
					outputDepth = DepthValue;
				#endif

				return 0;
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "Meta"
			Tags { "LightMode"="Meta" }

			Cull Off

			HLSLPROGRAM
			#define _SPECULAR_SETUP 1
			#define ASE_FOG 1
			#define _ASE_LIGHTING_SIMPLE
			#define _SURFACE_TYPE_TRANSPARENT 1
			#define _NORMAL_DROPOFF_TS 1
			#define _EMISSION
			#define _NORMALMAP 1
			#define ASE_SRP_VERSION 140010
			#define REQUIRE_DEPTH_TEXTURE 1
			#define REQUIRE_OPAQUE_TEXTURE 1

			#pragma shader_feature EDITOR_VISUALIZATION

			#pragma vertex vert
			#pragma fragment frag

			#if defined(_SPECULAR_SETUP) && defined(_ASE_LIGHTING_SIMPLE)
				#define _SPECULAR_COLOR 1
			#endif

			#define SHADERPASS SHADERPASS_META

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Input.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"

			
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRendering.hlsl"
           

			
            #if ASE_SRP_VERSION >=140009
			#include_with_pragmas "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRenderingKeywords.hlsl"
			#endif
		

			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/MetaInput.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/Editor/ShaderGraph/Includes/ShaderPass.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#pragma shader_feature_local _CAUSTICB_OCT_CAUSTIC1 _CAUSTICB_OCT_CAUSTIC2 _CAUSTICB_OCT_CAUSTIC3 _CAUSTICB_OCT_CAUSTIC4 _CAUSTICB_OCT_CAUSTIC5 _CAUSTICB_OCT_CAUSTIC6 _CAUSTICB_OCT_CAUSTIC7 _CAUSTICB_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEBTYPE_NONE _NOISEBTYPE_VORONOICELL _NOISEBTYPE_VORONOICAUSTIC _NOISEBTYPE_PERLIN _NOISEBTYPE_TEXTURE
			#pragma shader_feature_local _CELLB_OCT_CELL1 _CELLB_OCT_CELL2 _CELLB_OCT_CELL3 _CELLB_OCT_CELL4 _CELLB_OCT_CELL5 _CELLB_OCT_CELL6 _CELLB_OCT_CELL7 _CELLB_OCT_CELL8
			#pragma shader_feature_local _CELLA_OCT_CELL1 _CELLA_OCT_CELL2 _CELLA_OCT_CELL3 _CELLA_OCT_CELL4 _CELLA_OCT_CELL5 _CELLA_OCT_CELL6 _CELLA_OCT_CELL7 _CELLA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICA_OCT_CAUSTIC1 _CAUSTICA_OCT_CAUSTIC2 _CAUSTICA_OCT_CAUSTIC3 _CAUSTICA_OCT_CAUSTIC4 _CAUSTICA_OCT_CAUSTIC5 _CAUSTICA_OCT_CAUSTIC6 _CAUSTICA_OCT_CAUSTIC7 _CAUSTICA_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEATYPE_NONE _NOISEATYPE_VORONOICELL _NOISEATYPE_VORONOICAUSTIC _NOISEATYPE_PERLIN _NOISEATYPE_TEXTURE
			#pragma shader_feature_local _WAVEBTYPE_NONE _WAVEBTYPE_VORONOICELL _WAVEBTYPE_VORONOICAUSTIC _WAVEBTYPE_PERLIN _WAVEBTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICWAVEB_OCT_CAUSTIC1 _CAUSTICWAVEB_OCT_CAUSTIC2 _CAUSTICWAVEB_OCT_CAUSTIC3 _CAUSTICWAVEB_OCT_CAUSTIC4 _CAUSTICWAVEB_OCT_CAUSTIC5 _CAUSTICWAVEB_OCT_CAUSTIC6 _CAUSTICWAVEB_OCT_CAUSTIC7 _CAUSTICWAVEB_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLWAVEB_OCT_CELL1 _CELLWAVEB_OCT_CELL2 _CELLWAVEB_OCT_CELL3 _CELLWAVEB_OCT_CELL4 _CELLWAVEB_OCT_CELL5 _CELLWAVEB_OCT_CELL6 _CELLWAVEB_OCT_CELL7 _CELLWAVEB_OCT_CELL8
			#pragma shader_feature_local _WAVEAGRADETYPE_LINEAR _WAVEAGRADETYPE_NORMAL _WAVEAGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBGRADETYPE_LINEAR _WAVEBGRADETYPE_NORMAL _WAVEBGRADETYPE_GAMMA
			#pragma shader_feature_local _DEPTHGRADETYPE_LINEAR _DEPTHGRADETYPE_NORMAL _DEPTHGRADETYPE_GAMMA
			#pragma shader_feature_local _FLOWMAPTYPE_DEPTH _FLOWMAPTYPE_FLOWTEXTURE
			#pragma shader_feature_local _MASK_ON
			#pragma shader_feature_local _MASKGRADETYPE_LINEAR _MASKGRADETYPE_NORMAL _MASKGRADETYPE_GAMMA
			#pragma shader_feature_local _TXTGRADETYPE_LINEAR _TXTGRADETYPE_NORMAL _TXTGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBINVERT_ON
			#pragma shader_feature_local _WAVEAINVERT_ON
			#pragma shader_feature_local _SELECTWAVETYPE_LAYERA _SELECTWAVETYPE_LAYERB _SELECTWAVETYPE_MULTIPLY _SELECTWAVETYPE_ADD _SELECTWAVETYPE_SUBTRACT _SELECTWAVETYPE_DIVIDE _SELECTWAVETYPE_DOT _SELECTWAVETYPE_FMOD _SELECTWAVETYPE_FMODINVERT
			#pragma shader_feature_local _DFAGRADETYPE_LINEAR _DFAGRADETYPE_NORMAL _DFAGRADETYPE_GAMMA
			#pragma shader_feature_local _DFBGRADETYPE_LINEAR _DFBGRADETYPE_NORMAL _DFBGRADETYPE_GAMMA
			#pragma shader_feature_local _DFNOISEAINVERT_ON
			#pragma shader_feature_local _DFNOISEBINVERT_ON
			#pragma shader_feature_local _SELECTDEFORMTYPE_LAYERA _SELECTDEFORMTYPE_LAYERB _SELECTDEFORMTYPE_MULTIPLY _SELECTDEFORMTYPE_ADD _SELECTDEFORMTYPE_SUBTRACT _SELECTDEFORMTYPE_DIVIDE _SELECTDEFORMTYPE_DOT _SELECTDEFORMTYPE_FMOD _SELECTDEFORMTYPE_FMODINVERT
			#pragma shader_feature_local _FOAMTYPE_NONE _FOAMTYPE_VORONOICELL _FOAMTYPE_VORONOICAUSTIC _FOAMTYPE_PERLIN _FOAMTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICFOAM_OCT_CAUSTIC1 _CAUSTICFOAM_OCT_CAUSTIC2 _CAUSTICFOAM_OCT_CAUSTIC3 _CAUSTICFOAM_OCT_CAUSTIC4 _CAUSTICFOAM_OCT_CAUSTIC5 _CAUSTICFOAM_OCT_CAUSTIC6 _CAUSTICFOAM_OCT_CAUSTIC7 _CAUSTICFOAM_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLFOAM_OCT_CELL1 _CELLFOAM_OCT_CELL2 _CELLFOAM_OCT_CELL3 _CELLFOAM_OCT_CELL4 _CELLFOAM_OCT_CELL5 _CELLFOAM_OCT_CELL6 _CELLFOAM_OCT_CELL7 _CELLFOAM_OCT_CELL8
			#pragma shader_feature_local _CELLWAVEA_OCT_CELL1 _CELLWAVEA_OCT_CELL2 _CELLWAVEA_OCT_CELL3 _CELLWAVEA_OCT_CELL4 _CELLWAVEA_OCT_CELL5 _CELLWAVEA_OCT_CELL6 _CELLWAVEA_OCT_CELL7 _CELLWAVEA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICWAVEA_OCT_CAUSTIC1 _CAUSTICWAVEA_OCT_CAUSTIC2 _CAUSTICWAVEA_OCT_CAUSTIC3 _CAUSTICWAVEA_OCT_CAUSTIC4 _CAUSTICWAVEA_OCT_CAUSTIC5 _CAUSTICWAVEA_OCT_CAUSTIC6 _CAUSTICWAVEA_OCT_CAUSTIC7 _CAUSTICWAVEA_OCT_CAUSTIC8
			#pragma shader_feature_local _WAVEATYPE_NONE _WAVEATYPE_VORONOICELL _WAVEATYPE_VORONOICAUSTIC _WAVEATYPE_PERLIN _WAVEATYPE_TEXTURE
			#pragma shader_feature_local _FOAMINVERT_ON
			#pragma shader_feature_local _FOAMGRADETYPE_LINEAR _FOAMGRADETYPE_NORMAL _FOAMGRADETYPE_GAMMA
			#pragma shader_feature_local _FOGDEPTHGRADETYPE_LINEAR _FOGDEPTHGRADETYPE_NORMAL _FOGDEPTHGRADETYPE_GAMMA


			struct VertexInput
			{
				float4 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 texcoord0 : TEXCOORD0;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_tangent : TANGENT;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct VertexOutput
			{
				float4 positionCS : SV_POSITION;
				#if defined(ASE_NEEDS_FRAG_WORLD_POSITION)
					float3 positionWS : TEXCOORD0;
				#endif
				#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR) && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					float4 shadowCoord : TEXCOORD1;
				#endif
				#ifdef EDITOR_VISUALIZATION
					float4 VizUV : TEXCOORD2;
					float4 LightCoord : TEXCOORD3;
				#endif
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			CBUFFER_START(UnityPerMaterial)
			float4 _ReflectColor;
			float4 _MaskMap_ST;
			float4 _FogColor;
			float4 _MirrorRefColor;
			float3 _RefractColor;
			float3 _SpecularColor;
			float _FlowTextureAmplitude;
			float _FlowTextureExponential;
			float _FlowTextureContrast;
			float _MaskGradeAmplitude;
			float _MaskGradePower;
			float _ShoreIntensity;
			float _FoamIntensity;
			float _BVoronoiAngleSpeed;
			float _MapChangeSpeed;
			float _FoamVoronoiAngleSpeed;
			float _FoamVoronoiSmooth;
			float _FoamDeformToggle;
			float _DefWeightFoam;
			float _FoamTileX;
			float _FoamTileY;
			float _FoamOffsetX;
			float _FoamSpeedX;
			float _FoamNoiseScale;
			float _RotateB;
			float _BTileX;
			float _BTileY;
			float _ShoreBumpIntensity;
			float _NormalGradePower;
			float _NormalIntensity;
			float _foamFold;
			float _otherFold;
			float _Displacement;
			float _ShoreFoamToggle;
			float _DepthNegative;
			float _OffsetB;
			float _DepthDistance;
			float _DepthSize;
			float _MapExponential;
			float _InfluenceFlow;
			float _ATileX;
			float _ATileY;
			float _FlowSpeed;
			float _RotateA;
			float _FoamOverallSpeed;
			float _DepthExponential;
			float _FoamSpeedY;
			float _FoamAnchorY;
			float _FoamAnchorX;
			float _ScreenContrast;
			float _FogToggle;
			float _Reflect;
			float _CMReflect;
			float _ReflectionStrength;
			float _CubeMapRotate;
			float _CMXPos;
			float _CMYPos;
			float _CMZPos;
			float _ReflectionMultiplier;
			float _MirrorReflect;
			float _MirrorRefIntensity;
			float _FogDepthDistance;
			float _FogDepthExponential;
			float _FogDepthSize;
			float _Specular;
			float _Smoothness;
			float _RefractionToggle;
			float _NormalToggle;
			float _SSBluricTransparent;
			float _SurfaceIntensity;
			float _MiddleWaveBumpIntensity;
			float _FoamRotateSpeed;
			float _FoamRotate;
			float _FoamAmplitude;
			float _FoamExp;
			float _FoamContrast;
			float _MiddleFoamToggle;
			float _MiddleWaveIntensity;
			float _FoamOffsetY;
			float _MidFlowMask;
			float _DefWeightA;
			float _MidBDeformToggle;
			float _DefWeightB;
			float _EdgeWaveExponential;
			float _EdgeWaveMultiplier;
			float _WaveLength;
			float _VT_Intensity;
			float _SurfaceToggle;
			float _MidADeformToggle;
			float _TRSurfWaveToggle;
			float _PatternMultiplier;
			float _SSTileY;
			float _ANoiseScale;
			float _AVoronoiSmooth;
			float _AVoronoiAngleSpeed;
			float _NTypeARotate;
			float _WAVoronoiAngleSpeed;
			float _WAVoronoiSmooth;
			float _WANoiseScale;
			float _WTypeATileX;
			float _NTypeATileX;
			float _WTypeATileY;
			float _WTypeAOffsetY;
			float _WTypeASpeedX;
			float _WTypeASpeedY;
			float _WTypeAOverallSpeed;
			float _WTypeARotate;
			float _WTypeARotateSpeed;
			float _WTypeAAnchorX;
			float _WTypeAAnchorY;
			float _WTypeAOffsetX;
			float _NTypeATileY;
			float _NTypeAOffsetX;
			float _NTypeAOffsetY;
			float _BNoiseScale;
			float _NTypeBTileX;
			float _NTypeBTileY;
			float _NTypeBOffsetX;
			float _NTypeBOffsetY;
			float _NTypeBSpeedX;
			float _NTypeBSpeedY;
			float _NTypeBOverallSpeed;
			float _NTypeBAnchorX;
			float _NTypeBAnchorY;
			float _BVoronoiSmooth;
			float _NTypeBRotateSpeed;
			float _NTypeBRotate;
			float _NTypeAAnchorY;
			float _NTypeAAnchorX;
			float _NTypeARotateSpeed;
			float _NTypeAOverallSpeed;
			float _NTypeASpeedY;
			float _NTypeASpeedX;
			float _WBVoronoiAngleSpeed;
			float _WBVoronoiSmooth;
			float _WBNoiseScale;
			float _WTypeBTileX;
			float _dfNoiseBFold;
			float _dfNoiseAFold;
			float _DeformFold;
			float _CheckFlowMap;
			float _fMapFold;
			float _wAFold;
			float _CheckMidWave;
			float _DFBAmplitude;
			float _DFAAmplitude;
			float _DFBExp;
			float _DFAExp;
			float _NoiseAContrast;
			float _NoiseBContrast;
			float _NA_Intensity;
			float _NB_Intensity;
			float _wBFold;
			float _SSTxtInfo;
			float _SSSize;
			float _SSTileX;
			float _dMaskFold;
			float _PatternHeight;
			float _fMaskFold;
			float _CheckDef;
			float _WTypeBTileY;
			float _WTypeBOffsetX;
			float _WTypeBOffsetY;
			float _WTypeBSpeedX;
			float _WTypeBSpeedY;
			float _WTypeBOverallSpeed;
			float _WTypeBRotate;
			float _WTypeBRotateSpeed;
			float _WTypeBAnchorX;
			float _WTypeBAnchorY;
			float _WaveAAmplitude;
			float _WaveBAmplitude;
			float _WaveAExp;
			float _WaveBExp;
			float _MGradeAmplitude;
			float _WaveBContrast;
			float _WaveAContrast;
			float _WaveAIntensity;
			float _WaveBIntensity;
			float _fTxtFold;
			float _Transparency;
			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			CBUFFER_END

			#ifdef SCENEPICKINGPASS
				float4 _SelectionID;
			#endif

			#ifdef SCENESELECTIONPASS
				int _ObjectId;
				int _PassValue;
			#endif

			sampler2D _DeformNoiseTypeB;
			sampler2D _DeformNoiseTypeA;
			sampler2D _WaveTypeB;
			sampler2D _WaveTypeA;
			sampler2D _TextureMap;
			sampler2D _FlowMap;
			sampler2D _MaskMap;
			sampler2D _FoamTexture;
			sampler2D _BluricRefractionPattern;
			samplerCUBE _ReflectMap;
			sampler2D _ReflectionMap;


			float SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD(float2 uv)
			{
				#if defined(REQUIRE_DEPTH_TEXTURE)
				#if defined(UNITY_STEREO_INSTANCING_ENABLED) || defined(UNITY_STEREO_MULTIVIEW_ENABLED)
				 	float rawDepth = SAMPLE_TEXTURE2D_ARRAY_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, unity_StereoEyeIndex, 0).r;
				#else
				 	float rawDepth = SAMPLE_DEPTH_TEXTURE_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, 0);
				#endif
				return rawDepth;
				#endif // REQUIRE_DEPTH_TEXTURE
				return 0;
			}
			
			float2 voronoihash2_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float3 mod2D289( float3 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float2 mod2D289( float2 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float3 permute( float3 x ) { return mod2D289( ( ( x * 34.0 ) + 1.0 ) * x ); }
			float snoise( float2 v )
			{
				const float4 C = float4( 0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439 );
				float2 i = floor( v + dot( v, C.yy ) );
				float2 x0 = v - i + dot( i, C.xx );
				float2 i1;
				i1 = ( x0.x > x0.y ) ? float2( 1.0, 0.0 ) : float2( 0.0, 1.0 );
				float4 x12 = x0.xyxy + C.xxzz;
				x12.xy -= i1;
				i = mod2D289( i );
				float3 p = permute( permute( i.y + float3( 0.0, i1.y, 1.0 ) ) + i.x + float3( 0.0, i1.x, 1.0 ) );
				float3 m = max( 0.5 - float3( dot( x0, x0 ), dot( x12.xy, x12.xy ), dot( x12.zw, x12.zw ) ), 0.0 );
				m = m * m;
				m = m * m;
				float3 x = 2.0 * frac( p * C.www ) - 1.0;
				float3 h = abs( x ) - 0.5;
				float3 ox = floor( x + 0.5 );
				float3 a0 = x - ox;
				m *= 1.79284291400159 - 0.85373472095314 * ( a0 * a0 + h * h );
				float3 g;
				g.x = a0.x * x0.x + h.x * x0.y;
				g.yz = a0.yz * x12.xz + h.yz * x12.yw;
				return 130.0 * dot( m, g );
			}
			
			float2 voronoihash8_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			inline float4 ASE_ComputeGrabScreenPos( float4 pos )
			{
				#if UNITY_UV_STARTS_AT_TOP
				float scale = -1.0;
				#else
				float scale = 1.0;
				#endif
				float4 o = pos;
				o.y = pos.w * 0.5f;
				o.y = ( pos.y - o.y ) * _ProjectionParams.x * scale + o.y;
				return o;
			}
			
			float3 PerturbNormal107_g1( float3 surf_pos, float3 surf_norm, float height, float scale )
			{
				// "Bump Mapping Unparametrized Surfaces on the GPU" by Morten S. Mikkelsen
				float3 vSigmaS = ddx( surf_pos );
				float3 vSigmaT = ddy( surf_pos );
				float3 vN = surf_norm;
				float3 vR1 = cross( vSigmaT , vN );
				float3 vR2 = cross( vN , vSigmaS );
				float fDet = dot( vSigmaS , vR1 );
				float dBs = ddx( height );
				float dBt = ddy( height );
				float3 vSurfGrad = scale * 0.05 * sign( fDet ) * ( dBs * vR1 + dBt * vR2 );
				return normalize ( abs( fDet ) * vN - vSurfGrad );
			}
			

			VertexOutput VertexFunction( VertexInput v  )
			{
				VertexOutput o = (VertexOutput)0;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				float RF_Zero315 = 0.0;
				float3 temp_cast_0 = (RF_Zero315).xxx;
				float4 ase_clipPos = TransformObjectToHClip((v.positionOS).xyz);
				float4 screenPos = ComputeScreenPos(ase_clipPos);
				float4 ase_screenPosNorm = screenPos / screenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_3 );
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_6 );
				float3 temp_cast_7 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_7;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_7;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = v.texcoord0.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_8 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_8 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = v.texcoord0.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = v.texcoord0.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ), 0, 0.0) ).rgb , tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ), 0, 0.0) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_9 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_9 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_12 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = v.texcoord0.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_13 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_13 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_12;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_16 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_18 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = v.texcoord0.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_19 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_20 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_21 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_22 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_22;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2Dlod( _DeformNoiseTypeA, float4( UV20_g516, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_22;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = v.texcoord0.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_24 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_25 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_26 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_27 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_27;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_24;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_25;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_26;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2Dlod( _FoamTexture, float4( UV20_g786, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_27;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_28 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_28 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_32 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = v.texcoord0.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_35 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_36 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_37 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_38 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_38;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_35;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_36;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_37;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2Dlod( _WaveTypeA, float4( UV20_g790, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_38;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_39 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_39 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_43 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_45 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = v.texcoord0.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_46 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_47 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_48 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_49 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_49;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_46;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_47;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_48;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2Dlod( _DeformNoiseTypeB, float4( UV20_g512, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_49;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = v.texcoord0.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_51 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_52 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_53 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_54 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_54;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_51;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_52;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_53;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2Dlod( _WaveTypeB, float4( UV20_g540, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_54;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_55 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_55 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_58 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_58;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 linearToGamma1730 = FastLinearToSRGB( RF_SurfaceWave1466 );
				float3 linearToGamma1731 = FastLinearToSRGB( RF_FlowMask535 );
				float3 saferPower1714 = abs( ( 1.0 - linearToGamma1731 ) );
				float3 temp_cast_64 = (_EdgeWaveExponential).xxx;
				float3 RF_Vertex_Offset1726 = (( _Displacement )?( ( ( ( linearToGamma1730 * saturate( (pow( saferPower1714 , temp_cast_64 )*_EdgeWaveMultiplier + 0.0) ) ) * _WaveLength ) * v.normalOS ) ):( temp_cast_0 ));
				
				o.ase_texcoord4 = screenPos;
				
				float3 ase_worldNormal = TransformObjectToWorldNormal(v.normalOS);
				o.ase_texcoord6.xyz = ase_worldNormal;
				float3 ase_worldTangent = TransformObjectToWorldDir(v.ase_tangent.xyz);
				o.ase_texcoord7.xyz = ase_worldTangent;
				float ase_vertexTangentSign = v.ase_tangent.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				o.ase_texcoord8.xyz = ase_worldBitangent;
				
				o.ase_texcoord5.xyz = v.texcoord0.xyz;
				o.ase_texcoord9 = v.positionOS;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord5.w = 0;
				o.ase_texcoord6.w = 0;
				o.ase_texcoord7.w = 0;
				o.ase_texcoord8.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.positionOS.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif

				float3 vertexValue = RF_Vertex_Offset1726;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.positionOS.xyz = vertexValue;
				#else
					v.positionOS.xyz += vertexValue;
				#endif

				v.normalOS = v.normalOS;

				float3 positionWS = TransformObjectToWorld( v.positionOS.xyz );

				#if defined(ASE_NEEDS_FRAG_WORLD_POSITION)
					o.positionWS = positionWS;
				#endif

				o.positionCS = MetaVertexPosition( v.positionOS, v.texcoord1.xy, v.texcoord1.xy, unity_LightmapST, unity_DynamicLightmapST );

				#ifdef EDITOR_VISUALIZATION
					float2 VizUV = 0;
					float4 LightCoord = 0;
					UnityEditorVizData(v.positionOS.xyz, v.texcoord0.xy, v.texcoord1.xy, v.texcoord2.xy, VizUV, LightCoord);
					o.VizUV = float4(VizUV, 0, 0);
					o.LightCoord = LightCoord;
				#endif

				#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR) && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					VertexPositionInputs vertexInput = (VertexPositionInputs)0;
					vertexInput.positionWS = positionWS;
					vertexInput.positionCS = o.positionCS;
					o.shadowCoord = GetShadowCoord( vertexInput );
				#endif

				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 texcoord0 : TEXCOORD0;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_tangent : TANGENT;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( VertexInput v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.positionOS;
				o.normalOS = v.normalOS;
				o.texcoord0 = v.texcoord0;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_tangent = v.ase_tangent;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
				return patch[id];
			}

			[domain("tri")]
			VertexOutput DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				VertexInput o = (VertexInput) 0;
				o.positionOS = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.texcoord0 = patch[0].texcoord0 * bary.x + patch[1].texcoord0 * bary.y + patch[2].texcoord0 * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_tangent = patch[0].ase_tangent * bary.x + patch[1].ase_tangent * bary.y + patch[2].ase_tangent * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].vertex.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			VertexOutput vert ( VertexInput v )
			{
				return VertexFunction( v );
			}
			#endif

			half4 frag(VertexOutput IN  ) : SV_TARGET
			{
				UNITY_SETUP_INSTANCE_ID(IN);
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( IN );

				#if defined(ASE_NEEDS_FRAG_WORLD_POSITION)
					float3 WorldPosition = IN.positionWS;
				#endif

				float4 ShadowCoords = float4( 0, 0, 0, 0 );

				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR)
						ShadowCoords = IN.shadowCoord;
					#elif defined(MAIN_LIGHT_CALCULATE_SHADOWS)
						ShadowCoords = TransformWorldToShadowCoord( WorldPosition );
					#endif
				#endif

				float RF_Zero315 = 0.0;
				float3 temp_cast_0 = (RF_Zero315).xxx;
				float4 screenPos = IN.ase_texcoord4;
				float4 ase_screenPosNorm = screenPos / screenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_3 );
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_6 );
				float3 temp_cast_7 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_7;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_7;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = IN.ase_texcoord5.xyz.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_8 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_8 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = IN.ase_texcoord5.xyz.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = IN.ase_texcoord5.xyz.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ) ).rgb , tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_9 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_9 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_12 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = IN.ase_texcoord5.xyz.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_13 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_13 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_12;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_16 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_18 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = IN.ase_texcoord5.xyz.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_19 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_20 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_21 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_22 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_22;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2D( _DeformNoiseTypeA, UV20_g516 ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_22;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = IN.ase_texcoord5.xyz.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_24 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_25 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_26 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_27 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_27;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_24;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_25;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_26;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2D( _FoamTexture, UV20_g786 ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_27;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_28 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_28 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_32 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = IN.ase_texcoord5.xyz.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_35 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_36 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_37 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_38 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_38;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_35;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_36;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_37;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2D( _WaveTypeA, UV20_g790 ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_38;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_39 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_39 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_43 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_45 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = IN.ase_texcoord5.xyz.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_46 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_47 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_48 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_49 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_49;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_46;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_47;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_48;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2D( _DeformNoiseTypeB, UV20_g512 ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_49;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = IN.ase_texcoord5.xyz.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_51 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_52 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_53 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_54 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_54;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_51;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_52;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_53;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2D( _WaveTypeB, UV20_g540 ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_54;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_55 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_55 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_58 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_58;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_FinalSurface1629 = (( _SurfaceToggle )?( ( _SurfaceIntensity * linearToGamma1433 ) ):( temp_cast_0 ));
				
				float4 temp_cast_64 = (RF_Zero315).xxxx;
				float4 ase_grabScreenPos = ASE_ComputeGrabScreenPos( screenPos );
				float4 ase_grabScreenPosNorm = ase_grabScreenPos / ase_grabScreenPos.w;
				float2 temp_output_1_0_g780 = float2( 0,0 );
				float dotResult4_g780 = dot( temp_output_1_0_g780 , temp_output_1_0_g780 );
				float3 appendResult10_g780 = (float3((temp_output_1_0_g780).x , (temp_output_1_0_g780).y , sqrt( ( 1.0 - saturate( dotResult4_g780 ) ) )));
				float3 normalizeResult12_g780 = normalize( appendResult10_g780 );
				float3 surf_pos107_g1 = WorldPosition;
				float3 ase_worldNormal = IN.ase_texcoord6.xyz;
				float3 surf_norm107_g1 = ase_worldNormal;
				float3 linearToGamma1508 = LinearToGamma22( saturate( ( float4( ( RF_FlowMap536 * _ShoreBumpIntensity ) , 0.0 ) + ( _MiddleWaveBumpIntensity * RF_MidWave1281 ) ) ).xyz );
				float3 temp_cast_69 = ((0.01 + (_NormalGradePower - 0.0) * (2.0 - 0.01) / (2.0 - 0.0))).xxx;
				float height107_g1 = pow( linearToGamma1508 , temp_cast_69 ).x;
				float scale107_g1 = _NormalIntensity;
				float3 localPerturbNormal107_g1 = PerturbNormal107_g1( surf_pos107_g1 , surf_norm107_g1 , height107_g1 , scale107_g1 );
				float3 ase_worldTangent = IN.ase_texcoord7.xyz;
				float3 ase_worldBitangent = IN.ase_texcoord8.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				float3 worldToTangentDir42_g1 = mul( ase_worldToTangent, localPerturbNormal107_g1);
				float2 appendResult1488 = (float2(_SSTileX , _SSTileY));
				float4 unityObjectToClipPos1477 = TransformWorldToHClip(TransformObjectToWorld(IN.ase_texcoord9.xyz));
				float4 computeScreenPos1478 = ComputeScreenPos( unityObjectToClipPos1477 );
				float2 break1493 = ( appendResult1488 * (computeScreenPos1478).xy );
				float temp_output_1492_0 = (computeScreenPos1478).w;
				float4 appendResult1494 = (float4(break1493.x , break1493.y , (computeScreenPos1478).z , temp_output_1492_0));
				float3 unpack1485 = UnpackNormalScale( tex2D( _BluricRefractionPattern, ( ( appendResult1494 / temp_output_1492_0 ) * _SSSize ).xy ), ( (-0.1 + (_PatternHeight - -1.0) * (0.1 - -0.1) / (1.0 - -1.0)) * _PatternMultiplier ) );
				unpack1485.z = lerp( 1, unpack1485.z, saturate(( (-0.1 + (_PatternHeight - -1.0) * (0.1 - -0.1) / (1.0 - -1.0)) * _PatternMultiplier )) );
				float3 RF_BumpForSmooth1486 = unpack1485;
				float3 RF_NewObjectNormal1230 = (( _SSBluricTransparent )?( BlendNormalRNM( (( _NormalToggle )?( worldToTangentDir42_g1 ):( normalizeResult12_g780 )) , RF_BumpForSmooth1486 ) ):( (( _NormalToggle )?( worldToTangentDir42_g1 ):( normalizeResult12_g780 )) ));
				float4 fetchOpaqueVal1443 = float4( SHADERGRAPH_SAMPLE_SCENE_COLOR( saturate( ( ase_grabScreenPosNorm + float4( RF_NewObjectNormal1230 , 0.0 ) ) ).xy ), 1.0 );
				float4 saferPower1461 = abs( fetchOpaqueVal1443 );
				float4 temp_cast_75 = ((0.3 + (_ScreenContrast - 0.0) * (1.5 - 0.3) / (1.0 - 0.0))).xxxx;
				float4 RF_Refraction1447 = (( _RefractionToggle )?( ( float4( _RefractColor , 0.0 ) * pow( saferPower1461 , temp_cast_75 ) * 0.6 ) ):( temp_cast_64 ));
				float4 temp_cast_76 = (RF_Zero315).xxxx;
				float4 temp_cast_77 = (RF_Zero315).xxxx;
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 ase_worldViewDir = ( _WorldSpaceCameraPos.xyz - WorldPosition );
				ase_worldViewDir = normalize(ase_worldViewDir);
				float3 worldRefl1398 = normalize( reflect( -ase_worldViewDir, float3( dot( tanToWorld0, RF_NewObjectNormal1230 ), dot( tanToWorld1, RF_NewObjectNormal1230 ), dot( tanToWorld2, RF_NewObjectNormal1230 ) ) ) );
				float3 VertexPos5_g776 = worldRefl1398;
				float3 appendResult10_g776 = (float3(0.0 , VertexPos5_g776.y , 0.0));
				float3 VertexPosRotationAxis11_g776 = appendResult10_g776;
				float3 break13_g776 = VertexPos5_g776;
				float3 appendResult14_g776 = (float3(break13_g776.x , 0.0 , break13_g776.z));
				float3 VertexPosOtherAxis12_g776 = appendResult14_g776;
				float Angle3_g776 = radians( _CubeMapRotate );
				float3 appendResult1409 = (float3(_CMXPos , -_CMYPos , _CMZPos));
				float RF_One317 = 1.0;
				float4 temp_cast_78 = (RF_Zero315).xxxx;
				float4 RF_Reflect1423 = (( _Reflect )?( ( (( _CMReflect )?( ( _ReflectionStrength * ( texCUBE( _ReflectMap, ( ( VertexPosRotationAxis11_g776 + ( VertexPosOtherAxis12_g776 * cos( Angle3_g776 ) ) + ( cross( float3(0,1,0) , VertexPosOtherAxis12_g776 ) * sin( Angle3_g776 ) ) ) + appendResult1409 ) ) * _ReflectColor ) * ( _ReflectionMultiplier + RF_One317 ) ) ):( temp_cast_77 )) + (( _MirrorReflect )?( ( tex2D( _ReflectionMap, ( ase_screenPosNorm + float4( RF_NewObjectNormal1230 , 0.0 ) ).xy ) * _MirrorRefIntensity * _MirrorRefColor ) ):( temp_cast_78 )) ) ):( temp_cast_76 ));
				float screenDepth1_g772 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g772 = abs( ( screenDepth1_g772 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _FogDepthDistance ) );
				float saferPower3_g772 = abs( distanceDepth1_g772 );
				float temp_output_29_0_g772 = ( ( saturate( pow( saferPower3_g772 , max( _FogDepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + ((2.0 + (_FogDepthSize - 0.0) * (3.0 - 2.0) / (1.0 - 0.0)) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_81 = (temp_output_29_0_g772).xxx;
				float3 temp_cast_82 = (temp_output_29_0_g772).xxx;
				float3 gammaToLinear30_g772 = SRGBToLinear( temp_cast_82 );
				float3 temp_cast_83 = (temp_output_29_0_g772).xxx;
				float3 temp_cast_84 = (temp_output_29_0_g772).xxx;
				float3 temp_cast_85 = (temp_output_29_0_g772).xxx;
				float3 linearToGamma31_g772 = LinearToSRGB( temp_cast_85 );
				float3 temp_cast_86 = (temp_output_29_0_g772).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g772 = gammaToLinear30_g772;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g772 = temp_cast_86;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g772 = linearToGamma31_g772;
				#else
				float3 staticSwitch32_g772 = temp_cast_86;
				#endif
				float3 temp_output_36_0_g772 = saturate( staticSwitch32_g772 );
				float3 temp_output_1179_0 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g772 ) ):( temp_output_36_0_g772 ));
				float3 gammaToLinear1181 = Gamma22ToLinear( temp_output_1179_0 );
				float3 linearToGamma1180 = LinearToGamma22( temp_output_1179_0 );
				#if defined( _FOGDEPTHGRADETYPE_LINEAR )
				float3 staticSwitch1182 = gammaToLinear1181;
				#elif defined( _FOGDEPTHGRADETYPE_NORMAL )
				float3 staticSwitch1182 = temp_output_1179_0;
				#elif defined( _FOGDEPTHGRADETYPE_GAMMA )
				float3 staticSwitch1182 = linearToGamma1180;
				#else
				float3 staticSwitch1182 = gammaToLinear1181;
				#endif
				float3 RF_FogDepth1187 = saturate( ( 1.0 - staticSwitch1182 ) );
				float4 lerpResult1194 = lerp( saturate( RF_Refraction1447 ) , _FogColor , float4( RF_FogDepth1187 , 0.0 ));
				float4 RF_Comp_Fog1197 = (( _FogToggle )?( ( lerpResult1194 + RF_Reflect1423 ) ):( ( RF_Reflect1423 + RF_Refraction1447 ) ));
				float4 lerpResult1586 = lerp( RF_Refraction1447 , RF_Comp_Fog1197 , RF_One317);
				float4 RF_FinalEmission1624 = ( lerpResult1586 + RF_Reflect1423 );
				
				float3 temp_cast_89 = (_Transparency).xxx;
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 RF_TransparentIntensity1436 = (( _TRSurfWaveToggle )?( ( _Transparency * RF_SurfaceWave1466 ) ):( temp_cast_89 ));
				

				float3 BaseColor = RF_FinalSurface1629;
				float3 Emission = RF_FinalEmission1624.rgb;
				float Alpha = RF_TransparentIntensity1436.x;
				float AlphaClipThreshold = 0.5;

				#ifdef _ALPHATEST_ON
					clip(Alpha - AlphaClipThreshold);
				#endif

				MetaInput metaInput = (MetaInput)0;
				metaInput.Albedo = BaseColor;
				metaInput.Emission = Emission;
				#ifdef EDITOR_VISUALIZATION
					metaInput.VizUV = IN.VizUV.xy;
					metaInput.LightCoord = IN.LightCoord;
				#endif

				return UnityMetaFragment(metaInput);
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "Universal2D"
			Tags { "LightMode"="Universal2D" }

			Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha
			ZWrite Off
			ZTest LEqual
			Offset 0 , 0
			ColorMask RGBA

			HLSLPROGRAM

			#define _SPECULAR_SETUP 1
			#define ASE_FOG 1
			#define _ASE_LIGHTING_SIMPLE
			#define _SURFACE_TYPE_TRANSPARENT 1
			#define _NORMAL_DROPOFF_TS 1
			#define _EMISSION
			#define _NORMALMAP 1
			#define ASE_SRP_VERSION 140010
			#define REQUIRE_DEPTH_TEXTURE 1


			#pragma vertex vert
			#pragma fragment frag

			#if defined(_SPECULAR_SETUP) && defined(_ASE_LIGHTING_SIMPLE)
				#define _SPECULAR_COLOR 1
			#endif

			#define SHADERPASS SHADERPASS_2D

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Input.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"

			
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRendering.hlsl"
           

			
            #if ASE_SRP_VERSION >=140009
			#include_with_pragmas "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRenderingKeywords.hlsl"
			#endif
		

			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/Editor/ShaderGraph/Includes/ShaderPass.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#define ASE_NEEDS_VERT_NORMAL
			#pragma shader_feature_local _CAUSTICB_OCT_CAUSTIC1 _CAUSTICB_OCT_CAUSTIC2 _CAUSTICB_OCT_CAUSTIC3 _CAUSTICB_OCT_CAUSTIC4 _CAUSTICB_OCT_CAUSTIC5 _CAUSTICB_OCT_CAUSTIC6 _CAUSTICB_OCT_CAUSTIC7 _CAUSTICB_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEBTYPE_NONE _NOISEBTYPE_VORONOICELL _NOISEBTYPE_VORONOICAUSTIC _NOISEBTYPE_PERLIN _NOISEBTYPE_TEXTURE
			#pragma shader_feature_local _CELLB_OCT_CELL1 _CELLB_OCT_CELL2 _CELLB_OCT_CELL3 _CELLB_OCT_CELL4 _CELLB_OCT_CELL5 _CELLB_OCT_CELL6 _CELLB_OCT_CELL7 _CELLB_OCT_CELL8
			#pragma shader_feature_local _CELLA_OCT_CELL1 _CELLA_OCT_CELL2 _CELLA_OCT_CELL3 _CELLA_OCT_CELL4 _CELLA_OCT_CELL5 _CELLA_OCT_CELL6 _CELLA_OCT_CELL7 _CELLA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICA_OCT_CAUSTIC1 _CAUSTICA_OCT_CAUSTIC2 _CAUSTICA_OCT_CAUSTIC3 _CAUSTICA_OCT_CAUSTIC4 _CAUSTICA_OCT_CAUSTIC5 _CAUSTICA_OCT_CAUSTIC6 _CAUSTICA_OCT_CAUSTIC7 _CAUSTICA_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEATYPE_NONE _NOISEATYPE_VORONOICELL _NOISEATYPE_VORONOICAUSTIC _NOISEATYPE_PERLIN _NOISEATYPE_TEXTURE
			#pragma shader_feature_local _WAVEBTYPE_NONE _WAVEBTYPE_VORONOICELL _WAVEBTYPE_VORONOICAUSTIC _WAVEBTYPE_PERLIN _WAVEBTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICWAVEB_OCT_CAUSTIC1 _CAUSTICWAVEB_OCT_CAUSTIC2 _CAUSTICWAVEB_OCT_CAUSTIC3 _CAUSTICWAVEB_OCT_CAUSTIC4 _CAUSTICWAVEB_OCT_CAUSTIC5 _CAUSTICWAVEB_OCT_CAUSTIC6 _CAUSTICWAVEB_OCT_CAUSTIC7 _CAUSTICWAVEB_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLWAVEB_OCT_CELL1 _CELLWAVEB_OCT_CELL2 _CELLWAVEB_OCT_CELL3 _CELLWAVEB_OCT_CELL4 _CELLWAVEB_OCT_CELL5 _CELLWAVEB_OCT_CELL6 _CELLWAVEB_OCT_CELL7 _CELLWAVEB_OCT_CELL8
			#pragma shader_feature_local _WAVEAGRADETYPE_LINEAR _WAVEAGRADETYPE_NORMAL _WAVEAGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBGRADETYPE_LINEAR _WAVEBGRADETYPE_NORMAL _WAVEBGRADETYPE_GAMMA
			#pragma shader_feature_local _DEPTHGRADETYPE_LINEAR _DEPTHGRADETYPE_NORMAL _DEPTHGRADETYPE_GAMMA
			#pragma shader_feature_local _FLOWMAPTYPE_DEPTH _FLOWMAPTYPE_FLOWTEXTURE
			#pragma shader_feature_local _MASK_ON
			#pragma shader_feature_local _MASKGRADETYPE_LINEAR _MASKGRADETYPE_NORMAL _MASKGRADETYPE_GAMMA
			#pragma shader_feature_local _TXTGRADETYPE_LINEAR _TXTGRADETYPE_NORMAL _TXTGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBINVERT_ON
			#pragma shader_feature_local _WAVEAINVERT_ON
			#pragma shader_feature_local _SELECTWAVETYPE_LAYERA _SELECTWAVETYPE_LAYERB _SELECTWAVETYPE_MULTIPLY _SELECTWAVETYPE_ADD _SELECTWAVETYPE_SUBTRACT _SELECTWAVETYPE_DIVIDE _SELECTWAVETYPE_DOT _SELECTWAVETYPE_FMOD _SELECTWAVETYPE_FMODINVERT
			#pragma shader_feature_local _DFAGRADETYPE_LINEAR _DFAGRADETYPE_NORMAL _DFAGRADETYPE_GAMMA
			#pragma shader_feature_local _DFBGRADETYPE_LINEAR _DFBGRADETYPE_NORMAL _DFBGRADETYPE_GAMMA
			#pragma shader_feature_local _DFNOISEAINVERT_ON
			#pragma shader_feature_local _DFNOISEBINVERT_ON
			#pragma shader_feature_local _SELECTDEFORMTYPE_LAYERA _SELECTDEFORMTYPE_LAYERB _SELECTDEFORMTYPE_MULTIPLY _SELECTDEFORMTYPE_ADD _SELECTDEFORMTYPE_SUBTRACT _SELECTDEFORMTYPE_DIVIDE _SELECTDEFORMTYPE_DOT _SELECTDEFORMTYPE_FMOD _SELECTDEFORMTYPE_FMODINVERT
			#pragma shader_feature_local _FOAMTYPE_NONE _FOAMTYPE_VORONOICELL _FOAMTYPE_VORONOICAUSTIC _FOAMTYPE_PERLIN _FOAMTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICFOAM_OCT_CAUSTIC1 _CAUSTICFOAM_OCT_CAUSTIC2 _CAUSTICFOAM_OCT_CAUSTIC3 _CAUSTICFOAM_OCT_CAUSTIC4 _CAUSTICFOAM_OCT_CAUSTIC5 _CAUSTICFOAM_OCT_CAUSTIC6 _CAUSTICFOAM_OCT_CAUSTIC7 _CAUSTICFOAM_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLFOAM_OCT_CELL1 _CELLFOAM_OCT_CELL2 _CELLFOAM_OCT_CELL3 _CELLFOAM_OCT_CELL4 _CELLFOAM_OCT_CELL5 _CELLFOAM_OCT_CELL6 _CELLFOAM_OCT_CELL7 _CELLFOAM_OCT_CELL8
			#pragma shader_feature_local _CELLWAVEA_OCT_CELL1 _CELLWAVEA_OCT_CELL2 _CELLWAVEA_OCT_CELL3 _CELLWAVEA_OCT_CELL4 _CELLWAVEA_OCT_CELL5 _CELLWAVEA_OCT_CELL6 _CELLWAVEA_OCT_CELL7 _CELLWAVEA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICWAVEA_OCT_CAUSTIC1 _CAUSTICWAVEA_OCT_CAUSTIC2 _CAUSTICWAVEA_OCT_CAUSTIC3 _CAUSTICWAVEA_OCT_CAUSTIC4 _CAUSTICWAVEA_OCT_CAUSTIC5 _CAUSTICWAVEA_OCT_CAUSTIC6 _CAUSTICWAVEA_OCT_CAUSTIC7 _CAUSTICWAVEA_OCT_CAUSTIC8
			#pragma shader_feature_local _WAVEATYPE_NONE _WAVEATYPE_VORONOICELL _WAVEATYPE_VORONOICAUSTIC _WAVEATYPE_PERLIN _WAVEATYPE_TEXTURE
			#pragma shader_feature_local _FOAMINVERT_ON
			#pragma shader_feature_local _FOAMGRADETYPE_LINEAR _FOAMGRADETYPE_NORMAL _FOAMGRADETYPE_GAMMA


			struct VertexInput
			{
				float4 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct VertexOutput
			{
				float4 positionCS : SV_POSITION;
				#if defined(ASE_NEEDS_FRAG_WORLD_POSITION)
					float3 positionWS : TEXCOORD0;
				#endif
				#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR) && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					float4 shadowCoord : TEXCOORD1;
				#endif
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			CBUFFER_START(UnityPerMaterial)
			float4 _ReflectColor;
			float4 _MaskMap_ST;
			float4 _FogColor;
			float4 _MirrorRefColor;
			float3 _RefractColor;
			float3 _SpecularColor;
			float _FlowTextureAmplitude;
			float _FlowTextureExponential;
			float _FlowTextureContrast;
			float _MaskGradeAmplitude;
			float _MaskGradePower;
			float _ShoreIntensity;
			float _FoamIntensity;
			float _BVoronoiAngleSpeed;
			float _MapChangeSpeed;
			float _FoamVoronoiAngleSpeed;
			float _FoamVoronoiSmooth;
			float _FoamDeformToggle;
			float _DefWeightFoam;
			float _FoamTileX;
			float _FoamTileY;
			float _FoamOffsetX;
			float _FoamSpeedX;
			float _FoamNoiseScale;
			float _RotateB;
			float _BTileX;
			float _BTileY;
			float _ShoreBumpIntensity;
			float _NormalGradePower;
			float _NormalIntensity;
			float _foamFold;
			float _otherFold;
			float _Displacement;
			float _ShoreFoamToggle;
			float _DepthNegative;
			float _OffsetB;
			float _DepthDistance;
			float _DepthSize;
			float _MapExponential;
			float _InfluenceFlow;
			float _ATileX;
			float _ATileY;
			float _FlowSpeed;
			float _RotateA;
			float _FoamOverallSpeed;
			float _DepthExponential;
			float _FoamSpeedY;
			float _FoamAnchorY;
			float _FoamAnchorX;
			float _ScreenContrast;
			float _FogToggle;
			float _Reflect;
			float _CMReflect;
			float _ReflectionStrength;
			float _CubeMapRotate;
			float _CMXPos;
			float _CMYPos;
			float _CMZPos;
			float _ReflectionMultiplier;
			float _MirrorReflect;
			float _MirrorRefIntensity;
			float _FogDepthDistance;
			float _FogDepthExponential;
			float _FogDepthSize;
			float _Specular;
			float _Smoothness;
			float _RefractionToggle;
			float _NormalToggle;
			float _SSBluricTransparent;
			float _SurfaceIntensity;
			float _MiddleWaveBumpIntensity;
			float _FoamRotateSpeed;
			float _FoamRotate;
			float _FoamAmplitude;
			float _FoamExp;
			float _FoamContrast;
			float _MiddleFoamToggle;
			float _MiddleWaveIntensity;
			float _FoamOffsetY;
			float _MidFlowMask;
			float _DefWeightA;
			float _MidBDeformToggle;
			float _DefWeightB;
			float _EdgeWaveExponential;
			float _EdgeWaveMultiplier;
			float _WaveLength;
			float _VT_Intensity;
			float _SurfaceToggle;
			float _MidADeformToggle;
			float _TRSurfWaveToggle;
			float _PatternMultiplier;
			float _SSTileY;
			float _ANoiseScale;
			float _AVoronoiSmooth;
			float _AVoronoiAngleSpeed;
			float _NTypeARotate;
			float _WAVoronoiAngleSpeed;
			float _WAVoronoiSmooth;
			float _WANoiseScale;
			float _WTypeATileX;
			float _NTypeATileX;
			float _WTypeATileY;
			float _WTypeAOffsetY;
			float _WTypeASpeedX;
			float _WTypeASpeedY;
			float _WTypeAOverallSpeed;
			float _WTypeARotate;
			float _WTypeARotateSpeed;
			float _WTypeAAnchorX;
			float _WTypeAAnchorY;
			float _WTypeAOffsetX;
			float _NTypeATileY;
			float _NTypeAOffsetX;
			float _NTypeAOffsetY;
			float _BNoiseScale;
			float _NTypeBTileX;
			float _NTypeBTileY;
			float _NTypeBOffsetX;
			float _NTypeBOffsetY;
			float _NTypeBSpeedX;
			float _NTypeBSpeedY;
			float _NTypeBOverallSpeed;
			float _NTypeBAnchorX;
			float _NTypeBAnchorY;
			float _BVoronoiSmooth;
			float _NTypeBRotateSpeed;
			float _NTypeBRotate;
			float _NTypeAAnchorY;
			float _NTypeAAnchorX;
			float _NTypeARotateSpeed;
			float _NTypeAOverallSpeed;
			float _NTypeASpeedY;
			float _NTypeASpeedX;
			float _WBVoronoiAngleSpeed;
			float _WBVoronoiSmooth;
			float _WBNoiseScale;
			float _WTypeBTileX;
			float _dfNoiseBFold;
			float _dfNoiseAFold;
			float _DeformFold;
			float _CheckFlowMap;
			float _fMapFold;
			float _wAFold;
			float _CheckMidWave;
			float _DFBAmplitude;
			float _DFAAmplitude;
			float _DFBExp;
			float _DFAExp;
			float _NoiseAContrast;
			float _NoiseBContrast;
			float _NA_Intensity;
			float _NB_Intensity;
			float _wBFold;
			float _SSTxtInfo;
			float _SSSize;
			float _SSTileX;
			float _dMaskFold;
			float _PatternHeight;
			float _fMaskFold;
			float _CheckDef;
			float _WTypeBTileY;
			float _WTypeBOffsetX;
			float _WTypeBOffsetY;
			float _WTypeBSpeedX;
			float _WTypeBSpeedY;
			float _WTypeBOverallSpeed;
			float _WTypeBRotate;
			float _WTypeBRotateSpeed;
			float _WTypeBAnchorX;
			float _WTypeBAnchorY;
			float _WaveAAmplitude;
			float _WaveBAmplitude;
			float _WaveAExp;
			float _WaveBExp;
			float _MGradeAmplitude;
			float _WaveBContrast;
			float _WaveAContrast;
			float _WaveAIntensity;
			float _WaveBIntensity;
			float _fTxtFold;
			float _Transparency;
			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			CBUFFER_END

			#ifdef SCENEPICKINGPASS
				float4 _SelectionID;
			#endif

			#ifdef SCENESELECTIONPASS
				int _ObjectId;
				int _PassValue;
			#endif

			sampler2D _DeformNoiseTypeB;
			sampler2D _DeformNoiseTypeA;
			sampler2D _WaveTypeB;
			sampler2D _WaveTypeA;
			sampler2D _TextureMap;
			sampler2D _FlowMap;
			sampler2D _MaskMap;
			sampler2D _FoamTexture;


			float SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD(float2 uv)
			{
				#if defined(REQUIRE_DEPTH_TEXTURE)
				#if defined(UNITY_STEREO_INSTANCING_ENABLED) || defined(UNITY_STEREO_MULTIVIEW_ENABLED)
				 	float rawDepth = SAMPLE_TEXTURE2D_ARRAY_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, unity_StereoEyeIndex, 0).r;
				#else
				 	float rawDepth = SAMPLE_DEPTH_TEXTURE_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, 0);
				#endif
				return rawDepth;
				#endif // REQUIRE_DEPTH_TEXTURE
				return 0;
			}
			
			float2 voronoihash2_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float3 mod2D289( float3 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float2 mod2D289( float2 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float3 permute( float3 x ) { return mod2D289( ( ( x * 34.0 ) + 1.0 ) * x ); }
			float snoise( float2 v )
			{
				const float4 C = float4( 0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439 );
				float2 i = floor( v + dot( v, C.yy ) );
				float2 x0 = v - i + dot( i, C.xx );
				float2 i1;
				i1 = ( x0.x > x0.y ) ? float2( 1.0, 0.0 ) : float2( 0.0, 1.0 );
				float4 x12 = x0.xyxy + C.xxzz;
				x12.xy -= i1;
				i = mod2D289( i );
				float3 p = permute( permute( i.y + float3( 0.0, i1.y, 1.0 ) ) + i.x + float3( 0.0, i1.x, 1.0 ) );
				float3 m = max( 0.5 - float3( dot( x0, x0 ), dot( x12.xy, x12.xy ), dot( x12.zw, x12.zw ) ), 0.0 );
				m = m * m;
				m = m * m;
				float3 x = 2.0 * frac( p * C.www ) - 1.0;
				float3 h = abs( x ) - 0.5;
				float3 ox = floor( x + 0.5 );
				float3 a0 = x - ox;
				m *= 1.79284291400159 - 0.85373472095314 * ( a0 * a0 + h * h );
				float3 g;
				g.x = a0.x * x0.x + h.x * x0.y;
				g.yz = a0.yz * x12.xz + h.yz * x12.yw;
				return 130.0 * dot( m, g );
			}
			
			float2 voronoihash8_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			

			VertexOutput VertexFunction( VertexInput v  )
			{
				VertexOutput o = (VertexOutput)0;
				UNITY_SETUP_INSTANCE_ID( v );
				UNITY_TRANSFER_INSTANCE_ID( v, o );
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( o );

				float RF_Zero315 = 0.0;
				float3 temp_cast_0 = (RF_Zero315).xxx;
				float4 ase_clipPos = TransformObjectToHClip((v.positionOS).xyz);
				float4 screenPos = ComputeScreenPos(ase_clipPos);
				float4 ase_screenPosNorm = screenPos / screenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_3 );
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_6 );
				float3 temp_cast_7 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_7;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_7;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = v.ase_texcoord.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_8 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_8 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = v.ase_texcoord.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = v.ase_texcoord.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ), 0, 0.0) ).rgb , tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ), 0, 0.0) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_9 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_9 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_12 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = v.ase_texcoord.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_13 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_13 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_12;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_16 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_18 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = v.ase_texcoord.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_19 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_20 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_21 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_22 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_22;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2Dlod( _DeformNoiseTypeA, float4( UV20_g516, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_22;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = v.ase_texcoord.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_24 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_25 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_26 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_27 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_27;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_24;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_25;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_26;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2Dlod( _FoamTexture, float4( UV20_g786, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_27;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_28 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_28 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_32 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = v.ase_texcoord.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_35 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_36 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_37 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_38 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_38;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_35;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_36;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_37;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2Dlod( _WaveTypeA, float4( UV20_g790, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_38;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_39 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_39 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_43 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_45 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = v.ase_texcoord.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_46 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_47 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_48 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_49 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_49;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_46;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_47;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_48;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2Dlod( _DeformNoiseTypeB, float4( UV20_g512, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_49;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = v.ase_texcoord.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_51 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_52 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_53 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_54 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_54;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_51;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_52;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_53;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2Dlod( _WaveTypeB, float4( UV20_g540, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_54;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_55 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_55 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_58 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_58;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 linearToGamma1730 = FastLinearToSRGB( RF_SurfaceWave1466 );
				float3 linearToGamma1731 = FastLinearToSRGB( RF_FlowMask535 );
				float3 saferPower1714 = abs( ( 1.0 - linearToGamma1731 ) );
				float3 temp_cast_64 = (_EdgeWaveExponential).xxx;
				float3 RF_Vertex_Offset1726 = (( _Displacement )?( ( ( ( linearToGamma1730 * saturate( (pow( saferPower1714 , temp_cast_64 )*_EdgeWaveMultiplier + 0.0) ) ) * _WaveLength ) * v.normalOS ) ):( temp_cast_0 ));
				
				o.ase_texcoord2 = screenPos;
				
				o.ase_texcoord3.xy = v.ase_texcoord.xy;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord3.zw = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.positionOS.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif

				float3 vertexValue = RF_Vertex_Offset1726;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.positionOS.xyz = vertexValue;
				#else
					v.positionOS.xyz += vertexValue;
				#endif

				v.normalOS = v.normalOS;

				VertexPositionInputs vertexInput = GetVertexPositionInputs( v.positionOS.xyz );

				#if defined(ASE_NEEDS_FRAG_WORLD_POSITION)
					o.positionWS = vertexInput.positionWS;
				#endif

				#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR) && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					o.shadowCoord = GetShadowCoord( vertexInput );
				#endif

				o.positionCS = vertexInput.positionCS;

				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( VertexInput v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.positionOS;
				o.normalOS = v.normalOS;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
				return patch[id];
			}

			[domain("tri")]
			VertexOutput DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				VertexInput o = (VertexInput) 0;
				o.positionOS = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].vertex.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			VertexOutput vert ( VertexInput v )
			{
				return VertexFunction( v );
			}
			#endif

			half4 frag(VertexOutput IN  ) : SV_TARGET
			{
				UNITY_SETUP_INSTANCE_ID( IN );
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( IN );

				#if defined(ASE_NEEDS_FRAG_WORLD_POSITION)
					float3 WorldPosition = IN.positionWS;
				#endif

				float4 ShadowCoords = float4( 0, 0, 0, 0 );

				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR)
						ShadowCoords = IN.shadowCoord;
					#elif defined(MAIN_LIGHT_CALCULATE_SHADOWS)
						ShadowCoords = TransformWorldToShadowCoord( WorldPosition );
					#endif
				#endif

				float RF_Zero315 = 0.0;
				float3 temp_cast_0 = (RF_Zero315).xxx;
				float4 screenPos = IN.ase_texcoord2;
				float4 ase_screenPosNorm = screenPos / screenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_3 );
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_6 );
				float3 temp_cast_7 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_7;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_7;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = IN.ase_texcoord3.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_8 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_8 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = IN.ase_texcoord3.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = IN.ase_texcoord3.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ) ).rgb , tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_9 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_9 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_12 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = IN.ase_texcoord3.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_13 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_13 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_12;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_16 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_18 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = IN.ase_texcoord3.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_19 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_20 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_21 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_22 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_22;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2D( _DeformNoiseTypeA, UV20_g516 ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_22;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = IN.ase_texcoord3.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_24 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_25 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_26 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_27 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_27;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_24;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_25;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_26;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2D( _FoamTexture, UV20_g786 ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_27;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_28 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_28 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_32 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = IN.ase_texcoord3.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_35 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_36 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_37 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_38 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_38;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_35;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_36;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_37;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2D( _WaveTypeA, UV20_g790 ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_38;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_39 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_39 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_43 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_45 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = IN.ase_texcoord3.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_46 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_47 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_48 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_49 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_49;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_46;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_47;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_48;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2D( _DeformNoiseTypeB, UV20_g512 ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_49;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = IN.ase_texcoord3.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_51 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_52 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_53 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_54 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_54;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_51;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_52;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_53;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2D( _WaveTypeB, UV20_g540 ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_54;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_55 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_55 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_58 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_58;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_FinalSurface1629 = (( _SurfaceToggle )?( ( _SurfaceIntensity * linearToGamma1433 ) ):( temp_cast_0 ));
				
				float3 temp_cast_64 = (_Transparency).xxx;
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 RF_TransparentIntensity1436 = (( _TRSurfWaveToggle )?( ( _Transparency * RF_SurfaceWave1466 ) ):( temp_cast_64 ));
				

				float3 BaseColor = RF_FinalSurface1629;
				float Alpha = RF_TransparentIntensity1436.x;
				float AlphaClipThreshold = 0.5;

				half4 color = half4(BaseColor, Alpha );

				#ifdef _ALPHATEST_ON
					clip(Alpha - AlphaClipThreshold);
				#endif

				return color;
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "DepthNormals"
			Tags { "LightMode"="DepthNormals" }

			ZWrite On
			Blend One Zero
			ZTest LEqual
			ZWrite On

			HLSLPROGRAM

			

			

			#define _SPECULAR_SETUP 1
			#pragma multi_compile_instancing
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_FOG 1
			#define _ASE_LIGHTING_SIMPLE
			#define _SURFACE_TYPE_TRANSPARENT 1
			#define _NORMAL_DROPOFF_TS 1
			#define _EMISSION
			#define _NORMALMAP 1
			#define ASE_SRP_VERSION 140010
			#define REQUIRE_DEPTH_TEXTURE 1


			

			

			#pragma vertex vert
			#pragma fragment frag

			#if defined(_SPECULAR_SETUP) && defined(_ASE_LIGHTING_SIMPLE)
				#define _SPECULAR_COLOR 1
			#endif

			#define SHADERPASS SHADERPASS_DEPTHNORMALSONLY
			//#define SHADERPASS SHADERPASS_DEPTHNORMALS

			
            #if ASE_SRP_VERSION >=140007
			#include_with_pragmas "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DOTS.hlsl"
			#endif
		

			
			#if ASE_SRP_VERSION >=140007
			#include_with_pragmas "Packages/com.unity.render-pipelines.universal/ShaderLibrary/RenderingLayers.hlsl"
			#endif
		

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Input.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"

			
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRendering.hlsl"
           

			
            #if ASE_SRP_VERSION >=140009
			#include_with_pragmas "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRenderingKeywords.hlsl"
			#endif
		

			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/Editor/ShaderGraph/Includes/ShaderPass.hlsl"

			#if defined(LOD_FADE_CROSSFADE)
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/LODCrossFade.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_SCREEN_POSITION
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_VERT_TANGENT
			#pragma shader_feature_local _CAUSTICB_OCT_CAUSTIC1 _CAUSTICB_OCT_CAUSTIC2 _CAUSTICB_OCT_CAUSTIC3 _CAUSTICB_OCT_CAUSTIC4 _CAUSTICB_OCT_CAUSTIC5 _CAUSTICB_OCT_CAUSTIC6 _CAUSTICB_OCT_CAUSTIC7 _CAUSTICB_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEBTYPE_NONE _NOISEBTYPE_VORONOICELL _NOISEBTYPE_VORONOICAUSTIC _NOISEBTYPE_PERLIN _NOISEBTYPE_TEXTURE
			#pragma shader_feature_local _CELLB_OCT_CELL1 _CELLB_OCT_CELL2 _CELLB_OCT_CELL3 _CELLB_OCT_CELL4 _CELLB_OCT_CELL5 _CELLB_OCT_CELL6 _CELLB_OCT_CELL7 _CELLB_OCT_CELL8
			#pragma shader_feature_local _CELLA_OCT_CELL1 _CELLA_OCT_CELL2 _CELLA_OCT_CELL3 _CELLA_OCT_CELL4 _CELLA_OCT_CELL5 _CELLA_OCT_CELL6 _CELLA_OCT_CELL7 _CELLA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICA_OCT_CAUSTIC1 _CAUSTICA_OCT_CAUSTIC2 _CAUSTICA_OCT_CAUSTIC3 _CAUSTICA_OCT_CAUSTIC4 _CAUSTICA_OCT_CAUSTIC5 _CAUSTICA_OCT_CAUSTIC6 _CAUSTICA_OCT_CAUSTIC7 _CAUSTICA_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEATYPE_NONE _NOISEATYPE_VORONOICELL _NOISEATYPE_VORONOICAUSTIC _NOISEATYPE_PERLIN _NOISEATYPE_TEXTURE
			#pragma shader_feature_local _WAVEBTYPE_NONE _WAVEBTYPE_VORONOICELL _WAVEBTYPE_VORONOICAUSTIC _WAVEBTYPE_PERLIN _WAVEBTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICWAVEB_OCT_CAUSTIC1 _CAUSTICWAVEB_OCT_CAUSTIC2 _CAUSTICWAVEB_OCT_CAUSTIC3 _CAUSTICWAVEB_OCT_CAUSTIC4 _CAUSTICWAVEB_OCT_CAUSTIC5 _CAUSTICWAVEB_OCT_CAUSTIC6 _CAUSTICWAVEB_OCT_CAUSTIC7 _CAUSTICWAVEB_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLWAVEB_OCT_CELL1 _CELLWAVEB_OCT_CELL2 _CELLWAVEB_OCT_CELL3 _CELLWAVEB_OCT_CELL4 _CELLWAVEB_OCT_CELL5 _CELLWAVEB_OCT_CELL6 _CELLWAVEB_OCT_CELL7 _CELLWAVEB_OCT_CELL8
			#pragma shader_feature_local _WAVEAGRADETYPE_LINEAR _WAVEAGRADETYPE_NORMAL _WAVEAGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBGRADETYPE_LINEAR _WAVEBGRADETYPE_NORMAL _WAVEBGRADETYPE_GAMMA
			#pragma shader_feature_local _DEPTHGRADETYPE_LINEAR _DEPTHGRADETYPE_NORMAL _DEPTHGRADETYPE_GAMMA
			#pragma shader_feature_local _FLOWMAPTYPE_DEPTH _FLOWMAPTYPE_FLOWTEXTURE
			#pragma shader_feature_local _MASK_ON
			#pragma shader_feature_local _MASKGRADETYPE_LINEAR _MASKGRADETYPE_NORMAL _MASKGRADETYPE_GAMMA
			#pragma shader_feature_local _TXTGRADETYPE_LINEAR _TXTGRADETYPE_NORMAL _TXTGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBINVERT_ON
			#pragma shader_feature_local _WAVEAINVERT_ON
			#pragma shader_feature_local _SELECTWAVETYPE_LAYERA _SELECTWAVETYPE_LAYERB _SELECTWAVETYPE_MULTIPLY _SELECTWAVETYPE_ADD _SELECTWAVETYPE_SUBTRACT _SELECTWAVETYPE_DIVIDE _SELECTWAVETYPE_DOT _SELECTWAVETYPE_FMOD _SELECTWAVETYPE_FMODINVERT
			#pragma shader_feature_local _DFAGRADETYPE_LINEAR _DFAGRADETYPE_NORMAL _DFAGRADETYPE_GAMMA
			#pragma shader_feature_local _DFBGRADETYPE_LINEAR _DFBGRADETYPE_NORMAL _DFBGRADETYPE_GAMMA
			#pragma shader_feature_local _DFNOISEAINVERT_ON
			#pragma shader_feature_local _DFNOISEBINVERT_ON
			#pragma shader_feature_local _SELECTDEFORMTYPE_LAYERA _SELECTDEFORMTYPE_LAYERB _SELECTDEFORMTYPE_MULTIPLY _SELECTDEFORMTYPE_ADD _SELECTDEFORMTYPE_SUBTRACT _SELECTDEFORMTYPE_DIVIDE _SELECTDEFORMTYPE_DOT _SELECTDEFORMTYPE_FMOD _SELECTDEFORMTYPE_FMODINVERT
			#pragma shader_feature_local _FOAMTYPE_NONE _FOAMTYPE_VORONOICELL _FOAMTYPE_VORONOICAUSTIC _FOAMTYPE_PERLIN _FOAMTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICFOAM_OCT_CAUSTIC1 _CAUSTICFOAM_OCT_CAUSTIC2 _CAUSTICFOAM_OCT_CAUSTIC3 _CAUSTICFOAM_OCT_CAUSTIC4 _CAUSTICFOAM_OCT_CAUSTIC5 _CAUSTICFOAM_OCT_CAUSTIC6 _CAUSTICFOAM_OCT_CAUSTIC7 _CAUSTICFOAM_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLFOAM_OCT_CELL1 _CELLFOAM_OCT_CELL2 _CELLFOAM_OCT_CELL3 _CELLFOAM_OCT_CELL4 _CELLFOAM_OCT_CELL5 _CELLFOAM_OCT_CELL6 _CELLFOAM_OCT_CELL7 _CELLFOAM_OCT_CELL8
			#pragma shader_feature_local _CELLWAVEA_OCT_CELL1 _CELLWAVEA_OCT_CELL2 _CELLWAVEA_OCT_CELL3 _CELLWAVEA_OCT_CELL4 _CELLWAVEA_OCT_CELL5 _CELLWAVEA_OCT_CELL6 _CELLWAVEA_OCT_CELL7 _CELLWAVEA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICWAVEA_OCT_CAUSTIC1 _CAUSTICWAVEA_OCT_CAUSTIC2 _CAUSTICWAVEA_OCT_CAUSTIC3 _CAUSTICWAVEA_OCT_CAUSTIC4 _CAUSTICWAVEA_OCT_CAUSTIC5 _CAUSTICWAVEA_OCT_CAUSTIC6 _CAUSTICWAVEA_OCT_CAUSTIC7 _CAUSTICWAVEA_OCT_CAUSTIC8
			#pragma shader_feature_local _WAVEATYPE_NONE _WAVEATYPE_VORONOICELL _WAVEATYPE_VORONOICAUSTIC _WAVEATYPE_PERLIN _WAVEATYPE_TEXTURE
			#pragma shader_feature_local _FOAMINVERT_ON
			#pragma shader_feature_local _FOAMGRADETYPE_LINEAR _FOAMGRADETYPE_NORMAL _FOAMGRADETYPE_GAMMA


			#if defined(ASE_EARLY_Z_DEPTH_OPTIMIZE) && (SHADER_TARGET >= 45)
				#define ASE_SV_DEPTH SV_DepthLessEqual
				#define ASE_SV_POSITION_QUALIFIERS linear noperspective centroid
			#else
				#define ASE_SV_DEPTH SV_Depth
				#define ASE_SV_POSITION_QUALIFIERS
			#endif

			struct VertexInput
			{
				float4 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct VertexOutput
			{
				ASE_SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				float4 clipPosV : TEXCOORD0;
				float3 worldNormal : TEXCOORD1;
				float4 worldTangent : TEXCOORD2;
				#if defined(ASE_NEEDS_FRAG_WORLD_POSITION)
					float3 positionWS : TEXCOORD3;
				#endif
				#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR) && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					float4 shadowCoord : TEXCOORD4;
				#endif
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			CBUFFER_START(UnityPerMaterial)
			float4 _ReflectColor;
			float4 _MaskMap_ST;
			float4 _FogColor;
			float4 _MirrorRefColor;
			float3 _RefractColor;
			float3 _SpecularColor;
			float _FlowTextureAmplitude;
			float _FlowTextureExponential;
			float _FlowTextureContrast;
			float _MaskGradeAmplitude;
			float _MaskGradePower;
			float _ShoreIntensity;
			float _FoamIntensity;
			float _BVoronoiAngleSpeed;
			float _MapChangeSpeed;
			float _FoamVoronoiAngleSpeed;
			float _FoamVoronoiSmooth;
			float _FoamDeformToggle;
			float _DefWeightFoam;
			float _FoamTileX;
			float _FoamTileY;
			float _FoamOffsetX;
			float _FoamSpeedX;
			float _FoamNoiseScale;
			float _RotateB;
			float _BTileX;
			float _BTileY;
			float _ShoreBumpIntensity;
			float _NormalGradePower;
			float _NormalIntensity;
			float _foamFold;
			float _otherFold;
			float _Displacement;
			float _ShoreFoamToggle;
			float _DepthNegative;
			float _OffsetB;
			float _DepthDistance;
			float _DepthSize;
			float _MapExponential;
			float _InfluenceFlow;
			float _ATileX;
			float _ATileY;
			float _FlowSpeed;
			float _RotateA;
			float _FoamOverallSpeed;
			float _DepthExponential;
			float _FoamSpeedY;
			float _FoamAnchorY;
			float _FoamAnchorX;
			float _ScreenContrast;
			float _FogToggle;
			float _Reflect;
			float _CMReflect;
			float _ReflectionStrength;
			float _CubeMapRotate;
			float _CMXPos;
			float _CMYPos;
			float _CMZPos;
			float _ReflectionMultiplier;
			float _MirrorReflect;
			float _MirrorRefIntensity;
			float _FogDepthDistance;
			float _FogDepthExponential;
			float _FogDepthSize;
			float _Specular;
			float _Smoothness;
			float _RefractionToggle;
			float _NormalToggle;
			float _SSBluricTransparent;
			float _SurfaceIntensity;
			float _MiddleWaveBumpIntensity;
			float _FoamRotateSpeed;
			float _FoamRotate;
			float _FoamAmplitude;
			float _FoamExp;
			float _FoamContrast;
			float _MiddleFoamToggle;
			float _MiddleWaveIntensity;
			float _FoamOffsetY;
			float _MidFlowMask;
			float _DefWeightA;
			float _MidBDeformToggle;
			float _DefWeightB;
			float _EdgeWaveExponential;
			float _EdgeWaveMultiplier;
			float _WaveLength;
			float _VT_Intensity;
			float _SurfaceToggle;
			float _MidADeformToggle;
			float _TRSurfWaveToggle;
			float _PatternMultiplier;
			float _SSTileY;
			float _ANoiseScale;
			float _AVoronoiSmooth;
			float _AVoronoiAngleSpeed;
			float _NTypeARotate;
			float _WAVoronoiAngleSpeed;
			float _WAVoronoiSmooth;
			float _WANoiseScale;
			float _WTypeATileX;
			float _NTypeATileX;
			float _WTypeATileY;
			float _WTypeAOffsetY;
			float _WTypeASpeedX;
			float _WTypeASpeedY;
			float _WTypeAOverallSpeed;
			float _WTypeARotate;
			float _WTypeARotateSpeed;
			float _WTypeAAnchorX;
			float _WTypeAAnchorY;
			float _WTypeAOffsetX;
			float _NTypeATileY;
			float _NTypeAOffsetX;
			float _NTypeAOffsetY;
			float _BNoiseScale;
			float _NTypeBTileX;
			float _NTypeBTileY;
			float _NTypeBOffsetX;
			float _NTypeBOffsetY;
			float _NTypeBSpeedX;
			float _NTypeBSpeedY;
			float _NTypeBOverallSpeed;
			float _NTypeBAnchorX;
			float _NTypeBAnchorY;
			float _BVoronoiSmooth;
			float _NTypeBRotateSpeed;
			float _NTypeBRotate;
			float _NTypeAAnchorY;
			float _NTypeAAnchorX;
			float _NTypeARotateSpeed;
			float _NTypeAOverallSpeed;
			float _NTypeASpeedY;
			float _NTypeASpeedX;
			float _WBVoronoiAngleSpeed;
			float _WBVoronoiSmooth;
			float _WBNoiseScale;
			float _WTypeBTileX;
			float _dfNoiseBFold;
			float _dfNoiseAFold;
			float _DeformFold;
			float _CheckFlowMap;
			float _fMapFold;
			float _wAFold;
			float _CheckMidWave;
			float _DFBAmplitude;
			float _DFAAmplitude;
			float _DFBExp;
			float _DFAExp;
			float _NoiseAContrast;
			float _NoiseBContrast;
			float _NA_Intensity;
			float _NB_Intensity;
			float _wBFold;
			float _SSTxtInfo;
			float _SSSize;
			float _SSTileX;
			float _dMaskFold;
			float _PatternHeight;
			float _fMaskFold;
			float _CheckDef;
			float _WTypeBTileY;
			float _WTypeBOffsetX;
			float _WTypeBOffsetY;
			float _WTypeBSpeedX;
			float _WTypeBSpeedY;
			float _WTypeBOverallSpeed;
			float _WTypeBRotate;
			float _WTypeBRotateSpeed;
			float _WTypeBAnchorX;
			float _WTypeBAnchorY;
			float _WaveAAmplitude;
			float _WaveBAmplitude;
			float _WaveAExp;
			float _WaveBExp;
			float _MGradeAmplitude;
			float _WaveBContrast;
			float _WaveAContrast;
			float _WaveAIntensity;
			float _WaveBIntensity;
			float _fTxtFold;
			float _Transparency;
			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			CBUFFER_END

			#ifdef SCENEPICKINGPASS
				float4 _SelectionID;
			#endif

			#ifdef SCENESELECTIONPASS
				int _ObjectId;
				int _PassValue;
			#endif

			sampler2D _DeformNoiseTypeB;
			sampler2D _DeformNoiseTypeA;
			sampler2D _WaveTypeB;
			sampler2D _WaveTypeA;
			sampler2D _TextureMap;
			sampler2D _FlowMap;
			sampler2D _MaskMap;
			sampler2D _FoamTexture;
			sampler2D _BluricRefractionPattern;


			float SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD(float2 uv)
			{
				#if defined(REQUIRE_DEPTH_TEXTURE)
				#if defined(UNITY_STEREO_INSTANCING_ENABLED) || defined(UNITY_STEREO_MULTIVIEW_ENABLED)
				 	float rawDepth = SAMPLE_TEXTURE2D_ARRAY_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, unity_StereoEyeIndex, 0).r;
				#else
				 	float rawDepth = SAMPLE_DEPTH_TEXTURE_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, 0);
				#endif
				return rawDepth;
				#endif // REQUIRE_DEPTH_TEXTURE
				return 0;
			}
			
			float2 voronoihash2_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float3 mod2D289( float3 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float2 mod2D289( float2 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float3 permute( float3 x ) { return mod2D289( ( ( x * 34.0 ) + 1.0 ) * x ); }
			float snoise( float2 v )
			{
				const float4 C = float4( 0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439 );
				float2 i = floor( v + dot( v, C.yy ) );
				float2 x0 = v - i + dot( i, C.xx );
				float2 i1;
				i1 = ( x0.x > x0.y ) ? float2( 1.0, 0.0 ) : float2( 0.0, 1.0 );
				float4 x12 = x0.xyxy + C.xxzz;
				x12.xy -= i1;
				i = mod2D289( i );
				float3 p = permute( permute( i.y + float3( 0.0, i1.y, 1.0 ) ) + i.x + float3( 0.0, i1.x, 1.0 ) );
				float3 m = max( 0.5 - float3( dot( x0, x0 ), dot( x12.xy, x12.xy ), dot( x12.zw, x12.zw ) ), 0.0 );
				m = m * m;
				m = m * m;
				float3 x = 2.0 * frac( p * C.www ) - 1.0;
				float3 h = abs( x ) - 0.5;
				float3 ox = floor( x + 0.5 );
				float3 a0 = x - ox;
				m *= 1.79284291400159 - 0.85373472095314 * ( a0 * a0 + h * h );
				float3 g;
				g.x = a0.x * x0.x + h.x * x0.y;
				g.yz = a0.yz * x12.xz + h.yz * x12.yw;
				return 130.0 * dot( m, g );
			}
			
			float2 voronoihash8_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float3 PerturbNormal107_g1( float3 surf_pos, float3 surf_norm, float height, float scale )
			{
				// "Bump Mapping Unparametrized Surfaces on the GPU" by Morten S. Mikkelsen
				float3 vSigmaS = ddx( surf_pos );
				float3 vSigmaT = ddy( surf_pos );
				float3 vN = surf_norm;
				float3 vR1 = cross( vSigmaT , vN );
				float3 vR2 = cross( vN , vSigmaS );
				float fDet = dot( vSigmaS , vR1 );
				float dBs = ddx( height );
				float dBt = ddy( height );
				float3 vSurfGrad = scale * 0.05 * sign( fDet ) * ( dBs * vR1 + dBt * vR2 );
				return normalize ( abs( fDet ) * vN - vSurfGrad );
			}
			

			VertexOutput VertexFunction( VertexInput v  )
			{
				VertexOutput o = (VertexOutput)0;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				float RF_Zero315 = 0.0;
				float3 temp_cast_0 = (RF_Zero315).xxx;
				float4 ase_clipPos = TransformObjectToHClip((v.positionOS).xyz);
				float4 screenPos = ComputeScreenPos(ase_clipPos);
				float4 ase_screenPosNorm = screenPos / screenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_3 );
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_6 );
				float3 temp_cast_7 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_7;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_7;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = v.ase_texcoord.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_8 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_8 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = v.ase_texcoord.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = v.ase_texcoord.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ), 0, 0.0) ).rgb , tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ), 0, 0.0) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_9 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_9 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_12 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = v.ase_texcoord.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_13 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_13 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_12;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_16 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_18 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = v.ase_texcoord.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_19 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_20 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_21 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_22 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_22;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2Dlod( _DeformNoiseTypeA, float4( UV20_g516, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_22;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = v.ase_texcoord.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_24 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_25 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_26 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_27 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_27;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_24;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_25;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_26;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2Dlod( _FoamTexture, float4( UV20_g786, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_27;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_28 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_28 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_32 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = v.ase_texcoord.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_35 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_36 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_37 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_38 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_38;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_35;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_36;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_37;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2Dlod( _WaveTypeA, float4( UV20_g790, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_38;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_39 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_39 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_43 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_45 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = v.ase_texcoord.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_46 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_47 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_48 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_49 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_49;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_46;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_47;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_48;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2Dlod( _DeformNoiseTypeB, float4( UV20_g512, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_49;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = v.ase_texcoord.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_51 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_52 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_53 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_54 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_54;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_51;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_52;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_53;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2Dlod( _WaveTypeB, float4( UV20_g540, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_54;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_55 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_55 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_58 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_58;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 linearToGamma1730 = FastLinearToSRGB( RF_SurfaceWave1466 );
				float3 linearToGamma1731 = FastLinearToSRGB( RF_FlowMask535 );
				float3 saferPower1714 = abs( ( 1.0 - linearToGamma1731 ) );
				float3 temp_cast_64 = (_EdgeWaveExponential).xxx;
				float3 RF_Vertex_Offset1726 = (( _Displacement )?( ( ( ( linearToGamma1730 * saturate( (pow( saferPower1714 , temp_cast_64 )*_EdgeWaveMultiplier + 0.0) ) ) * _WaveLength ) * v.normalOS ) ):( temp_cast_0 ));
				
				float4 RF_VertexTangent1706 = ( _VT_Intensity * v.positionOS );
				
				float3 ase_worldNormal = TransformObjectToWorldNormal(v.normalOS);
				float3 ase_worldTangent = TransformObjectToWorldDir(v.tangentOS.xyz);
				float ase_vertexTangentSign = v.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				o.ase_texcoord6.xyz = ase_worldBitangent;
				
				o.ase_texcoord5.xy = v.ase_texcoord.xy;
				o.ase_texcoord7 = v.positionOS;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord5.zw = 0;
				o.ase_texcoord6.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.positionOS.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif

				float3 vertexValue = RF_Vertex_Offset1726;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.positionOS.xyz = vertexValue;
				#else
					v.positionOS.xyz += vertexValue;
				#endif

				v.normalOS = v.normalOS;
				v.tangentOS = RF_VertexTangent1706;

				VertexPositionInputs vertexInput = GetVertexPositionInputs( v.positionOS.xyz );

				float3 normalWS = TransformObjectToWorldNormal( v.normalOS );
				float4 tangentWS = float4( TransformObjectToWorldDir( v.tangentOS.xyz ), v.tangentOS.w );

				#if defined(ASE_NEEDS_FRAG_WORLD_POSITION)
					o.positionWS = vertexInput.positionWS;
				#endif

				o.worldNormal = normalWS;
				o.worldTangent = tangentWS;

				#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR) && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					o.shadowCoord = GetShadowCoord( vertexInput );
				#endif

				o.positionCS = vertexInput.positionCS;
				o.clipPosV = vertexInput.positionCS;
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( VertexInput v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
				return patch[id];
			}

			[domain("tri")]
			VertexOutput DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				VertexInput o = (VertexInput) 0;
				o.positionOS = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].vertex.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			VertexOutput vert ( VertexInput v )
			{
				return VertexFunction( v );
			}
			#endif

			void frag(	VertexOutput IN
						, out half4 outNormalWS : SV_Target0
						#ifdef ASE_DEPTH_WRITE_ON
						,out float outputDepth : ASE_SV_DEPTH
						#endif
						#ifdef _WRITE_RENDERING_LAYERS
						, out float4 outRenderingLayers : SV_Target1
						#endif
						 )
			{
				UNITY_SETUP_INSTANCE_ID(IN);
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( IN );

				#if defined(ASE_NEEDS_FRAG_WORLD_POSITION)
					float3 WorldPosition = IN.positionWS;
				#endif

				float4 ShadowCoords = float4( 0, 0, 0, 0 );
				float3 WorldNormal = IN.worldNormal;
				float4 WorldTangent = IN.worldTangent;

				float4 ClipPos = IN.clipPosV;
				float4 ScreenPos = ComputeScreenPos( IN.clipPosV );

				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR)
						ShadowCoords = IN.shadowCoord;
					#elif defined(MAIN_LIGHT_CALCULATE_SHADOWS)
						ShadowCoords = TransformWorldToShadowCoord( WorldPosition );
					#endif
				#endif

				float2 temp_output_1_0_g780 = float2( 0,0 );
				float dotResult4_g780 = dot( temp_output_1_0_g780 , temp_output_1_0_g780 );
				float3 appendResult10_g780 = (float3((temp_output_1_0_g780).x , (temp_output_1_0_g780).y , sqrt( ( 1.0 - saturate( dotResult4_g780 ) ) )));
				float3 normalizeResult12_g780 = normalize( appendResult10_g780 );
				float3 surf_pos107_g1 = WorldPosition;
				float3 surf_norm107_g1 = WorldNormal;
				float4 ase_screenPosNorm = ScreenPos / ScreenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_1 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_2 );
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_5 );
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_6;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_6;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = IN.ase_texcoord5.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_7 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_7 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = IN.ase_texcoord5.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = IN.ase_texcoord5.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ) ).rgb , tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_8 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_8 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_11 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = IN.ase_texcoord5.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_12 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_12 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_12 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_12 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_11;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_15 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_17 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = IN.ase_texcoord5.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_18 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_19 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_20 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_21 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_18;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2D( _DeformNoiseTypeA, UV20_g516 ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_21;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = IN.ase_texcoord5.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_23 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_24 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_25 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_26 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_26;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_23;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_24;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_25;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2D( _WaveTypeA, UV20_g790 ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_26;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_27 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_27 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_31 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_33 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = IN.ase_texcoord5.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_34 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_35 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_36 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_37 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_37;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_34;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_35;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_36;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2D( _DeformNoiseTypeB, UV20_g512 ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_37;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = IN.ase_texcoord5.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_39 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_40 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_41 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_42 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_42;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_39;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_40;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_41;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2D( _WaveTypeB, UV20_g540 ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_42;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_43 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_43 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_46 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_46;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float3 linearToGamma1508 = LinearToGamma22( saturate( ( float4( ( RF_FlowMap536 * _ShoreBumpIntensity ) , 0.0 ) + ( _MiddleWaveBumpIntensity * RF_MidWave1281 ) ) ).xyz );
				float3 temp_cast_50 = ((0.01 + (_NormalGradePower - 0.0) * (2.0 - 0.01) / (2.0 - 0.0))).xxx;
				float height107_g1 = pow( linearToGamma1508 , temp_cast_50 ).x;
				float scale107_g1 = _NormalIntensity;
				float3 localPerturbNormal107_g1 = PerturbNormal107_g1( surf_pos107_g1 , surf_norm107_g1 , height107_g1 , scale107_g1 );
				float3 ase_worldBitangent = IN.ase_texcoord6.xyz;
				float3x3 ase_worldToTangent = float3x3(WorldTangent.xyz,ase_worldBitangent,WorldNormal);
				float3 worldToTangentDir42_g1 = mul( ase_worldToTangent, localPerturbNormal107_g1);
				float2 appendResult1488 = (float2(_SSTileX , _SSTileY));
				float4 unityObjectToClipPos1477 = TransformWorldToHClip(TransformObjectToWorld(IN.ase_texcoord7.xyz));
				float4 computeScreenPos1478 = ComputeScreenPos( unityObjectToClipPos1477 );
				float2 break1493 = ( appendResult1488 * (computeScreenPos1478).xy );
				float temp_output_1492_0 = (computeScreenPos1478).w;
				float4 appendResult1494 = (float4(break1493.x , break1493.y , (computeScreenPos1478).z , temp_output_1492_0));
				float3 unpack1485 = UnpackNormalScale( tex2D( _BluricRefractionPattern, ( ( appendResult1494 / temp_output_1492_0 ) * _SSSize ).xy ), ( (-0.1 + (_PatternHeight - -1.0) * (0.1 - -0.1) / (1.0 - -1.0)) * _PatternMultiplier ) );
				unpack1485.z = lerp( 1, unpack1485.z, saturate(( (-0.1 + (_PatternHeight - -1.0) * (0.1 - -0.1) / (1.0 - -1.0)) * _PatternMultiplier )) );
				float3 RF_BumpForSmooth1486 = unpack1485;
				float3 RF_NewObjectNormal1230 = (( _SSBluricTransparent )?( BlendNormalRNM( (( _NormalToggle )?( worldToTangentDir42_g1 ):( normalizeResult12_g780 )) , RF_BumpForSmooth1486 ) ):( (( _NormalToggle )?( worldToTangentDir42_g1 ):( normalizeResult12_g780 )) ));
				
				float3 temp_cast_54 = (_Transparency).xxx;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_57 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = IN.ase_texcoord5.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_60 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_61 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_62 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_63 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_63;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_60;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_61;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_62;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2D( _FoamTexture, UV20_g786 ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_63;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_64 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_64 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 RF_TransparentIntensity1436 = (( _TRSurfWaveToggle )?( ( _Transparency * RF_SurfaceWave1466 ) ):( temp_cast_54 ));
				

				float3 Normal = RF_NewObjectNormal1230;
				float Alpha = RF_TransparentIntensity1436.x;
				float AlphaClipThreshold = 0.5;

				#ifdef ASE_DEPTH_WRITE_ON
					float DepthValue = IN.positionCS.z;
				#endif

				#ifdef _ALPHATEST_ON
					clip(Alpha - AlphaClipThreshold);
				#endif

				#if defined(LOD_FADE_CROSSFADE)
					LODFadeCrossFade( IN.positionCS );
				#endif

				#ifdef ASE_DEPTH_WRITE_ON
					outputDepth = DepthValue;
				#endif

				#if defined(_GBUFFER_NORMALS_OCT)
					float2 octNormalWS = PackNormalOctQuadEncode(WorldNormal);
					float2 remappedOctNormalWS = saturate(octNormalWS * 0.5 + 0.5);
					half3 packedNormalWS = PackFloat2To888(remappedOctNormalWS);
					outNormalWS = half4(packedNormalWS, 0.0);
				#else
					#if defined(_NORMALMAP)
						#if _NORMAL_DROPOFF_TS
							float crossSign = (WorldTangent.w > 0.0 ? 1.0 : -1.0) * GetOddNegativeScale();
							float3 bitangent = crossSign * cross(WorldNormal.xyz, WorldTangent.xyz);
							float3 normalWS = TransformTangentToWorld(Normal, half3x3(WorldTangent.xyz, bitangent, WorldNormal.xyz));
						#elif _NORMAL_DROPOFF_OS
							float3 normalWS = TransformObjectToWorldNormal(Normal);
						#elif _NORMAL_DROPOFF_WS
							float3 normalWS = Normal;
						#endif
					#else
						float3 normalWS = WorldNormal;
					#endif
					outNormalWS = half4(NormalizeNormalPerPixel(normalWS), 0.0);
				#endif

				#ifdef _WRITE_RENDERING_LAYERS
					uint renderingLayers = GetMeshRenderingLayer();
					outRenderingLayers = float4( EncodeMeshRenderingLayer( renderingLayers ), 0, 0, 0 );
				#endif
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "GBuffer"
			Tags { "LightMode"="UniversalGBuffer" }

			Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha
			ZWrite Off
			ZTest LEqual
			Offset 0 , 0
			ColorMask RGBA
			

			HLSLPROGRAM

			

			#define _SPECULAR_SETUP 1
			#pragma shader_feature_local_fragment _SPECULARHIGHLIGHTS_OFF
			#pragma shader_feature_local_fragment _ENVIRONMENTREFLECTIONS_OFF
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _ASE_LIGHTING_SIMPLE
			#define _SURFACE_TYPE_TRANSPARENT 1
			#pragma shader_feature_local _RECEIVE_SHADOWS_OFF
			#define _NORMAL_DROPOFF_TS 1
			#define _EMISSION
			#define _NORMALMAP 1
			#define ASE_SRP_VERSION 140010
			#define REQUIRE_DEPTH_TEXTURE 1
			#define REQUIRE_OPAQUE_TEXTURE 1


			

			#pragma multi_compile _ _MAIN_LIGHT_SHADOWS _MAIN_LIGHT_SHADOWS_CASCADE _MAIN_LIGHT_SHADOWS_SCREEN
			#pragma multi_compile_fragment _ _REFLECTION_PROBE_BLENDING
			#pragma multi_compile_fragment _ _REFLECTION_PROBE_BOX_PROJECTION

			

			
			#pragma multi_compile_fragment _ _SHADOWS_SOFT _SHADOWS_SOFT_LOW _SHADOWS_SOFT_MEDIUM _SHADOWS_SOFT_HIGH
           

			#pragma multi_compile_fragment _ _DBUFFER_MRT1 _DBUFFER_MRT2 _DBUFFER_MRT3
			#pragma multi_compile_fragment _ _GBUFFER_NORMALS_OCT
			#pragma multi_compile_fragment _ _RENDER_PASS_ENABLED
      
			

			#pragma multi_compile _ LIGHTMAP_SHADOW_MIXING
			#pragma multi_compile _ _MIXED_LIGHTING_SUBTRACTIVE
			#pragma multi_compile _ SHADOWS_SHADOWMASK
			#pragma multi_compile _ DIRLIGHTMAP_COMBINED
			#pragma multi_compile _ LIGHTMAP_ON
			#pragma multi_compile _ DYNAMICLIGHTMAP_ON
			#pragma multi_compile_fragment _ DEBUG_DISPLAY

			#pragma vertex vert
			#pragma fragment frag

			#if defined(_SPECULAR_SETUP) && defined(_ASE_LIGHTING_SIMPLE)
				#define _SPECULAR_COLOR 1
			#endif

			#define SHADERPASS SHADERPASS_GBUFFER

			
            #if ASE_SRP_VERSION >=140007
			#include_with_pragmas "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DOTS.hlsl"
			#endif
		

			
			#if ASE_SRP_VERSION >=140007
			#include_with_pragmas "Packages/com.unity.render-pipelines.universal/ShaderLibrary/RenderingLayers.hlsl"
			#endif
		

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Input.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"

			
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRendering.hlsl"
           

			
            #if ASE_SRP_VERSION >=140009
			#include_with_pragmas "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRenderingKeywords.hlsl"
			#endif
		

			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Shadows.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DBuffer.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/Editor/ShaderGraph/Includes/ShaderPass.hlsl"

			#if defined(LOD_FADE_CROSSFADE)
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/LODCrossFade.hlsl"
            #endif
			
			#if defined(UNITY_INSTANCING_ENABLED) && defined(_TERRAIN_INSTANCED_PERPIXEL_NORMAL)
				#define ENABLE_TERRAIN_PERPIXEL_NORMAL
			#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_FRAG_SCREEN_POSITION
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_WORLD_VIEW_DIR
			#pragma shader_feature_local _CAUSTICB_OCT_CAUSTIC1 _CAUSTICB_OCT_CAUSTIC2 _CAUSTICB_OCT_CAUSTIC3 _CAUSTICB_OCT_CAUSTIC4 _CAUSTICB_OCT_CAUSTIC5 _CAUSTICB_OCT_CAUSTIC6 _CAUSTICB_OCT_CAUSTIC7 _CAUSTICB_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEBTYPE_NONE _NOISEBTYPE_VORONOICELL _NOISEBTYPE_VORONOICAUSTIC _NOISEBTYPE_PERLIN _NOISEBTYPE_TEXTURE
			#pragma shader_feature_local _CELLB_OCT_CELL1 _CELLB_OCT_CELL2 _CELLB_OCT_CELL3 _CELLB_OCT_CELL4 _CELLB_OCT_CELL5 _CELLB_OCT_CELL6 _CELLB_OCT_CELL7 _CELLB_OCT_CELL8
			#pragma shader_feature_local _CELLA_OCT_CELL1 _CELLA_OCT_CELL2 _CELLA_OCT_CELL3 _CELLA_OCT_CELL4 _CELLA_OCT_CELL5 _CELLA_OCT_CELL6 _CELLA_OCT_CELL7 _CELLA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICA_OCT_CAUSTIC1 _CAUSTICA_OCT_CAUSTIC2 _CAUSTICA_OCT_CAUSTIC3 _CAUSTICA_OCT_CAUSTIC4 _CAUSTICA_OCT_CAUSTIC5 _CAUSTICA_OCT_CAUSTIC6 _CAUSTICA_OCT_CAUSTIC7 _CAUSTICA_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEATYPE_NONE _NOISEATYPE_VORONOICELL _NOISEATYPE_VORONOICAUSTIC _NOISEATYPE_PERLIN _NOISEATYPE_TEXTURE
			#pragma shader_feature_local _WAVEBTYPE_NONE _WAVEBTYPE_VORONOICELL _WAVEBTYPE_VORONOICAUSTIC _WAVEBTYPE_PERLIN _WAVEBTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICWAVEB_OCT_CAUSTIC1 _CAUSTICWAVEB_OCT_CAUSTIC2 _CAUSTICWAVEB_OCT_CAUSTIC3 _CAUSTICWAVEB_OCT_CAUSTIC4 _CAUSTICWAVEB_OCT_CAUSTIC5 _CAUSTICWAVEB_OCT_CAUSTIC6 _CAUSTICWAVEB_OCT_CAUSTIC7 _CAUSTICWAVEB_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLWAVEB_OCT_CELL1 _CELLWAVEB_OCT_CELL2 _CELLWAVEB_OCT_CELL3 _CELLWAVEB_OCT_CELL4 _CELLWAVEB_OCT_CELL5 _CELLWAVEB_OCT_CELL6 _CELLWAVEB_OCT_CELL7 _CELLWAVEB_OCT_CELL8
			#pragma shader_feature_local _WAVEAGRADETYPE_LINEAR _WAVEAGRADETYPE_NORMAL _WAVEAGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBGRADETYPE_LINEAR _WAVEBGRADETYPE_NORMAL _WAVEBGRADETYPE_GAMMA
			#pragma shader_feature_local _DEPTHGRADETYPE_LINEAR _DEPTHGRADETYPE_NORMAL _DEPTHGRADETYPE_GAMMA
			#pragma shader_feature_local _FLOWMAPTYPE_DEPTH _FLOWMAPTYPE_FLOWTEXTURE
			#pragma shader_feature_local _MASK_ON
			#pragma shader_feature_local _MASKGRADETYPE_LINEAR _MASKGRADETYPE_NORMAL _MASKGRADETYPE_GAMMA
			#pragma shader_feature_local _TXTGRADETYPE_LINEAR _TXTGRADETYPE_NORMAL _TXTGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBINVERT_ON
			#pragma shader_feature_local _WAVEAINVERT_ON
			#pragma shader_feature_local _SELECTWAVETYPE_LAYERA _SELECTWAVETYPE_LAYERB _SELECTWAVETYPE_MULTIPLY _SELECTWAVETYPE_ADD _SELECTWAVETYPE_SUBTRACT _SELECTWAVETYPE_DIVIDE _SELECTWAVETYPE_DOT _SELECTWAVETYPE_FMOD _SELECTWAVETYPE_FMODINVERT
			#pragma shader_feature_local _DFAGRADETYPE_LINEAR _DFAGRADETYPE_NORMAL _DFAGRADETYPE_GAMMA
			#pragma shader_feature_local _DFBGRADETYPE_LINEAR _DFBGRADETYPE_NORMAL _DFBGRADETYPE_GAMMA
			#pragma shader_feature_local _DFNOISEAINVERT_ON
			#pragma shader_feature_local _DFNOISEBINVERT_ON
			#pragma shader_feature_local _SELECTDEFORMTYPE_LAYERA _SELECTDEFORMTYPE_LAYERB _SELECTDEFORMTYPE_MULTIPLY _SELECTDEFORMTYPE_ADD _SELECTDEFORMTYPE_SUBTRACT _SELECTDEFORMTYPE_DIVIDE _SELECTDEFORMTYPE_DOT _SELECTDEFORMTYPE_FMOD _SELECTDEFORMTYPE_FMODINVERT
			#pragma shader_feature_local _FOAMTYPE_NONE _FOAMTYPE_VORONOICELL _FOAMTYPE_VORONOICAUSTIC _FOAMTYPE_PERLIN _FOAMTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICFOAM_OCT_CAUSTIC1 _CAUSTICFOAM_OCT_CAUSTIC2 _CAUSTICFOAM_OCT_CAUSTIC3 _CAUSTICFOAM_OCT_CAUSTIC4 _CAUSTICFOAM_OCT_CAUSTIC5 _CAUSTICFOAM_OCT_CAUSTIC6 _CAUSTICFOAM_OCT_CAUSTIC7 _CAUSTICFOAM_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLFOAM_OCT_CELL1 _CELLFOAM_OCT_CELL2 _CELLFOAM_OCT_CELL3 _CELLFOAM_OCT_CELL4 _CELLFOAM_OCT_CELL5 _CELLFOAM_OCT_CELL6 _CELLFOAM_OCT_CELL7 _CELLFOAM_OCT_CELL8
			#pragma shader_feature_local _CELLWAVEA_OCT_CELL1 _CELLWAVEA_OCT_CELL2 _CELLWAVEA_OCT_CELL3 _CELLWAVEA_OCT_CELL4 _CELLWAVEA_OCT_CELL5 _CELLWAVEA_OCT_CELL6 _CELLWAVEA_OCT_CELL7 _CELLWAVEA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICWAVEA_OCT_CAUSTIC1 _CAUSTICWAVEA_OCT_CAUSTIC2 _CAUSTICWAVEA_OCT_CAUSTIC3 _CAUSTICWAVEA_OCT_CAUSTIC4 _CAUSTICWAVEA_OCT_CAUSTIC5 _CAUSTICWAVEA_OCT_CAUSTIC6 _CAUSTICWAVEA_OCT_CAUSTIC7 _CAUSTICWAVEA_OCT_CAUSTIC8
			#pragma shader_feature_local _WAVEATYPE_NONE _WAVEATYPE_VORONOICELL _WAVEATYPE_VORONOICAUSTIC _WAVEATYPE_PERLIN _WAVEATYPE_TEXTURE
			#pragma shader_feature_local _FOAMINVERT_ON
			#pragma shader_feature_local _FOAMGRADETYPE_LINEAR _FOAMGRADETYPE_NORMAL _FOAMGRADETYPE_GAMMA
			#pragma shader_feature_local _FOGDEPTHGRADETYPE_LINEAR _FOGDEPTHGRADETYPE_NORMAL _FOGDEPTHGRADETYPE_GAMMA


			#if defined(ASE_EARLY_Z_DEPTH_OPTIMIZE) && (SHADER_TARGET >= 45)
				#define ASE_SV_DEPTH SV_DepthLessEqual
				#define ASE_SV_POSITION_QUALIFIERS linear noperspective centroid
			#else
				#define ASE_SV_DEPTH SV_Depth
				#define ASE_SV_POSITION_QUALIFIERS
			#endif

			struct VertexInput
			{
				float4 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 texcoord : TEXCOORD0;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct VertexOutput
			{
				ASE_SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				float4 clipPosV : TEXCOORD0;
				float4 lightmapUVOrVertexSH : TEXCOORD1;
				half4 fogFactorAndVertexLight : TEXCOORD2;
				float4 tSpace0 : TEXCOORD3;
				float4 tSpace1 : TEXCOORD4;
				float4 tSpace2 : TEXCOORD5;
				#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR)
				float4 shadowCoord : TEXCOORD6;
				#endif
				#if defined(DYNAMICLIGHTMAP_ON)
				float2 dynamicLightmapUV : TEXCOORD7;
				#endif
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			CBUFFER_START(UnityPerMaterial)
			float4 _ReflectColor;
			float4 _MaskMap_ST;
			float4 _FogColor;
			float4 _MirrorRefColor;
			float3 _RefractColor;
			float3 _SpecularColor;
			float _FlowTextureAmplitude;
			float _FlowTextureExponential;
			float _FlowTextureContrast;
			float _MaskGradeAmplitude;
			float _MaskGradePower;
			float _ShoreIntensity;
			float _FoamIntensity;
			float _BVoronoiAngleSpeed;
			float _MapChangeSpeed;
			float _FoamVoronoiAngleSpeed;
			float _FoamVoronoiSmooth;
			float _FoamDeformToggle;
			float _DefWeightFoam;
			float _FoamTileX;
			float _FoamTileY;
			float _FoamOffsetX;
			float _FoamSpeedX;
			float _FoamNoiseScale;
			float _RotateB;
			float _BTileX;
			float _BTileY;
			float _ShoreBumpIntensity;
			float _NormalGradePower;
			float _NormalIntensity;
			float _foamFold;
			float _otherFold;
			float _Displacement;
			float _ShoreFoamToggle;
			float _DepthNegative;
			float _OffsetB;
			float _DepthDistance;
			float _DepthSize;
			float _MapExponential;
			float _InfluenceFlow;
			float _ATileX;
			float _ATileY;
			float _FlowSpeed;
			float _RotateA;
			float _FoamOverallSpeed;
			float _DepthExponential;
			float _FoamSpeedY;
			float _FoamAnchorY;
			float _FoamAnchorX;
			float _ScreenContrast;
			float _FogToggle;
			float _Reflect;
			float _CMReflect;
			float _ReflectionStrength;
			float _CubeMapRotate;
			float _CMXPos;
			float _CMYPos;
			float _CMZPos;
			float _ReflectionMultiplier;
			float _MirrorReflect;
			float _MirrorRefIntensity;
			float _FogDepthDistance;
			float _FogDepthExponential;
			float _FogDepthSize;
			float _Specular;
			float _Smoothness;
			float _RefractionToggle;
			float _NormalToggle;
			float _SSBluricTransparent;
			float _SurfaceIntensity;
			float _MiddleWaveBumpIntensity;
			float _FoamRotateSpeed;
			float _FoamRotate;
			float _FoamAmplitude;
			float _FoamExp;
			float _FoamContrast;
			float _MiddleFoamToggle;
			float _MiddleWaveIntensity;
			float _FoamOffsetY;
			float _MidFlowMask;
			float _DefWeightA;
			float _MidBDeformToggle;
			float _DefWeightB;
			float _EdgeWaveExponential;
			float _EdgeWaveMultiplier;
			float _WaveLength;
			float _VT_Intensity;
			float _SurfaceToggle;
			float _MidADeformToggle;
			float _TRSurfWaveToggle;
			float _PatternMultiplier;
			float _SSTileY;
			float _ANoiseScale;
			float _AVoronoiSmooth;
			float _AVoronoiAngleSpeed;
			float _NTypeARotate;
			float _WAVoronoiAngleSpeed;
			float _WAVoronoiSmooth;
			float _WANoiseScale;
			float _WTypeATileX;
			float _NTypeATileX;
			float _WTypeATileY;
			float _WTypeAOffsetY;
			float _WTypeASpeedX;
			float _WTypeASpeedY;
			float _WTypeAOverallSpeed;
			float _WTypeARotate;
			float _WTypeARotateSpeed;
			float _WTypeAAnchorX;
			float _WTypeAAnchorY;
			float _WTypeAOffsetX;
			float _NTypeATileY;
			float _NTypeAOffsetX;
			float _NTypeAOffsetY;
			float _BNoiseScale;
			float _NTypeBTileX;
			float _NTypeBTileY;
			float _NTypeBOffsetX;
			float _NTypeBOffsetY;
			float _NTypeBSpeedX;
			float _NTypeBSpeedY;
			float _NTypeBOverallSpeed;
			float _NTypeBAnchorX;
			float _NTypeBAnchorY;
			float _BVoronoiSmooth;
			float _NTypeBRotateSpeed;
			float _NTypeBRotate;
			float _NTypeAAnchorY;
			float _NTypeAAnchorX;
			float _NTypeARotateSpeed;
			float _NTypeAOverallSpeed;
			float _NTypeASpeedY;
			float _NTypeASpeedX;
			float _WBVoronoiAngleSpeed;
			float _WBVoronoiSmooth;
			float _WBNoiseScale;
			float _WTypeBTileX;
			float _dfNoiseBFold;
			float _dfNoiseAFold;
			float _DeformFold;
			float _CheckFlowMap;
			float _fMapFold;
			float _wAFold;
			float _CheckMidWave;
			float _DFBAmplitude;
			float _DFAAmplitude;
			float _DFBExp;
			float _DFAExp;
			float _NoiseAContrast;
			float _NoiseBContrast;
			float _NA_Intensity;
			float _NB_Intensity;
			float _wBFold;
			float _SSTxtInfo;
			float _SSSize;
			float _SSTileX;
			float _dMaskFold;
			float _PatternHeight;
			float _fMaskFold;
			float _CheckDef;
			float _WTypeBTileY;
			float _WTypeBOffsetX;
			float _WTypeBOffsetY;
			float _WTypeBSpeedX;
			float _WTypeBSpeedY;
			float _WTypeBOverallSpeed;
			float _WTypeBRotate;
			float _WTypeBRotateSpeed;
			float _WTypeBAnchorX;
			float _WTypeBAnchorY;
			float _WaveAAmplitude;
			float _WaveBAmplitude;
			float _WaveAExp;
			float _WaveBExp;
			float _MGradeAmplitude;
			float _WaveBContrast;
			float _WaveAContrast;
			float _WaveAIntensity;
			float _WaveBIntensity;
			float _fTxtFold;
			float _Transparency;
			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			CBUFFER_END

			#ifdef SCENEPICKINGPASS
				float4 _SelectionID;
			#endif

			#ifdef SCENESELECTIONPASS
				int _ObjectId;
				int _PassValue;
			#endif

			sampler2D _DeformNoiseTypeB;
			sampler2D _DeformNoiseTypeA;
			sampler2D _WaveTypeB;
			sampler2D _WaveTypeA;
			sampler2D _TextureMap;
			sampler2D _FlowMap;
			sampler2D _MaskMap;
			sampler2D _FoamTexture;
			sampler2D _BluricRefractionPattern;
			samplerCUBE _ReflectMap;
			sampler2D _ReflectionMap;


			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/UnityGBuffer.hlsl"

			float SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD(float2 uv)
			{
				#if defined(REQUIRE_DEPTH_TEXTURE)
				#if defined(UNITY_STEREO_INSTANCING_ENABLED) || defined(UNITY_STEREO_MULTIVIEW_ENABLED)
				 	float rawDepth = SAMPLE_TEXTURE2D_ARRAY_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, unity_StereoEyeIndex, 0).r;
				#else
				 	float rawDepth = SAMPLE_DEPTH_TEXTURE_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, 0);
				#endif
				return rawDepth;
				#endif // REQUIRE_DEPTH_TEXTURE
				return 0;
			}
			
			float2 voronoihash2_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float3 mod2D289( float3 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float2 mod2D289( float2 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float3 permute( float3 x ) { return mod2D289( ( ( x * 34.0 ) + 1.0 ) * x ); }
			float snoise( float2 v )
			{
				const float4 C = float4( 0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439 );
				float2 i = floor( v + dot( v, C.yy ) );
				float2 x0 = v - i + dot( i, C.xx );
				float2 i1;
				i1 = ( x0.x > x0.y ) ? float2( 1.0, 0.0 ) : float2( 0.0, 1.0 );
				float4 x12 = x0.xyxy + C.xxzz;
				x12.xy -= i1;
				i = mod2D289( i );
				float3 p = permute( permute( i.y + float3( 0.0, i1.y, 1.0 ) ) + i.x + float3( 0.0, i1.x, 1.0 ) );
				float3 m = max( 0.5 - float3( dot( x0, x0 ), dot( x12.xy, x12.xy ), dot( x12.zw, x12.zw ) ), 0.0 );
				m = m * m;
				m = m * m;
				float3 x = 2.0 * frac( p * C.www ) - 1.0;
				float3 h = abs( x ) - 0.5;
				float3 ox = floor( x + 0.5 );
				float3 a0 = x - ox;
				m *= 1.79284291400159 - 0.85373472095314 * ( a0 * a0 + h * h );
				float3 g;
				g.x = a0.x * x0.x + h.x * x0.y;
				g.yz = a0.yz * x12.xz + h.yz * x12.yw;
				return 130.0 * dot( m, g );
			}
			
			float2 voronoihash8_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float3 PerturbNormal107_g1( float3 surf_pos, float3 surf_norm, float height, float scale )
			{
				// "Bump Mapping Unparametrized Surfaces on the GPU" by Morten S. Mikkelsen
				float3 vSigmaS = ddx( surf_pos );
				float3 vSigmaT = ddy( surf_pos );
				float3 vN = surf_norm;
				float3 vR1 = cross( vSigmaT , vN );
				float3 vR2 = cross( vN , vSigmaS );
				float fDet = dot( vSigmaS , vR1 );
				float dBs = ddx( height );
				float dBt = ddy( height );
				float3 vSurfGrad = scale * 0.05 * sign( fDet ) * ( dBs * vR1 + dBt * vR2 );
				return normalize ( abs( fDet ) * vN - vSurfGrad );
			}
			
			inline float4 ASE_ComputeGrabScreenPos( float4 pos )
			{
				#if UNITY_UV_STARTS_AT_TOP
				float scale = -1.0;
				#else
				float scale = 1.0;
				#endif
				float4 o = pos;
				o.y = pos.w * 0.5f;
				o.y = ( pos.y - o.y ) * _ProjectionParams.x * scale + o.y;
				return o;
			}
			

			VertexOutput VertexFunction( VertexInput v  )
			{
				VertexOutput o = (VertexOutput)0;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				float RF_Zero315 = 0.0;
				float3 temp_cast_0 = (RF_Zero315).xxx;
				float4 ase_clipPos = TransformObjectToHClip((v.positionOS).xyz);
				float4 screenPos = ComputeScreenPos(ase_clipPos);
				float4 ase_screenPosNorm = screenPos / screenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_3 );
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_6 );
				float3 temp_cast_7 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_7;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_7;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = v.texcoord.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_8 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_8 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = v.texcoord.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = v.texcoord.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ), 0, 0.0) ).rgb , tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ), 0, 0.0) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_9 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_9 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_12 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = v.texcoord.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_13 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_13 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_12;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_16 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_18 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = v.texcoord.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_19 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_20 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_21 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_22 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_22;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2Dlod( _DeformNoiseTypeA, float4( UV20_g516, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_22;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = v.texcoord.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_24 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_25 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_26 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_27 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_27;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_24;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_25;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_26;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2Dlod( _FoamTexture, float4( UV20_g786, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_27;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_28 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_28 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_32 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = v.texcoord.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_35 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_36 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_37 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_38 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_38;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_35;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_36;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_37;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2Dlod( _WaveTypeA, float4( UV20_g790, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_38;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_39 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_39 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_43 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_45 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = v.texcoord.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_46 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_47 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_48 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_49 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_49;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_46;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_47;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_48;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2Dlod( _DeformNoiseTypeB, float4( UV20_g512, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_49;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = v.texcoord.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_51 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_52 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_53 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_54 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_54;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_51;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_52;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_53;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2Dlod( _WaveTypeB, float4( UV20_g540, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_54;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_55 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_55 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_58 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_58;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 linearToGamma1730 = FastLinearToSRGB( RF_SurfaceWave1466 );
				float3 linearToGamma1731 = FastLinearToSRGB( RF_FlowMask535 );
				float3 saferPower1714 = abs( ( 1.0 - linearToGamma1731 ) );
				float3 temp_cast_64 = (_EdgeWaveExponential).xxx;
				float3 RF_Vertex_Offset1726 = (( _Displacement )?( ( ( ( linearToGamma1730 * saturate( (pow( saferPower1714 , temp_cast_64 )*_EdgeWaveMultiplier + 0.0) ) ) * _WaveLength ) * v.normalOS ) ):( temp_cast_0 ));
				
				float4 RF_VertexTangent1706 = ( _VT_Intensity * v.positionOS );
				
				o.ase_texcoord8.xyz = v.texcoord.xyz;
				o.ase_texcoord9 = v.positionOS;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord8.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.positionOS.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif

				float3 vertexValue = RF_Vertex_Offset1726;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.positionOS.xyz = vertexValue;
				#else
					v.positionOS.xyz += vertexValue;
				#endif

				v.normalOS = v.normalOS;
				v.tangentOS = RF_VertexTangent1706;

				VertexPositionInputs vertexInput = GetVertexPositionInputs( v.positionOS.xyz );
				VertexNormalInputs normalInput = GetVertexNormalInputs( v.normalOS, v.tangentOS );

				o.tSpace0 = float4( normalInput.normalWS, vertexInput.positionWS.x);
				o.tSpace1 = float4( normalInput.tangentWS, vertexInput.positionWS.y);
				o.tSpace2 = float4( normalInput.bitangentWS, vertexInput.positionWS.z);

				#if defined(LIGHTMAP_ON)
					OUTPUT_LIGHTMAP_UV(v.texcoord1, unity_LightmapST, o.lightmapUVOrVertexSH.xy);
				#endif

				#if defined(DYNAMICLIGHTMAP_ON)
					o.dynamicLightmapUV.xy = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
				#endif

				#if !defined(LIGHTMAP_ON)
					OUTPUT_SH(normalInput.normalWS.xyz, o.lightmapUVOrVertexSH.xyz);
				#endif

				#if defined(ENABLE_TERRAIN_PERPIXEL_NORMAL)
					o.lightmapUVOrVertexSH.zw = v.texcoord.xy;
					o.lightmapUVOrVertexSH.xy = v.texcoord.xy * unity_LightmapST.xy + unity_LightmapST.zw;
				#endif

				half3 vertexLight = VertexLighting( vertexInput.positionWS, normalInput.normalWS );

				o.fogFactorAndVertexLight = half4(0, vertexLight);

				#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR)
					o.shadowCoord = GetShadowCoord( vertexInput );
				#endif

				o.positionCS = vertexInput.positionCS;
				o.clipPosV = vertexInput.positionCS;
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 texcoord : TEXCOORD0;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( VertexInput v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.texcoord = v.texcoord;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
				return patch[id];
			}

			[domain("tri")]
			VertexOutput DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				VertexInput o = (VertexInput) 0;
				o.positionOS = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.texcoord = patch[0].texcoord * bary.x + patch[1].texcoord * bary.y + patch[2].texcoord * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].vertex.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			VertexOutput vert ( VertexInput v )
			{
				return VertexFunction( v );
			}
			#endif

			FragmentOutput frag ( VertexOutput IN
								#ifdef ASE_DEPTH_WRITE_ON
								,out float outputDepth : ASE_SV_DEPTH
								#endif
								 )
			{
				UNITY_SETUP_INSTANCE_ID(IN);
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

				#if defined(LOD_FADE_CROSSFADE)
					LODFadeCrossFade( IN.positionCS );
				#endif

				#if defined(ENABLE_TERRAIN_PERPIXEL_NORMAL)
					float2 sampleCoords = (IN.lightmapUVOrVertexSH.zw / _TerrainHeightmapRecipSize.zw + 0.5f) * _TerrainHeightmapRecipSize.xy;
					float3 WorldNormal = TransformObjectToWorldNormal(normalize(SAMPLE_TEXTURE2D(_TerrainNormalmapTexture, sampler_TerrainNormalmapTexture, sampleCoords).rgb * 2 - 1));
					float3 WorldTangent = -cross(GetObjectToWorldMatrix()._13_23_33, WorldNormal);
					float3 WorldBiTangent = cross(WorldNormal, -WorldTangent);
				#else
					float3 WorldNormal = normalize( IN.tSpace0.xyz );
					float3 WorldTangent = IN.tSpace1.xyz;
					float3 WorldBiTangent = IN.tSpace2.xyz;
				#endif

				float3 WorldPosition = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 WorldViewDirection = _WorldSpaceCameraPos.xyz  - WorldPosition;
				float4 ShadowCoords = float4( 0, 0, 0, 0 );

				float4 ClipPos = IN.clipPosV;
				float4 ScreenPos = ComputeScreenPos( IN.clipPosV );

				float2 NormalizedScreenSpaceUV = GetNormalizedScreenSpaceUV(IN.positionCS);

				#if defined(REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR)
					ShadowCoords = IN.shadowCoord;
				#elif defined(MAIN_LIGHT_CALCULATE_SHADOWS)
					ShadowCoords = TransformWorldToShadowCoord( WorldPosition );
				#else
					ShadowCoords = float4(0, 0, 0, 0);
				#endif

				WorldViewDirection = SafeNormalize( WorldViewDirection );

				float RF_Zero315 = 0.0;
				float3 temp_cast_0 = (RF_Zero315).xxx;
				float4 ase_screenPosNorm = ScreenPos / ScreenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_3 );
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_6 );
				float3 temp_cast_7 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_7;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_7;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = IN.ase_texcoord8.xyz.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_8 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_8 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = IN.ase_texcoord8.xyz.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = IN.ase_texcoord8.xyz.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ) ).rgb , tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_9 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_9 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_12 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = IN.ase_texcoord8.xyz.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_13 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_13 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_12;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_16 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_18 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = IN.ase_texcoord8.xyz.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_19 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_20 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_21 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_22 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_22;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2D( _DeformNoiseTypeA, UV20_g516 ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_22;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = IN.ase_texcoord8.xyz.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_24 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_25 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_26 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_27 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_27;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_24;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_25;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_26;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2D( _FoamTexture, UV20_g786 ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_27;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_28 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_28 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_32 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = IN.ase_texcoord8.xyz.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_35 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_36 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_37 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_38 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_38;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_35;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_36;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_37;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2D( _WaveTypeA, UV20_g790 ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_38;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_39 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_39 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_43 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_45 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = IN.ase_texcoord8.xyz.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_46 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_47 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_48 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_49 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_49;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_46;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_47;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_48;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2D( _DeformNoiseTypeB, UV20_g512 ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_49;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = IN.ase_texcoord8.xyz.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_51 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_52 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_53 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_54 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_54;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_51;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_52;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_53;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2D( _WaveTypeB, UV20_g540 ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_54;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_55 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_55 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_58 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_58;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_FinalSurface1629 = (( _SurfaceToggle )?( ( _SurfaceIntensity * linearToGamma1433 ) ):( temp_cast_0 ));
				
				float2 temp_output_1_0_g780 = float2( 0,0 );
				float dotResult4_g780 = dot( temp_output_1_0_g780 , temp_output_1_0_g780 );
				float3 appendResult10_g780 = (float3((temp_output_1_0_g780).x , (temp_output_1_0_g780).y , sqrt( ( 1.0 - saturate( dotResult4_g780 ) ) )));
				float3 normalizeResult12_g780 = normalize( appendResult10_g780 );
				float3 surf_pos107_g1 = WorldPosition;
				float3 surf_norm107_g1 = WorldNormal;
				float3 linearToGamma1508 = LinearToGamma22( saturate( ( float4( ( RF_FlowMap536 * _ShoreBumpIntensity ) , 0.0 ) + ( _MiddleWaveBumpIntensity * RF_MidWave1281 ) ) ).xyz );
				float3 temp_cast_67 = ((0.01 + (_NormalGradePower - 0.0) * (2.0 - 0.01) / (2.0 - 0.0))).xxx;
				float height107_g1 = pow( linearToGamma1508 , temp_cast_67 ).x;
				float scale107_g1 = _NormalIntensity;
				float3 localPerturbNormal107_g1 = PerturbNormal107_g1( surf_pos107_g1 , surf_norm107_g1 , height107_g1 , scale107_g1 );
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				float3 worldToTangentDir42_g1 = mul( ase_worldToTangent, localPerturbNormal107_g1);
				float2 appendResult1488 = (float2(_SSTileX , _SSTileY));
				float4 unityObjectToClipPos1477 = TransformWorldToHClip(TransformObjectToWorld(IN.ase_texcoord9.xyz));
				float4 computeScreenPos1478 = ComputeScreenPos( unityObjectToClipPos1477 );
				float2 break1493 = ( appendResult1488 * (computeScreenPos1478).xy );
				float temp_output_1492_0 = (computeScreenPos1478).w;
				float4 appendResult1494 = (float4(break1493.x , break1493.y , (computeScreenPos1478).z , temp_output_1492_0));
				float3 unpack1485 = UnpackNormalScale( tex2D( _BluricRefractionPattern, ( ( appendResult1494 / temp_output_1492_0 ) * _SSSize ).xy ), ( (-0.1 + (_PatternHeight - -1.0) * (0.1 - -0.1) / (1.0 - -1.0)) * _PatternMultiplier ) );
				unpack1485.z = lerp( 1, unpack1485.z, saturate(( (-0.1 + (_PatternHeight - -1.0) * (0.1 - -0.1) / (1.0 - -1.0)) * _PatternMultiplier )) );
				float3 RF_BumpForSmooth1486 = unpack1485;
				float3 RF_NewObjectNormal1230 = (( _SSBluricTransparent )?( BlendNormalRNM( (( _NormalToggle )?( worldToTangentDir42_g1 ):( normalizeResult12_g780 )) , RF_BumpForSmooth1486 ) ):( (( _NormalToggle )?( worldToTangentDir42_g1 ):( normalizeResult12_g780 )) ));
				
				float4 temp_cast_71 = (RF_Zero315).xxxx;
				float4 ase_grabScreenPos = ASE_ComputeGrabScreenPos( ScreenPos );
				float4 ase_grabScreenPosNorm = ase_grabScreenPos / ase_grabScreenPos.w;
				float4 fetchOpaqueVal1443 = float4( SHADERGRAPH_SAMPLE_SCENE_COLOR( saturate( ( ase_grabScreenPosNorm + float4( RF_NewObjectNormal1230 , 0.0 ) ) ).xy ), 1.0 );
				float4 saferPower1461 = abs( fetchOpaqueVal1443 );
				float4 temp_cast_75 = ((0.3 + (_ScreenContrast - 0.0) * (1.5 - 0.3) / (1.0 - 0.0))).xxxx;
				float4 RF_Refraction1447 = (( _RefractionToggle )?( ( float4( _RefractColor , 0.0 ) * pow( saferPower1461 , temp_cast_75 ) * 0.6 ) ):( temp_cast_71 ));
				float4 temp_cast_76 = (RF_Zero315).xxxx;
				float4 temp_cast_77 = (RF_Zero315).xxxx;
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 worldRefl1398 = normalize( reflect( -WorldViewDirection, float3( dot( tanToWorld0, RF_NewObjectNormal1230 ), dot( tanToWorld1, RF_NewObjectNormal1230 ), dot( tanToWorld2, RF_NewObjectNormal1230 ) ) ) );
				float3 VertexPos5_g776 = worldRefl1398;
				float3 appendResult10_g776 = (float3(0.0 , VertexPos5_g776.y , 0.0));
				float3 VertexPosRotationAxis11_g776 = appendResult10_g776;
				float3 break13_g776 = VertexPos5_g776;
				float3 appendResult14_g776 = (float3(break13_g776.x , 0.0 , break13_g776.z));
				float3 VertexPosOtherAxis12_g776 = appendResult14_g776;
				float Angle3_g776 = radians( _CubeMapRotate );
				float3 appendResult1409 = (float3(_CMXPos , -_CMYPos , _CMZPos));
				float RF_One317 = 1.0;
				float4 temp_cast_78 = (RF_Zero315).xxxx;
				float4 RF_Reflect1423 = (( _Reflect )?( ( (( _CMReflect )?( ( _ReflectionStrength * ( texCUBE( _ReflectMap, ( ( VertexPosRotationAxis11_g776 + ( VertexPosOtherAxis12_g776 * cos( Angle3_g776 ) ) + ( cross( float3(0,1,0) , VertexPosOtherAxis12_g776 ) * sin( Angle3_g776 ) ) ) + appendResult1409 ) ) * _ReflectColor ) * ( _ReflectionMultiplier + RF_One317 ) ) ):( temp_cast_77 )) + (( _MirrorReflect )?( ( tex2D( _ReflectionMap, ( ase_screenPosNorm + float4( RF_NewObjectNormal1230 , 0.0 ) ).xy ) * _MirrorRefIntensity * _MirrorRefColor ) ):( temp_cast_78 )) ) ):( temp_cast_76 ));
				float screenDepth1_g772 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g772 = abs( ( screenDepth1_g772 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _FogDepthDistance ) );
				float saferPower3_g772 = abs( distanceDepth1_g772 );
				float temp_output_29_0_g772 = ( ( saturate( pow( saferPower3_g772 , max( _FogDepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + ((2.0 + (_FogDepthSize - 0.0) * (3.0 - 2.0) / (1.0 - 0.0)) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_81 = (temp_output_29_0_g772).xxx;
				float3 temp_cast_82 = (temp_output_29_0_g772).xxx;
				float3 gammaToLinear30_g772 = SRGBToLinear( temp_cast_82 );
				float3 temp_cast_83 = (temp_output_29_0_g772).xxx;
				float3 temp_cast_84 = (temp_output_29_0_g772).xxx;
				float3 temp_cast_85 = (temp_output_29_0_g772).xxx;
				float3 linearToGamma31_g772 = LinearToSRGB( temp_cast_85 );
				float3 temp_cast_86 = (temp_output_29_0_g772).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g772 = gammaToLinear30_g772;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g772 = temp_cast_86;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g772 = linearToGamma31_g772;
				#else
				float3 staticSwitch32_g772 = temp_cast_86;
				#endif
				float3 temp_output_36_0_g772 = saturate( staticSwitch32_g772 );
				float3 temp_output_1179_0 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g772 ) ):( temp_output_36_0_g772 ));
				float3 gammaToLinear1181 = Gamma22ToLinear( temp_output_1179_0 );
				float3 linearToGamma1180 = LinearToGamma22( temp_output_1179_0 );
				#if defined( _FOGDEPTHGRADETYPE_LINEAR )
				float3 staticSwitch1182 = gammaToLinear1181;
				#elif defined( _FOGDEPTHGRADETYPE_NORMAL )
				float3 staticSwitch1182 = temp_output_1179_0;
				#elif defined( _FOGDEPTHGRADETYPE_GAMMA )
				float3 staticSwitch1182 = linearToGamma1180;
				#else
				float3 staticSwitch1182 = gammaToLinear1181;
				#endif
				float3 RF_FogDepth1187 = saturate( ( 1.0 - staticSwitch1182 ) );
				float4 lerpResult1194 = lerp( saturate( RF_Refraction1447 ) , _FogColor , float4( RF_FogDepth1187 , 0.0 ));
				float4 RF_Comp_Fog1197 = (( _FogToggle )?( ( lerpResult1194 + RF_Reflect1423 ) ):( ( RF_Reflect1423 + RF_Refraction1447 ) ));
				float4 lerpResult1586 = lerp( RF_Refraction1447 , RF_Comp_Fog1197 , RF_One317);
				float4 RF_FinalEmission1624 = ( lerpResult1586 + RF_Reflect1423 );
				
				float3 RF_Specular1705 = ( _SpecularColor * _Specular );
				
				float3 temp_cast_89 = (_Transparency).xxx;
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 RF_TransparentIntensity1436 = (( _TRSurfWaveToggle )?( ( _Transparency * RF_SurfaceWave1466 ) ):( temp_cast_89 ));
				

				float3 BaseColor = RF_FinalSurface1629;
				float3 Normal = RF_NewObjectNormal1230;
				float3 Emission = RF_FinalEmission1624.rgb;
				float3 Specular = RF_Specular1705;
				float Metallic = 0;
				float Smoothness = _Smoothness;
				float Occlusion = 1;
				float Alpha = RF_TransparentIntensity1436.x;
				float AlphaClipThreshold = 0.5;
				float AlphaClipThresholdShadow = 0.5;
				float3 BakedGI = 0;
				float3 RefractionColor = 1;
				float RefractionIndex = 1;
				float3 Transmission = 1;
				float3 Translucency = 1;

				#ifdef ASE_DEPTH_WRITE_ON
					float DepthValue = IN.positionCS.z;
				#endif

				#ifdef _ALPHATEST_ON
					clip(Alpha - AlphaClipThreshold);
				#endif

				InputData inputData = (InputData)0;
				inputData.positionWS = WorldPosition;
				inputData.positionCS = IN.positionCS;
				inputData.shadowCoord = ShadowCoords;

				#ifdef _NORMALMAP
					#if _NORMAL_DROPOFF_TS
						inputData.normalWS = TransformTangentToWorld(Normal, half3x3( WorldTangent, WorldBiTangent, WorldNormal ));
					#elif _NORMAL_DROPOFF_OS
						inputData.normalWS = TransformObjectToWorldNormal(Normal);
					#elif _NORMAL_DROPOFF_WS
						inputData.normalWS = Normal;
					#endif
				#else
					inputData.normalWS = WorldNormal;
				#endif

				inputData.normalWS = NormalizeNormalPerPixel(inputData.normalWS);
				inputData.viewDirectionWS = SafeNormalize( WorldViewDirection );

				inputData.vertexLighting = IN.fogFactorAndVertexLight.yzw;

				#if defined(ENABLE_TERRAIN_PERPIXEL_NORMAL)
					float3 SH = SampleSH(inputData.normalWS.xyz);
				#else
					float3 SH = IN.lightmapUVOrVertexSH.xyz;
				#endif

				#ifdef ASE_BAKEDGI
					inputData.bakedGI = BakedGI;
				#else
					#if defined(DYNAMICLIGHTMAP_ON)
						inputData.bakedGI = SAMPLE_GI( IN.lightmapUVOrVertexSH.xy, IN.dynamicLightmapUV.xy, SH, inputData.normalWS);
					#else
						inputData.bakedGI = SAMPLE_GI( IN.lightmapUVOrVertexSH.xy, SH, inputData.normalWS );
					#endif
				#endif

				inputData.normalizedScreenSpaceUV = NormalizedScreenSpaceUV;
				inputData.shadowMask = SAMPLE_SHADOWMASK(IN.lightmapUVOrVertexSH.xy);

				#if defined(DEBUG_DISPLAY)
					#if defined(DYNAMICLIGHTMAP_ON)
						inputData.dynamicLightmapUV = IN.dynamicLightmapUV.xy;
						#endif
					#if defined(LIGHTMAP_ON)
						inputData.staticLightmapUV = IN.lightmapUVOrVertexSH.xy;
					#else
						inputData.vertexSH = SH;
					#endif
				#endif

				#ifdef _DBUFFER
					ApplyDecal(IN.positionCS,
						BaseColor,
						Specular,
						inputData.normalWS,
						Metallic,
						Occlusion,
						Smoothness);
				#endif

				BRDFData brdfData;
				InitializeBRDFData
				(BaseColor, Metallic, Specular, Smoothness, Alpha, brdfData);

				Light mainLight = GetMainLight(inputData.shadowCoord, inputData.positionWS, inputData.shadowMask);
				half4 color;
				MixRealtimeAndBakedGI(mainLight, inputData.normalWS, inputData.bakedGI, inputData.shadowMask);
				color.rgb = GlobalIllumination(brdfData, inputData.bakedGI, Occlusion, inputData.positionWS, inputData.normalWS, inputData.viewDirectionWS);
				color.a = Alpha;

				#ifdef ASE_FINAL_COLOR_ALPHA_MULTIPLY
					color.rgb *= color.a;
				#endif

				#ifdef ASE_DEPTH_WRITE_ON
					outputDepth = DepthValue;
				#endif

				return BRDFDataToGbuffer(brdfData, inputData, Smoothness, Emission + color.rgb, Occlusion);
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "SceneSelectionPass"
			Tags { "LightMode"="SceneSelectionPass" }

			Cull Off
			AlphaToMask Off

			HLSLPROGRAM

			

			#define _SPECULAR_SETUP 1
			#define ASE_FOG 1
			#define _ASE_LIGHTING_SIMPLE
			#define _SURFACE_TYPE_TRANSPARENT 1
			#define _NORMAL_DROPOFF_TS 1
			#define _EMISSION
			#define _NORMALMAP 1
			#define ASE_SRP_VERSION 140010
			#define REQUIRE_DEPTH_TEXTURE 1


			

			#pragma vertex vert
			#pragma fragment frag

			#if defined(_SPECULAR_SETUP) && defined(_ASE_LIGHTING_SIMPLE)
				#define _SPECULAR_COLOR 1
			#endif

			#define SCENESELECTIONPASS 1

			#define ATTRIBUTES_NEED_NORMAL
			#define ATTRIBUTES_NEED_TANGENT
			#define SHADERPASS SHADERPASS_DEPTHONLY

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Input.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"

			
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRendering.hlsl"
           

			
            #if ASE_SRP_VERSION >=140009
			#include_with_pragmas "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRenderingKeywords.hlsl"
			#endif
		

			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"

			
            #if ASE_SRP_VERSION >=140007
			#include_with_pragmas "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DOTS.hlsl"
			#endif
		

			#include "Packages/com.unity.render-pipelines.universal/Editor/ShaderGraph/Includes/ShaderPass.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#define ASE_NEEDS_VERT_NORMAL
			#pragma shader_feature_local _CAUSTICB_OCT_CAUSTIC1 _CAUSTICB_OCT_CAUSTIC2 _CAUSTICB_OCT_CAUSTIC3 _CAUSTICB_OCT_CAUSTIC4 _CAUSTICB_OCT_CAUSTIC5 _CAUSTICB_OCT_CAUSTIC6 _CAUSTICB_OCT_CAUSTIC7 _CAUSTICB_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEBTYPE_NONE _NOISEBTYPE_VORONOICELL _NOISEBTYPE_VORONOICAUSTIC _NOISEBTYPE_PERLIN _NOISEBTYPE_TEXTURE
			#pragma shader_feature_local _CELLB_OCT_CELL1 _CELLB_OCT_CELL2 _CELLB_OCT_CELL3 _CELLB_OCT_CELL4 _CELLB_OCT_CELL5 _CELLB_OCT_CELL6 _CELLB_OCT_CELL7 _CELLB_OCT_CELL8
			#pragma shader_feature_local _CELLA_OCT_CELL1 _CELLA_OCT_CELL2 _CELLA_OCT_CELL3 _CELLA_OCT_CELL4 _CELLA_OCT_CELL5 _CELLA_OCT_CELL6 _CELLA_OCT_CELL7 _CELLA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICA_OCT_CAUSTIC1 _CAUSTICA_OCT_CAUSTIC2 _CAUSTICA_OCT_CAUSTIC3 _CAUSTICA_OCT_CAUSTIC4 _CAUSTICA_OCT_CAUSTIC5 _CAUSTICA_OCT_CAUSTIC6 _CAUSTICA_OCT_CAUSTIC7 _CAUSTICA_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEATYPE_NONE _NOISEATYPE_VORONOICELL _NOISEATYPE_VORONOICAUSTIC _NOISEATYPE_PERLIN _NOISEATYPE_TEXTURE
			#pragma shader_feature_local _WAVEBTYPE_NONE _WAVEBTYPE_VORONOICELL _WAVEBTYPE_VORONOICAUSTIC _WAVEBTYPE_PERLIN _WAVEBTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICWAVEB_OCT_CAUSTIC1 _CAUSTICWAVEB_OCT_CAUSTIC2 _CAUSTICWAVEB_OCT_CAUSTIC3 _CAUSTICWAVEB_OCT_CAUSTIC4 _CAUSTICWAVEB_OCT_CAUSTIC5 _CAUSTICWAVEB_OCT_CAUSTIC6 _CAUSTICWAVEB_OCT_CAUSTIC7 _CAUSTICWAVEB_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLWAVEB_OCT_CELL1 _CELLWAVEB_OCT_CELL2 _CELLWAVEB_OCT_CELL3 _CELLWAVEB_OCT_CELL4 _CELLWAVEB_OCT_CELL5 _CELLWAVEB_OCT_CELL6 _CELLWAVEB_OCT_CELL7 _CELLWAVEB_OCT_CELL8
			#pragma shader_feature_local _WAVEAGRADETYPE_LINEAR _WAVEAGRADETYPE_NORMAL _WAVEAGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBGRADETYPE_LINEAR _WAVEBGRADETYPE_NORMAL _WAVEBGRADETYPE_GAMMA
			#pragma shader_feature_local _DEPTHGRADETYPE_LINEAR _DEPTHGRADETYPE_NORMAL _DEPTHGRADETYPE_GAMMA
			#pragma shader_feature_local _FLOWMAPTYPE_DEPTH _FLOWMAPTYPE_FLOWTEXTURE
			#pragma shader_feature_local _MASK_ON
			#pragma shader_feature_local _MASKGRADETYPE_LINEAR _MASKGRADETYPE_NORMAL _MASKGRADETYPE_GAMMA
			#pragma shader_feature_local _TXTGRADETYPE_LINEAR _TXTGRADETYPE_NORMAL _TXTGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBINVERT_ON
			#pragma shader_feature_local _WAVEAINVERT_ON
			#pragma shader_feature_local _SELECTWAVETYPE_LAYERA _SELECTWAVETYPE_LAYERB _SELECTWAVETYPE_MULTIPLY _SELECTWAVETYPE_ADD _SELECTWAVETYPE_SUBTRACT _SELECTWAVETYPE_DIVIDE _SELECTWAVETYPE_DOT _SELECTWAVETYPE_FMOD _SELECTWAVETYPE_FMODINVERT
			#pragma shader_feature_local _DFAGRADETYPE_LINEAR _DFAGRADETYPE_NORMAL _DFAGRADETYPE_GAMMA
			#pragma shader_feature_local _DFBGRADETYPE_LINEAR _DFBGRADETYPE_NORMAL _DFBGRADETYPE_GAMMA
			#pragma shader_feature_local _DFNOISEAINVERT_ON
			#pragma shader_feature_local _DFNOISEBINVERT_ON
			#pragma shader_feature_local _SELECTDEFORMTYPE_LAYERA _SELECTDEFORMTYPE_LAYERB _SELECTDEFORMTYPE_MULTIPLY _SELECTDEFORMTYPE_ADD _SELECTDEFORMTYPE_SUBTRACT _SELECTDEFORMTYPE_DIVIDE _SELECTDEFORMTYPE_DOT _SELECTDEFORMTYPE_FMOD _SELECTDEFORMTYPE_FMODINVERT
			#pragma shader_feature_local _FOAMTYPE_NONE _FOAMTYPE_VORONOICELL _FOAMTYPE_VORONOICAUSTIC _FOAMTYPE_PERLIN _FOAMTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICFOAM_OCT_CAUSTIC1 _CAUSTICFOAM_OCT_CAUSTIC2 _CAUSTICFOAM_OCT_CAUSTIC3 _CAUSTICFOAM_OCT_CAUSTIC4 _CAUSTICFOAM_OCT_CAUSTIC5 _CAUSTICFOAM_OCT_CAUSTIC6 _CAUSTICFOAM_OCT_CAUSTIC7 _CAUSTICFOAM_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLFOAM_OCT_CELL1 _CELLFOAM_OCT_CELL2 _CELLFOAM_OCT_CELL3 _CELLFOAM_OCT_CELL4 _CELLFOAM_OCT_CELL5 _CELLFOAM_OCT_CELL6 _CELLFOAM_OCT_CELL7 _CELLFOAM_OCT_CELL8
			#pragma shader_feature_local _CELLWAVEA_OCT_CELL1 _CELLWAVEA_OCT_CELL2 _CELLWAVEA_OCT_CELL3 _CELLWAVEA_OCT_CELL4 _CELLWAVEA_OCT_CELL5 _CELLWAVEA_OCT_CELL6 _CELLWAVEA_OCT_CELL7 _CELLWAVEA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICWAVEA_OCT_CAUSTIC1 _CAUSTICWAVEA_OCT_CAUSTIC2 _CAUSTICWAVEA_OCT_CAUSTIC3 _CAUSTICWAVEA_OCT_CAUSTIC4 _CAUSTICWAVEA_OCT_CAUSTIC5 _CAUSTICWAVEA_OCT_CAUSTIC6 _CAUSTICWAVEA_OCT_CAUSTIC7 _CAUSTICWAVEA_OCT_CAUSTIC8
			#pragma shader_feature_local _WAVEATYPE_NONE _WAVEATYPE_VORONOICELL _WAVEATYPE_VORONOICAUSTIC _WAVEATYPE_PERLIN _WAVEATYPE_TEXTURE
			#pragma shader_feature_local _FOAMINVERT_ON
			#pragma shader_feature_local _FOAMGRADETYPE_LINEAR _FOAMGRADETYPE_NORMAL _FOAMGRADETYPE_GAMMA


			struct VertexInput
			{
				float4 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct VertexOutput
			{
				float4 positionCS : SV_POSITION;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord1 : TEXCOORD1;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			CBUFFER_START(UnityPerMaterial)
			float4 _ReflectColor;
			float4 _MaskMap_ST;
			float4 _FogColor;
			float4 _MirrorRefColor;
			float3 _RefractColor;
			float3 _SpecularColor;
			float _FlowTextureAmplitude;
			float _FlowTextureExponential;
			float _FlowTextureContrast;
			float _MaskGradeAmplitude;
			float _MaskGradePower;
			float _ShoreIntensity;
			float _FoamIntensity;
			float _BVoronoiAngleSpeed;
			float _MapChangeSpeed;
			float _FoamVoronoiAngleSpeed;
			float _FoamVoronoiSmooth;
			float _FoamDeformToggle;
			float _DefWeightFoam;
			float _FoamTileX;
			float _FoamTileY;
			float _FoamOffsetX;
			float _FoamSpeedX;
			float _FoamNoiseScale;
			float _RotateB;
			float _BTileX;
			float _BTileY;
			float _ShoreBumpIntensity;
			float _NormalGradePower;
			float _NormalIntensity;
			float _foamFold;
			float _otherFold;
			float _Displacement;
			float _ShoreFoamToggle;
			float _DepthNegative;
			float _OffsetB;
			float _DepthDistance;
			float _DepthSize;
			float _MapExponential;
			float _InfluenceFlow;
			float _ATileX;
			float _ATileY;
			float _FlowSpeed;
			float _RotateA;
			float _FoamOverallSpeed;
			float _DepthExponential;
			float _FoamSpeedY;
			float _FoamAnchorY;
			float _FoamAnchorX;
			float _ScreenContrast;
			float _FogToggle;
			float _Reflect;
			float _CMReflect;
			float _ReflectionStrength;
			float _CubeMapRotate;
			float _CMXPos;
			float _CMYPos;
			float _CMZPos;
			float _ReflectionMultiplier;
			float _MirrorReflect;
			float _MirrorRefIntensity;
			float _FogDepthDistance;
			float _FogDepthExponential;
			float _FogDepthSize;
			float _Specular;
			float _Smoothness;
			float _RefractionToggle;
			float _NormalToggle;
			float _SSBluricTransparent;
			float _SurfaceIntensity;
			float _MiddleWaveBumpIntensity;
			float _FoamRotateSpeed;
			float _FoamRotate;
			float _FoamAmplitude;
			float _FoamExp;
			float _FoamContrast;
			float _MiddleFoamToggle;
			float _MiddleWaveIntensity;
			float _FoamOffsetY;
			float _MidFlowMask;
			float _DefWeightA;
			float _MidBDeformToggle;
			float _DefWeightB;
			float _EdgeWaveExponential;
			float _EdgeWaveMultiplier;
			float _WaveLength;
			float _VT_Intensity;
			float _SurfaceToggle;
			float _MidADeformToggle;
			float _TRSurfWaveToggle;
			float _PatternMultiplier;
			float _SSTileY;
			float _ANoiseScale;
			float _AVoronoiSmooth;
			float _AVoronoiAngleSpeed;
			float _NTypeARotate;
			float _WAVoronoiAngleSpeed;
			float _WAVoronoiSmooth;
			float _WANoiseScale;
			float _WTypeATileX;
			float _NTypeATileX;
			float _WTypeATileY;
			float _WTypeAOffsetY;
			float _WTypeASpeedX;
			float _WTypeASpeedY;
			float _WTypeAOverallSpeed;
			float _WTypeARotate;
			float _WTypeARotateSpeed;
			float _WTypeAAnchorX;
			float _WTypeAAnchorY;
			float _WTypeAOffsetX;
			float _NTypeATileY;
			float _NTypeAOffsetX;
			float _NTypeAOffsetY;
			float _BNoiseScale;
			float _NTypeBTileX;
			float _NTypeBTileY;
			float _NTypeBOffsetX;
			float _NTypeBOffsetY;
			float _NTypeBSpeedX;
			float _NTypeBSpeedY;
			float _NTypeBOverallSpeed;
			float _NTypeBAnchorX;
			float _NTypeBAnchorY;
			float _BVoronoiSmooth;
			float _NTypeBRotateSpeed;
			float _NTypeBRotate;
			float _NTypeAAnchorY;
			float _NTypeAAnchorX;
			float _NTypeARotateSpeed;
			float _NTypeAOverallSpeed;
			float _NTypeASpeedY;
			float _NTypeASpeedX;
			float _WBVoronoiAngleSpeed;
			float _WBVoronoiSmooth;
			float _WBNoiseScale;
			float _WTypeBTileX;
			float _dfNoiseBFold;
			float _dfNoiseAFold;
			float _DeformFold;
			float _CheckFlowMap;
			float _fMapFold;
			float _wAFold;
			float _CheckMidWave;
			float _DFBAmplitude;
			float _DFAAmplitude;
			float _DFBExp;
			float _DFAExp;
			float _NoiseAContrast;
			float _NoiseBContrast;
			float _NA_Intensity;
			float _NB_Intensity;
			float _wBFold;
			float _SSTxtInfo;
			float _SSSize;
			float _SSTileX;
			float _dMaskFold;
			float _PatternHeight;
			float _fMaskFold;
			float _CheckDef;
			float _WTypeBTileY;
			float _WTypeBOffsetX;
			float _WTypeBOffsetY;
			float _WTypeBSpeedX;
			float _WTypeBSpeedY;
			float _WTypeBOverallSpeed;
			float _WTypeBRotate;
			float _WTypeBRotateSpeed;
			float _WTypeBAnchorX;
			float _WTypeBAnchorY;
			float _WaveAAmplitude;
			float _WaveBAmplitude;
			float _WaveAExp;
			float _WaveBExp;
			float _MGradeAmplitude;
			float _WaveBContrast;
			float _WaveAContrast;
			float _WaveAIntensity;
			float _WaveBIntensity;
			float _fTxtFold;
			float _Transparency;
			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			CBUFFER_END

			#ifdef SCENEPICKINGPASS
				float4 _SelectionID;
			#endif

			#ifdef SCENESELECTIONPASS
				int _ObjectId;
				int _PassValue;
			#endif

			sampler2D _DeformNoiseTypeB;
			sampler2D _DeformNoiseTypeA;
			sampler2D _WaveTypeB;
			sampler2D _WaveTypeA;
			sampler2D _TextureMap;
			sampler2D _FlowMap;
			sampler2D _MaskMap;
			sampler2D _FoamTexture;


			float SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD(float2 uv)
			{
				#if defined(REQUIRE_DEPTH_TEXTURE)
				#if defined(UNITY_STEREO_INSTANCING_ENABLED) || defined(UNITY_STEREO_MULTIVIEW_ENABLED)
				 	float rawDepth = SAMPLE_TEXTURE2D_ARRAY_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, unity_StereoEyeIndex, 0).r;
				#else
				 	float rawDepth = SAMPLE_DEPTH_TEXTURE_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, 0);
				#endif
				return rawDepth;
				#endif // REQUIRE_DEPTH_TEXTURE
				return 0;
			}
			
			float2 voronoihash2_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float3 mod2D289( float3 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float2 mod2D289( float2 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float3 permute( float3 x ) { return mod2D289( ( ( x * 34.0 ) + 1.0 ) * x ); }
			float snoise( float2 v )
			{
				const float4 C = float4( 0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439 );
				float2 i = floor( v + dot( v, C.yy ) );
				float2 x0 = v - i + dot( i, C.xx );
				float2 i1;
				i1 = ( x0.x > x0.y ) ? float2( 1.0, 0.0 ) : float2( 0.0, 1.0 );
				float4 x12 = x0.xyxy + C.xxzz;
				x12.xy -= i1;
				i = mod2D289( i );
				float3 p = permute( permute( i.y + float3( 0.0, i1.y, 1.0 ) ) + i.x + float3( 0.0, i1.x, 1.0 ) );
				float3 m = max( 0.5 - float3( dot( x0, x0 ), dot( x12.xy, x12.xy ), dot( x12.zw, x12.zw ) ), 0.0 );
				m = m * m;
				m = m * m;
				float3 x = 2.0 * frac( p * C.www ) - 1.0;
				float3 h = abs( x ) - 0.5;
				float3 ox = floor( x + 0.5 );
				float3 a0 = x - ox;
				m *= 1.79284291400159 - 0.85373472095314 * ( a0 * a0 + h * h );
				float3 g;
				g.x = a0.x * x0.x + h.x * x0.y;
				g.yz = a0.yz * x12.xz + h.yz * x12.yw;
				return 130.0 * dot( m, g );
			}
			
			float2 voronoihash8_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			

			struct SurfaceDescription
			{
				float Alpha;
				float AlphaClipThreshold;
			};

			VertexOutput VertexFunction(VertexInput v  )
			{
				VertexOutput o;
				ZERO_INITIALIZE(VertexOutput, o);

				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				float RF_Zero315 = 0.0;
				float3 temp_cast_0 = (RF_Zero315).xxx;
				float4 ase_clipPos = TransformObjectToHClip((v.positionOS).xyz);
				float4 screenPos = ComputeScreenPos(ase_clipPos);
				float4 ase_screenPosNorm = screenPos / screenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_3 );
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_6 );
				float3 temp_cast_7 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_7;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_7;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = v.ase_texcoord.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_8 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_8 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = v.ase_texcoord.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = v.ase_texcoord.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ), 0, 0.0) ).rgb , tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ), 0, 0.0) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_9 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_9 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_12 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = v.ase_texcoord.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_13 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_13 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_12;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_16 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_18 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = v.ase_texcoord.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_19 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_20 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_21 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_22 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_22;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2Dlod( _DeformNoiseTypeA, float4( UV20_g516, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_22;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = v.ase_texcoord.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_24 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_25 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_26 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_27 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_27;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_24;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_25;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_26;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2Dlod( _FoamTexture, float4( UV20_g786, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_27;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_28 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_28 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_32 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = v.ase_texcoord.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_35 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_36 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_37 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_38 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_38;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_35;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_36;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_37;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2Dlod( _WaveTypeA, float4( UV20_g790, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_38;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_39 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_39 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_43 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_45 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = v.ase_texcoord.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_46 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_47 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_48 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_49 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_49;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_46;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_47;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_48;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2Dlod( _DeformNoiseTypeB, float4( UV20_g512, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_49;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = v.ase_texcoord.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_51 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_52 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_53 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_54 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_54;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_51;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_52;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_53;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2Dlod( _WaveTypeB, float4( UV20_g540, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_54;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_55 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_55 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_58 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_58;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 linearToGamma1730 = FastLinearToSRGB( RF_SurfaceWave1466 );
				float3 linearToGamma1731 = FastLinearToSRGB( RF_FlowMask535 );
				float3 saferPower1714 = abs( ( 1.0 - linearToGamma1731 ) );
				float3 temp_cast_64 = (_EdgeWaveExponential).xxx;
				float3 RF_Vertex_Offset1726 = (( _Displacement )?( ( ( ( linearToGamma1730 * saturate( (pow( saferPower1714 , temp_cast_64 )*_EdgeWaveMultiplier + 0.0) ) ) * _WaveLength ) * v.normalOS ) ):( temp_cast_0 ));
				
				o.ase_texcoord = screenPos;
				
				o.ase_texcoord1.xy = v.ase_texcoord.xy;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord1.zw = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.positionOS.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif

				float3 vertexValue = RF_Vertex_Offset1726;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.positionOS.xyz = vertexValue;
				#else
					v.positionOS.xyz += vertexValue;
				#endif

				v.normalOS = v.normalOS;

				float3 positionWS = TransformObjectToWorld( v.positionOS.xyz );

				o.positionCS = TransformWorldToHClip(positionWS);

				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( VertexInput v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.positionOS;
				o.normalOS = v.normalOS;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
				return patch[id];
			}

			[domain("tri")]
			VertexOutput DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				VertexInput o = (VertexInput) 0;
				o.positionOS = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].vertex.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			VertexOutput vert ( VertexInput v )
			{
				return VertexFunction( v );
			}
			#endif

			half4 frag(VertexOutput IN ) : SV_TARGET
			{
				SurfaceDescription surfaceDescription = (SurfaceDescription)0;

				float3 temp_cast_0 = (_Transparency).xxx;
				float4 screenPos = IN.ase_texcoord;
				float4 ase_screenPosNorm = screenPos / screenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_3 );
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_6 );
				float3 temp_cast_7 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_7;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_7;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = IN.ase_texcoord1.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_8 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_8 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = IN.ase_texcoord1.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = IN.ase_texcoord1.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ) ).rgb , tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_9 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_9 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_12 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = IN.ase_texcoord1.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_13 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_13 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_12;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_16 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_18 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = IN.ase_texcoord1.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_19 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_20 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_21 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_22 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_22;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2D( _DeformNoiseTypeA, UV20_g516 ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_22;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = IN.ase_texcoord1.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_24 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_25 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_26 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_27 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_27;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_24;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_25;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_26;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2D( _FoamTexture, UV20_g786 ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_27;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_28 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_28 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_32 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = IN.ase_texcoord1.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_35 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_36 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_37 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_38 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_38;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_35;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_36;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_37;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2D( _WaveTypeA, UV20_g790 ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_38;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_39 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_39 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_43 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_45 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = IN.ase_texcoord1.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_46 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_47 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_48 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_49 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_49;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_46;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_47;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_48;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2D( _DeformNoiseTypeB, UV20_g512 ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_49;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = IN.ase_texcoord1.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_51 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_52 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_53 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_54 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_54;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_51;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_52;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_53;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2D( _WaveTypeB, UV20_g540 ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_54;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_55 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_55 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_58 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_58;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 RF_TransparentIntensity1436 = (( _TRSurfWaveToggle )?( ( _Transparency * RF_SurfaceWave1466 ) ):( temp_cast_0 ));
				

				surfaceDescription.Alpha = RF_TransparentIntensity1436.x;
				surfaceDescription.AlphaClipThreshold = 0.5;

				#if _ALPHATEST_ON
					float alphaClipThreshold = 0.01f;
					#if ALPHA_CLIP_THRESHOLD
						alphaClipThreshold = surfaceDescription.AlphaClipThreshold;
					#endif
					clip(surfaceDescription.Alpha - alphaClipThreshold);
				#endif

				half4 outColor = 0;

				#ifdef SCENESELECTIONPASS
					outColor = half4(_ObjectId, _PassValue, 1.0, 1.0);
				#elif defined(SCENEPICKINGPASS)
					outColor = _SelectionID;
				#endif

				return outColor;
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "ScenePickingPass"
			Tags { "LightMode"="Picking" }

			AlphaToMask Off

			HLSLPROGRAM

			

			#define _SPECULAR_SETUP 1
			#define ASE_FOG 1
			#define _ASE_LIGHTING_SIMPLE
			#define _SURFACE_TYPE_TRANSPARENT 1
			#define _NORMAL_DROPOFF_TS 1
			#define _EMISSION
			#define _NORMALMAP 1
			#define ASE_SRP_VERSION 140010
			#define REQUIRE_DEPTH_TEXTURE 1


			

			#pragma vertex vert
			#pragma fragment frag

			#if defined(_SPECULAR_SETUP) && defined(_ASE_LIGHTING_SIMPLE)
				#define _SPECULAR_COLOR 1
			#endif

		    #define SCENEPICKINGPASS 1

			#define ATTRIBUTES_NEED_NORMAL
			#define ATTRIBUTES_NEED_TANGENT
			#define SHADERPASS SHADERPASS_DEPTHONLY

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Input.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"

			
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRendering.hlsl"
           

			
            #if ASE_SRP_VERSION >=140009
			#include_with_pragmas "Packages/com.unity.render-pipelines.core/ShaderLibrary/FoveatedRenderingKeywords.hlsl"
			#endif
		

			#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"

			
            #if ASE_SRP_VERSION >=140007
			#include_with_pragmas "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DOTS.hlsl"
			#endif
		

			#include "Packages/com.unity.render-pipelines.universal/Editor/ShaderGraph/Includes/ShaderPass.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#define ASE_NEEDS_VERT_NORMAL
			#pragma shader_feature_local _CAUSTICB_OCT_CAUSTIC1 _CAUSTICB_OCT_CAUSTIC2 _CAUSTICB_OCT_CAUSTIC3 _CAUSTICB_OCT_CAUSTIC4 _CAUSTICB_OCT_CAUSTIC5 _CAUSTICB_OCT_CAUSTIC6 _CAUSTICB_OCT_CAUSTIC7 _CAUSTICB_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEBTYPE_NONE _NOISEBTYPE_VORONOICELL _NOISEBTYPE_VORONOICAUSTIC _NOISEBTYPE_PERLIN _NOISEBTYPE_TEXTURE
			#pragma shader_feature_local _CELLB_OCT_CELL1 _CELLB_OCT_CELL2 _CELLB_OCT_CELL3 _CELLB_OCT_CELL4 _CELLB_OCT_CELL5 _CELLB_OCT_CELL6 _CELLB_OCT_CELL7 _CELLB_OCT_CELL8
			#pragma shader_feature_local _CELLA_OCT_CELL1 _CELLA_OCT_CELL2 _CELLA_OCT_CELL3 _CELLA_OCT_CELL4 _CELLA_OCT_CELL5 _CELLA_OCT_CELL6 _CELLA_OCT_CELL7 _CELLA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICA_OCT_CAUSTIC1 _CAUSTICA_OCT_CAUSTIC2 _CAUSTICA_OCT_CAUSTIC3 _CAUSTICA_OCT_CAUSTIC4 _CAUSTICA_OCT_CAUSTIC5 _CAUSTICA_OCT_CAUSTIC6 _CAUSTICA_OCT_CAUSTIC7 _CAUSTICA_OCT_CAUSTIC8
			#pragma shader_feature_local _NOISEATYPE_NONE _NOISEATYPE_VORONOICELL _NOISEATYPE_VORONOICAUSTIC _NOISEATYPE_PERLIN _NOISEATYPE_TEXTURE
			#pragma shader_feature_local _WAVEBTYPE_NONE _WAVEBTYPE_VORONOICELL _WAVEBTYPE_VORONOICAUSTIC _WAVEBTYPE_PERLIN _WAVEBTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICWAVEB_OCT_CAUSTIC1 _CAUSTICWAVEB_OCT_CAUSTIC2 _CAUSTICWAVEB_OCT_CAUSTIC3 _CAUSTICWAVEB_OCT_CAUSTIC4 _CAUSTICWAVEB_OCT_CAUSTIC5 _CAUSTICWAVEB_OCT_CAUSTIC6 _CAUSTICWAVEB_OCT_CAUSTIC7 _CAUSTICWAVEB_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLWAVEB_OCT_CELL1 _CELLWAVEB_OCT_CELL2 _CELLWAVEB_OCT_CELL3 _CELLWAVEB_OCT_CELL4 _CELLWAVEB_OCT_CELL5 _CELLWAVEB_OCT_CELL6 _CELLWAVEB_OCT_CELL7 _CELLWAVEB_OCT_CELL8
			#pragma shader_feature_local _WAVEAGRADETYPE_LINEAR _WAVEAGRADETYPE_NORMAL _WAVEAGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBGRADETYPE_LINEAR _WAVEBGRADETYPE_NORMAL _WAVEBGRADETYPE_GAMMA
			#pragma shader_feature_local _DEPTHGRADETYPE_LINEAR _DEPTHGRADETYPE_NORMAL _DEPTHGRADETYPE_GAMMA
			#pragma shader_feature_local _FLOWMAPTYPE_DEPTH _FLOWMAPTYPE_FLOWTEXTURE
			#pragma shader_feature_local _MASK_ON
			#pragma shader_feature_local _MASKGRADETYPE_LINEAR _MASKGRADETYPE_NORMAL _MASKGRADETYPE_GAMMA
			#pragma shader_feature_local _TXTGRADETYPE_LINEAR _TXTGRADETYPE_NORMAL _TXTGRADETYPE_GAMMA
			#pragma shader_feature_local _WAVEBINVERT_ON
			#pragma shader_feature_local _WAVEAINVERT_ON
			#pragma shader_feature_local _SELECTWAVETYPE_LAYERA _SELECTWAVETYPE_LAYERB _SELECTWAVETYPE_MULTIPLY _SELECTWAVETYPE_ADD _SELECTWAVETYPE_SUBTRACT _SELECTWAVETYPE_DIVIDE _SELECTWAVETYPE_DOT _SELECTWAVETYPE_FMOD _SELECTWAVETYPE_FMODINVERT
			#pragma shader_feature_local _DFAGRADETYPE_LINEAR _DFAGRADETYPE_NORMAL _DFAGRADETYPE_GAMMA
			#pragma shader_feature_local _DFBGRADETYPE_LINEAR _DFBGRADETYPE_NORMAL _DFBGRADETYPE_GAMMA
			#pragma shader_feature_local _DFNOISEAINVERT_ON
			#pragma shader_feature_local _DFNOISEBINVERT_ON
			#pragma shader_feature_local _SELECTDEFORMTYPE_LAYERA _SELECTDEFORMTYPE_LAYERB _SELECTDEFORMTYPE_MULTIPLY _SELECTDEFORMTYPE_ADD _SELECTDEFORMTYPE_SUBTRACT _SELECTDEFORMTYPE_DIVIDE _SELECTDEFORMTYPE_DOT _SELECTDEFORMTYPE_FMOD _SELECTDEFORMTYPE_FMODINVERT
			#pragma shader_feature_local _FOAMTYPE_NONE _FOAMTYPE_VORONOICELL _FOAMTYPE_VORONOICAUSTIC _FOAMTYPE_PERLIN _FOAMTYPE_TEXTURE
			#pragma shader_feature_local _CAUSTICFOAM_OCT_CAUSTIC1 _CAUSTICFOAM_OCT_CAUSTIC2 _CAUSTICFOAM_OCT_CAUSTIC3 _CAUSTICFOAM_OCT_CAUSTIC4 _CAUSTICFOAM_OCT_CAUSTIC5 _CAUSTICFOAM_OCT_CAUSTIC6 _CAUSTICFOAM_OCT_CAUSTIC7 _CAUSTICFOAM_OCT_CAUSTIC8
			#pragma shader_feature_local _CELLFOAM_OCT_CELL1 _CELLFOAM_OCT_CELL2 _CELLFOAM_OCT_CELL3 _CELLFOAM_OCT_CELL4 _CELLFOAM_OCT_CELL5 _CELLFOAM_OCT_CELL6 _CELLFOAM_OCT_CELL7 _CELLFOAM_OCT_CELL8
			#pragma shader_feature_local _CELLWAVEA_OCT_CELL1 _CELLWAVEA_OCT_CELL2 _CELLWAVEA_OCT_CELL3 _CELLWAVEA_OCT_CELL4 _CELLWAVEA_OCT_CELL5 _CELLWAVEA_OCT_CELL6 _CELLWAVEA_OCT_CELL7 _CELLWAVEA_OCT_CELL8
			#pragma shader_feature_local _CAUSTICWAVEA_OCT_CAUSTIC1 _CAUSTICWAVEA_OCT_CAUSTIC2 _CAUSTICWAVEA_OCT_CAUSTIC3 _CAUSTICWAVEA_OCT_CAUSTIC4 _CAUSTICWAVEA_OCT_CAUSTIC5 _CAUSTICWAVEA_OCT_CAUSTIC6 _CAUSTICWAVEA_OCT_CAUSTIC7 _CAUSTICWAVEA_OCT_CAUSTIC8
			#pragma shader_feature_local _WAVEATYPE_NONE _WAVEATYPE_VORONOICELL _WAVEATYPE_VORONOICAUSTIC _WAVEATYPE_PERLIN _WAVEATYPE_TEXTURE
			#pragma shader_feature_local _FOAMINVERT_ON
			#pragma shader_feature_local _FOAMGRADETYPE_LINEAR _FOAMGRADETYPE_NORMAL _FOAMGRADETYPE_GAMMA


			struct VertexInput
			{
				float4 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct VertexOutput
			{
				float4 positionCS : SV_POSITION;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord1 : TEXCOORD1;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			CBUFFER_START(UnityPerMaterial)
			float4 _ReflectColor;
			float4 _MaskMap_ST;
			float4 _FogColor;
			float4 _MirrorRefColor;
			float3 _RefractColor;
			float3 _SpecularColor;
			float _FlowTextureAmplitude;
			float _FlowTextureExponential;
			float _FlowTextureContrast;
			float _MaskGradeAmplitude;
			float _MaskGradePower;
			float _ShoreIntensity;
			float _FoamIntensity;
			float _BVoronoiAngleSpeed;
			float _MapChangeSpeed;
			float _FoamVoronoiAngleSpeed;
			float _FoamVoronoiSmooth;
			float _FoamDeformToggle;
			float _DefWeightFoam;
			float _FoamTileX;
			float _FoamTileY;
			float _FoamOffsetX;
			float _FoamSpeedX;
			float _FoamNoiseScale;
			float _RotateB;
			float _BTileX;
			float _BTileY;
			float _ShoreBumpIntensity;
			float _NormalGradePower;
			float _NormalIntensity;
			float _foamFold;
			float _otherFold;
			float _Displacement;
			float _ShoreFoamToggle;
			float _DepthNegative;
			float _OffsetB;
			float _DepthDistance;
			float _DepthSize;
			float _MapExponential;
			float _InfluenceFlow;
			float _ATileX;
			float _ATileY;
			float _FlowSpeed;
			float _RotateA;
			float _FoamOverallSpeed;
			float _DepthExponential;
			float _FoamSpeedY;
			float _FoamAnchorY;
			float _FoamAnchorX;
			float _ScreenContrast;
			float _FogToggle;
			float _Reflect;
			float _CMReflect;
			float _ReflectionStrength;
			float _CubeMapRotate;
			float _CMXPos;
			float _CMYPos;
			float _CMZPos;
			float _ReflectionMultiplier;
			float _MirrorReflect;
			float _MirrorRefIntensity;
			float _FogDepthDistance;
			float _FogDepthExponential;
			float _FogDepthSize;
			float _Specular;
			float _Smoothness;
			float _RefractionToggle;
			float _NormalToggle;
			float _SSBluricTransparent;
			float _SurfaceIntensity;
			float _MiddleWaveBumpIntensity;
			float _FoamRotateSpeed;
			float _FoamRotate;
			float _FoamAmplitude;
			float _FoamExp;
			float _FoamContrast;
			float _MiddleFoamToggle;
			float _MiddleWaveIntensity;
			float _FoamOffsetY;
			float _MidFlowMask;
			float _DefWeightA;
			float _MidBDeformToggle;
			float _DefWeightB;
			float _EdgeWaveExponential;
			float _EdgeWaveMultiplier;
			float _WaveLength;
			float _VT_Intensity;
			float _SurfaceToggle;
			float _MidADeformToggle;
			float _TRSurfWaveToggle;
			float _PatternMultiplier;
			float _SSTileY;
			float _ANoiseScale;
			float _AVoronoiSmooth;
			float _AVoronoiAngleSpeed;
			float _NTypeARotate;
			float _WAVoronoiAngleSpeed;
			float _WAVoronoiSmooth;
			float _WANoiseScale;
			float _WTypeATileX;
			float _NTypeATileX;
			float _WTypeATileY;
			float _WTypeAOffsetY;
			float _WTypeASpeedX;
			float _WTypeASpeedY;
			float _WTypeAOverallSpeed;
			float _WTypeARotate;
			float _WTypeARotateSpeed;
			float _WTypeAAnchorX;
			float _WTypeAAnchorY;
			float _WTypeAOffsetX;
			float _NTypeATileY;
			float _NTypeAOffsetX;
			float _NTypeAOffsetY;
			float _BNoiseScale;
			float _NTypeBTileX;
			float _NTypeBTileY;
			float _NTypeBOffsetX;
			float _NTypeBOffsetY;
			float _NTypeBSpeedX;
			float _NTypeBSpeedY;
			float _NTypeBOverallSpeed;
			float _NTypeBAnchorX;
			float _NTypeBAnchorY;
			float _BVoronoiSmooth;
			float _NTypeBRotateSpeed;
			float _NTypeBRotate;
			float _NTypeAAnchorY;
			float _NTypeAAnchorX;
			float _NTypeARotateSpeed;
			float _NTypeAOverallSpeed;
			float _NTypeASpeedY;
			float _NTypeASpeedX;
			float _WBVoronoiAngleSpeed;
			float _WBVoronoiSmooth;
			float _WBNoiseScale;
			float _WTypeBTileX;
			float _dfNoiseBFold;
			float _dfNoiseAFold;
			float _DeformFold;
			float _CheckFlowMap;
			float _fMapFold;
			float _wAFold;
			float _CheckMidWave;
			float _DFBAmplitude;
			float _DFAAmplitude;
			float _DFBExp;
			float _DFAExp;
			float _NoiseAContrast;
			float _NoiseBContrast;
			float _NA_Intensity;
			float _NB_Intensity;
			float _wBFold;
			float _SSTxtInfo;
			float _SSSize;
			float _SSTileX;
			float _dMaskFold;
			float _PatternHeight;
			float _fMaskFold;
			float _CheckDef;
			float _WTypeBTileY;
			float _WTypeBOffsetX;
			float _WTypeBOffsetY;
			float _WTypeBSpeedX;
			float _WTypeBSpeedY;
			float _WTypeBOverallSpeed;
			float _WTypeBRotate;
			float _WTypeBRotateSpeed;
			float _WTypeBAnchorX;
			float _WTypeBAnchorY;
			float _WaveAAmplitude;
			float _WaveBAmplitude;
			float _WaveAExp;
			float _WaveBExp;
			float _MGradeAmplitude;
			float _WaveBContrast;
			float _WaveAContrast;
			float _WaveAIntensity;
			float _WaveBIntensity;
			float _fTxtFold;
			float _Transparency;
			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			CBUFFER_END

			#ifdef SCENEPICKINGPASS
				float4 _SelectionID;
			#endif

			#ifdef SCENESELECTIONPASS
				int _ObjectId;
				int _PassValue;
			#endif

			sampler2D _DeformNoiseTypeB;
			sampler2D _DeformNoiseTypeA;
			sampler2D _WaveTypeB;
			sampler2D _WaveTypeA;
			sampler2D _TextureMap;
			sampler2D _FlowMap;
			sampler2D _MaskMap;
			sampler2D _FoamTexture;


			float SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD(float2 uv)
			{
				#if defined(REQUIRE_DEPTH_TEXTURE)
				#if defined(UNITY_STEREO_INSTANCING_ENABLED) || defined(UNITY_STEREO_MULTIVIEW_ENABLED)
				 	float rawDepth = SAMPLE_TEXTURE2D_ARRAY_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, unity_StereoEyeIndex, 0).r;
				#else
				 	float rawDepth = SAMPLE_DEPTH_TEXTURE_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, uv, 0);
				#endif
				return rawDepth;
				#endif // REQUIRE_DEPTH_TEXTURE
				return 0;
			}
			
			float2 voronoihash2_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g519( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g519( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g519( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g518( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g518( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g518( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float3 mod2D289( float3 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float2 mod2D289( float2 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float3 permute( float3 x ) { return mod2D289( ( ( x * 34.0 ) + 1.0 ) * x ); }
			float snoise( float2 v )
			{
				const float4 C = float4( 0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439 );
				float2 i = floor( v + dot( v, C.yy ) );
				float2 x0 = v - i + dot( i, C.xx );
				float2 i1;
				i1 = ( x0.x > x0.y ) ? float2( 1.0, 0.0 ) : float2( 0.0, 1.0 );
				float4 x12 = x0.xyxy + C.xxzz;
				x12.xy -= i1;
				i = mod2D289( i );
				float3 p = permute( permute( i.y + float3( 0.0, i1.y, 1.0 ) ) + i.x + float3( 0.0, i1.x, 1.0 ) );
				float3 m = max( 0.5 - float3( dot( x0, x0 ), dot( x12.xy, x12.xy ), dot( x12.zw, x12.zw ) ), 0.0 );
				m = m * m;
				m = m * m;
				float3 x = 2.0 * frac( p * C.www ) - 1.0;
				float3 h = abs( x ) - 0.5;
				float3 ox = floor( x + 0.5 );
				float3 a0 = x - ox;
				m *= 1.79284291400159 - 0.85373472095314 * ( a0 * a0 + h * h );
				float3 g;
				g.x = a0.x * x0.x + h.x * x0.y;
				g.yz = a0.yz * x12.xz + h.yz * x12.yw;
				return 130.0 * dot( m, g );
			}
			
			float2 voronoihash8_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g788( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g788( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g788( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g787( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g787( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g787( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g792( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g792( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g792( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g791( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g791( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g791( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash2_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash8_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g514( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g514( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g514( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g513( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g513( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g513( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash18_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash17_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash10_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash12_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash24_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash23_g542( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g542( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g542( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 //		if( d<F1 ) {
				 //			F2 = F1;
				 			float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (F1 - d) / smoothness); F1 = lerp(F1, d, h) - smoothness * h * (1.0 - h);mg = g; mr = r; id = o;
				 //		} else if( d<F2 ) {
				 //			F2 = d;
				
				 //		}
				 	}
				}
				return F1;
			}
			
			float2 voronoihash2_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi2_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash2_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash8_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi8_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash8_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash18_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi18_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash18_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash17_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi17_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash17_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash10_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi10_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash10_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash12_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi12_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash12_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash24_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi24_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash24_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			
			float2 voronoihash23_g541( float2 p )
			{
				
				p = float2( dot( p, float2( 127.1, 311.7 ) ), dot( p, float2( 269.5, 183.3 ) ) );
				return frac( sin( p ) *43758.5453);
			}
			
			float voronoi23_g541( float2 v, float time, inout float2 id, inout float2 mr, float smoothness, inout float2 smoothId )
			{
				float2 n = floor( v );
				float2 f = frac( v );
				float F1 = 8.0;
				float F2 = 8.0; float2 mg = 0;
				for ( int j = -1; j <= 1; j++ )
				{
					for ( int i = -1; i <= 1; i++ )
				 	{
				 		float2 g = float2( i, j );
				 		float2 o = voronoihash23_g541( n + g );
						o = ( sin( time + o * 6.2831 ) * 0.5 + 0.5 ); float2 r = f - g - o;
						float d = 0.5 * dot( r, r );
				 		if( d<F1 ) {
				 			F2 = F1;
				 			F1 = d; mg = g; mr = r; id = o;
				 		} else if( d<F2 ) {
				 			F2 = d;
				
				 		}
				 	}
				}
				return (F2 + F1) * 0.5;
			}
			

			struct SurfaceDescription
			{
				float Alpha;
				float AlphaClipThreshold;
			};

			VertexOutput VertexFunction(VertexInput v  )
			{
				VertexOutput o;
				ZERO_INITIALIZE(VertexOutput, o);

				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				float RF_Zero315 = 0.0;
				float3 temp_cast_0 = (RF_Zero315).xxx;
				float4 ase_clipPos = TransformObjectToHClip((v.positionOS).xyz);
				float4 screenPos = ComputeScreenPos(ase_clipPos);
				float4 ase_screenPosNorm = screenPos / screenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH_LOD( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_3 );
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_6 );
				float3 temp_cast_7 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_7;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_7;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = v.ase_texcoord.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2Dlod( _FlowMap, float4( uv_FlowMap1_g762, 0, 0.0) ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_8 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_8 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = v.ase_texcoord.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = v.ase_texcoord.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ), 0, 0.0) ).rgb , tex2Dlod( _TextureMap, float4( ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ), 0, 0.0) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_9 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_9 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_12 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = v.ase_texcoord.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2Dlod( _MaskMap, float4( uv_MaskMap, 0, 0.0) ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_13 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_13 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_12;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_16 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_18 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = v.ase_texcoord.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_19 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_20 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_21 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_22 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_22;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2Dlod( _DeformNoiseTypeA, float4( UV20_g516, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_22;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = v.ase_texcoord.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_24 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_25 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_26 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_27 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_27;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_24;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_25;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_26;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2Dlod( _FoamTexture, float4( UV20_g786, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_27;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_28 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_28 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_32 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = v.ase_texcoord.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_35 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_36 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_37 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_38 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_38;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_35;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_36;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_37;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2Dlod( _WaveTypeA, float4( UV20_g790, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_38;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_39 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_39 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_43 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_45 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = v.ase_texcoord.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_46 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_47 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_48 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_49 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_49;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_46;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_47;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_48;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2Dlod( _DeformNoiseTypeB, float4( UV20_g512, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_49;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = v.ase_texcoord.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_51 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_52 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_53 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_54 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_54;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_51;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_52;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_53;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2Dlod( _WaveTypeB, float4( UV20_g540, 0, 0.0) ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_54;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_55 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_55 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_58 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_58;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 linearToGamma1730 = FastLinearToSRGB( RF_SurfaceWave1466 );
				float3 linearToGamma1731 = FastLinearToSRGB( RF_FlowMask535 );
				float3 saferPower1714 = abs( ( 1.0 - linearToGamma1731 ) );
				float3 temp_cast_64 = (_EdgeWaveExponential).xxx;
				float3 RF_Vertex_Offset1726 = (( _Displacement )?( ( ( ( linearToGamma1730 * saturate( (pow( saferPower1714 , temp_cast_64 )*_EdgeWaveMultiplier + 0.0) ) ) * _WaveLength ) * v.normalOS ) ):( temp_cast_0 ));
				
				o.ase_texcoord = screenPos;
				
				o.ase_texcoord1.xy = v.ase_texcoord.xy;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord1.zw = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.positionOS.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif

				float3 vertexValue = RF_Vertex_Offset1726;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.positionOS.xyz = vertexValue;
				#else
					v.positionOS.xyz += vertexValue;
				#endif

				v.normalOS = v.normalOS;

				float3 positionWS = TransformObjectToWorld( v.positionOS.xyz );
				o.positionCS = TransformWorldToHClip(positionWS);

				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( VertexInput v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.positionOS;
				o.normalOS = v.normalOS;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
				return patch[id];
			}

			[domain("tri")]
			VertexOutput DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				VertexInput o = (VertexInput) 0;
				o.positionOS = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].vertex.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			VertexOutput vert ( VertexInput v )
			{
				return VertexFunction( v );
			}
			#endif

			half4 frag(VertexOutput IN ) : SV_TARGET
			{
				SurfaceDescription surfaceDescription = (SurfaceDescription)0;

				float3 temp_cast_0 = (_Transparency).xxx;
				float4 screenPos = IN.ase_texcoord;
				float4 ase_screenPosNorm = screenPos / screenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float screenDepth1_g761 = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH( ase_screenPosNorm.xy ),_ZBufferParams);
				float distanceDepth1_g761 = abs( ( screenDepth1_g761 - LinearEyeDepth( ase_screenPosNorm.z,_ZBufferParams ) ) / ( _DepthDistance ) );
				float saferPower3_g761 = abs( distanceDepth1_g761 );
				float temp_output_29_0_g761 = ( ( saturate( pow( saferPower3_g761 , max( _DepthExponential , 0.001 ) ) ) * _ProjectionParams.x ) - ( ase_screenPosNorm.w + (-1.0 + (( _DepthSize + 1.0 ) - 1.0) * (0.0 - -1.0) / (0.0 - 1.0)) ) );
				float3 temp_cast_2 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_3 = (temp_output_29_0_g761).xxx;
				float3 gammaToLinear30_g761 = SRGBToLinear( temp_cast_3 );
				float3 temp_cast_4 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_5 = (temp_output_29_0_g761).xxx;
				float3 temp_cast_6 = (temp_output_29_0_g761).xxx;
				float3 linearToGamma31_g761 = LinearToSRGB( temp_cast_6 );
				float3 temp_cast_7 = (temp_output_29_0_g761).xxx;
				#if defined( _DEPTHGRADETYPE_LINEAR )
				float3 staticSwitch32_g761 = gammaToLinear30_g761;
				#elif defined( _DEPTHGRADETYPE_NORMAL )
				float3 staticSwitch32_g761 = temp_cast_7;
				#elif defined( _DEPTHGRADETYPE_GAMMA )
				float3 staticSwitch32_g761 = linearToGamma31_g761;
				#else
				float3 staticSwitch32_g761 = temp_cast_7;
				#endif
				float3 temp_output_36_0_g761 = saturate( staticSwitch32_g761 );
				float3 RF_DepthMap101_g762 = (( _DepthNegative )?( ( 1.0 - temp_output_36_0_g761 ) ):( temp_output_36_0_g761 ));
				float2 uv_FlowMap1_g762 = IN.ase_texcoord1.xy;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch99_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#else
				float3 staticSwitch99_g762 = tex2D( _FlowMap, uv_FlowMap1_g762 ).rgb;
				#endif
				float2 saferPower91_g762 = abs( (staticSwitch99_g762).xy );
				float2 temp_cast_8 = (_MapExponential).xx;
				float2 temp_output_34_0_g762 = ( ( ( pow( saferPower91_g762 , temp_cast_8 ) + -1.0 ) * 1.0 ) * float2( -1,1 ) );
				float temp_output_58_0_g762 = _InfluenceFlow;
				float2 appendResult22_g764 = (float2(_ATileX , _ATileY));
				float mulTime42_g762 = _TimeParameters.x * _FlowSpeed;
				float temp_output_41_0_g762 = frac( mulTime42_g762 );
				float2 appendResult5_g764 = (float2(temp_output_41_0_g762 , temp_output_41_0_g762));
				float2 texCoord2_g764 = IN.ase_texcoord1.xy * appendResult22_g764 + appendResult5_g764;
				float2 appendResult1_g764 = (float2(0.0 , 0.0));
				float RF_9064_g762 = 90.0;
				float cos3_g764 = cos( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float sin3_g764 = sin( radians( ( RF_9064_g762 * floor( _RotateA ) ) ) );
				float2 rotator3_g764 = mul( texCoord2_g764 - appendResult1_g764 , float2x2( cos3_g764 , -sin3_g764 , sin3_g764 , cos3_g764 )) + appendResult1_g764;
				float2 appendResult22_g763 = (float2(_BTileX , _BTileY));
				float temp_output_94_0_g762 = frac( ( temp_output_41_0_g762 + _OffsetB ) );
				float2 appendResult5_g763 = (float2(temp_output_94_0_g762 , temp_output_94_0_g762));
				float2 texCoord2_g763 = IN.ase_texcoord1.xy * appendResult22_g763 + appendResult5_g763;
				float2 appendResult1_g763 = (float2(0.0 , 0.0));
				float cos3_g763 = cos( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float sin3_g763 = sin( radians( ( floor( _RotateB ) * RF_9064_g762 ) ) );
				float2 rotator3_g763 = mul( texCoord2_g763 - appendResult1_g763 , float2x2( cos3_g763 , -sin3_g763 , sin3_g763 , cos3_g763 )) + appendResult1_g763;
				float mulTime15_g762 = _TimeParameters.x * _MapChangeSpeed;
				float3 lerpResult32_g762 = lerp( tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g764 ) ).rgb , tex2D( _TextureMap, ( ( temp_output_34_0_g762 * temp_output_58_0_g762 ) + rotator3_g763 ) ).rgb , abs( (0.0 + (sin( mulTime15_g762 ) - -1.0) * (1.0 - 0.0) / (1.0 - -1.0)) ));
				float3 gammaToLinear76_g762 = SRGBToLinear( lerpResult32_g762 );
				float3 linearToGamma77_g762 = LinearToSRGB( lerpResult32_g762 );
				#if defined( _TXTGRADETYPE_LINEAR )
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#elif defined( _TXTGRADETYPE_NORMAL )
				float3 staticSwitch78_g762 = lerpResult32_g762;
				#elif defined( _TXTGRADETYPE_GAMMA )
				float3 staticSwitch78_g762 = linearToGamma77_g762;
				#else
				float3 staticSwitch78_g762 = gammaToLinear76_g762;
				#endif
				float3 temp_cast_9 = (_FlowTextureExponential).xxx;
				float4 lerpResult5_g766 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( pow( (staticSwitch78_g762*_FlowTextureAmplitude + 0.0) , temp_cast_9 ) , 0.0 ) , _FlowTextureContrast);
				float luminance120_g762 = Luminance(saturate( lerpResult5_g766 ).rgb);
				float temp_output_82_0_g762 = saturate( luminance120_g762 );
				float3 temp_cast_12 = (temp_output_82_0_g762).xxx;
				float2 uv_MaskMap = IN.ase_texcoord1.xy * _MaskMap_ST.xy + _MaskMap_ST.zw;
				#if defined( _FLOWMAPTYPE_DEPTH )
				float3 staticSwitch104_g762 = RF_DepthMap101_g762;
				#elif defined( _FLOWMAPTYPE_FLOWTEXTURE )
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#else
				float3 staticSwitch104_g762 = tex2D( _MaskMap, uv_MaskMap ).rgb;
				#endif
				float3 saferPower21_g762 = abs( (staticSwitch104_g762*_MaskGradeAmplitude + 0.0) );
				float3 temp_cast_13 = (_MaskGradePower).xxx;
				float3 gammaToLinear19_g762 = SRGBToLinear( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				float3 linearToGamma20_g762 = LinearToSRGB( saturate( pow( saferPower21_g762 , temp_cast_13 ) ) );
				#if defined( _MASKGRADETYPE_LINEAR )
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#elif defined( _MASKGRADETYPE_NORMAL )
				float3 staticSwitch23_g762 = saturate( pow( saferPower21_g762 , temp_cast_13 ) );
				#elif defined( _MASKGRADETYPE_GAMMA )
				float3 staticSwitch23_g762 = linearToGamma20_g762;
				#else
				float3 staticSwitch23_g762 = gammaToLinear19_g762;
				#endif
				#ifdef _MASK_ON
				float3 staticSwitch75_g762 = ( staticSwitch23_g762 * temp_output_82_0_g762 );
				#else
				float3 staticSwitch75_g762 = temp_cast_12;
				#endif
				float3 RF_FlowMap536 = staticSwitch75_g762;
				float3 temp_output_1637_0 = ( RF_FlowMap536 * _ShoreIntensity );
				float RF_Zero56_g786 = 0.0;
				float3 temp_cast_16 = (RF_Zero56_g786).xxx;
				float temp_output_36_0_g786 = _FoamNoiseScale;
				float temp_output_5_0_g788 = temp_output_36_0_g786;
				float mulTime3_g786 = _TimeParameters.x * _FoamVoronoiAngleSpeed;
				float temp_output_4_0_g788 = mulTime3_g786;
				float time2_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId2_g788 = 0;
				float temp_output_28_0_g788 = _FoamVoronoiSmooth;
				float voronoiSmooth2_g788 = temp_output_28_0_g788;
				float RF_Zero56_g516 = 0.0;
				float3 temp_cast_18 = (RF_Zero56_g516).xxx;
				float temp_output_36_0_g516 = _ANoiseScale;
				float temp_output_5_0_g519 = temp_output_36_0_g516;
				float mulTime3_g516 = _TimeParameters.x * _AVoronoiAngleSpeed;
				float temp_output_4_0_g519 = mulTime3_g516;
				float time2_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId2_g519 = 0;
				float temp_output_28_0_g519 = _AVoronoiSmooth;
				float voronoiSmooth2_g519 = temp_output_28_0_g519;
				float2 appendResult39_g517 = (float2(_NTypeATileX , _NTypeATileY));
				float temp_output_53_0_g517 = _NTypeAOverallSpeed;
				float mulTime27_g517 = _TimeParameters.x * ( _NTypeASpeedX * temp_output_53_0_g517 );
				float mulTime28_g517 = _TimeParameters.x * ( _NTypeASpeedY * temp_output_53_0_g517 );
				float2 appendResult34_g517 = (float2(( _NTypeAOffsetX + mulTime27_g517 ) , ( mulTime28_g517 + _NTypeAOffsetY )));
				float2 texCoord37_g517 = IN.ase_texcoord1.xy * appendResult39_g517 + appendResult34_g517;
				float2 appendResult36_g517 = (float2(_NTypeAAnchorX , _NTypeAAnchorY));
				float mulTime29_g517 = _TimeParameters.x * _NTypeARotateSpeed;
				float cos38_g517 = cos( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float sin38_g517 = sin( ( radians( mulTime29_g517 ) + radians( _NTypeARotate ) ) );
				float2 rotator38_g517 = mul( texCoord37_g517 - appendResult36_g517 , float2x2( cos38_g517 , -sin38_g517 , sin38_g517 , cos38_g517 )) + appendResult36_g517;
				float2 UV20_g516 = rotator38_g517;
				float2 temp_output_3_0_g519 = UV20_g516;
				float2 coords2_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id2_g519 = 0;
				float2 uv2_g519 = 0;
				float voroi2_g519 = voronoi2_g519( coords2_g519, time2_g519, id2_g519, uv2_g519, voronoiSmooth2_g519, voronoiSmoothId2_g519 );
				float time8_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId8_g519 = 0;
				float voronoiSmooth8_g519 = temp_output_28_0_g519;
				float2 coords8_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id8_g519 = 0;
				float2 uv8_g519 = 0;
				float fade8_g519 = 0.5;
				float voroi8_g519 = 0;
				float rest8_g519 = 0;
				for( int it8_g519 = 0; it8_g519 <2; it8_g519++ ){
				voroi8_g519 += fade8_g519 * voronoi8_g519( coords8_g519, time8_g519, id8_g519, uv8_g519, voronoiSmooth8_g519,voronoiSmoothId8_g519 );
				rest8_g519 += fade8_g519;
				coords8_g519 *= 2;
				fade8_g519 *= 0.5;
				}//Voronoi8_g519
				voroi8_g519 /= rest8_g519;
				float time18_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId18_g519 = 0;
				float voronoiSmooth18_g519 = temp_output_28_0_g519;
				float2 coords18_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id18_g519 = 0;
				float2 uv18_g519 = 0;
				float fade18_g519 = 0.5;
				float voroi18_g519 = 0;
				float rest18_g519 = 0;
				for( int it18_g519 = 0; it18_g519 <3; it18_g519++ ){
				voroi18_g519 += fade18_g519 * voronoi18_g519( coords18_g519, time18_g519, id18_g519, uv18_g519, voronoiSmooth18_g519,voronoiSmoothId18_g519 );
				rest18_g519 += fade18_g519;
				coords18_g519 *= 2;
				fade18_g519 *= 0.5;
				}//Voronoi18_g519
				voroi18_g519 /= rest18_g519;
				float time17_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId17_g519 = 0;
				float voronoiSmooth17_g519 = temp_output_28_0_g519;
				float2 coords17_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id17_g519 = 0;
				float2 uv17_g519 = 0;
				float fade17_g519 = 0.5;
				float voroi17_g519 = 0;
				float rest17_g519 = 0;
				for( int it17_g519 = 0; it17_g519 <4; it17_g519++ ){
				voroi17_g519 += fade17_g519 * voronoi17_g519( coords17_g519, time17_g519, id17_g519, uv17_g519, voronoiSmooth17_g519,voronoiSmoothId17_g519 );
				rest17_g519 += fade17_g519;
				coords17_g519 *= 2;
				fade17_g519 *= 0.5;
				}//Voronoi17_g519
				voroi17_g519 /= rest17_g519;
				float time10_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId10_g519 = 0;
				float voronoiSmooth10_g519 = temp_output_28_0_g519;
				float2 coords10_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id10_g519 = 0;
				float2 uv10_g519 = 0;
				float fade10_g519 = 0.5;
				float voroi10_g519 = 0;
				float rest10_g519 = 0;
				for( int it10_g519 = 0; it10_g519 <5; it10_g519++ ){
				voroi10_g519 += fade10_g519 * voronoi10_g519( coords10_g519, time10_g519, id10_g519, uv10_g519, voronoiSmooth10_g519,voronoiSmoothId10_g519 );
				rest10_g519 += fade10_g519;
				coords10_g519 *= 2;
				fade10_g519 *= 0.5;
				}//Voronoi10_g519
				voroi10_g519 /= rest10_g519;
				float time12_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId12_g519 = 0;
				float voronoiSmooth12_g519 = temp_output_28_0_g519;
				float2 coords12_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id12_g519 = 0;
				float2 uv12_g519 = 0;
				float fade12_g519 = 0.5;
				float voroi12_g519 = 0;
				float rest12_g519 = 0;
				for( int it12_g519 = 0; it12_g519 <6; it12_g519++ ){
				voroi12_g519 += fade12_g519 * voronoi12_g519( coords12_g519, time12_g519, id12_g519, uv12_g519, voronoiSmooth12_g519,voronoiSmoothId12_g519 );
				rest12_g519 += fade12_g519;
				coords12_g519 *= 2;
				fade12_g519 *= 0.5;
				}//Voronoi12_g519
				voroi12_g519 /= rest12_g519;
				float time24_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId24_g519 = 0;
				float voronoiSmooth24_g519 = temp_output_28_0_g519;
				float2 coords24_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id24_g519 = 0;
				float2 uv24_g519 = 0;
				float fade24_g519 = 0.5;
				float voroi24_g519 = 0;
				float rest24_g519 = 0;
				for( int it24_g519 = 0; it24_g519 <7; it24_g519++ ){
				voroi24_g519 += fade24_g519 * voronoi24_g519( coords24_g519, time24_g519, id24_g519, uv24_g519, voronoiSmooth24_g519,voronoiSmoothId24_g519 );
				rest24_g519 += fade24_g519;
				coords24_g519 *= 2;
				fade24_g519 *= 0.5;
				}//Voronoi24_g519
				voroi24_g519 /= rest24_g519;
				float time23_g519 = temp_output_4_0_g519;
				float2 voronoiSmoothId23_g519 = 0;
				float voronoiSmooth23_g519 = temp_output_28_0_g519;
				float2 coords23_g519 = temp_output_3_0_g519 * temp_output_5_0_g519;
				float2 id23_g519 = 0;
				float2 uv23_g519 = 0;
				float fade23_g519 = 0.5;
				float voroi23_g519 = 0;
				float rest23_g519 = 0;
				for( int it23_g519 = 0; it23_g519 <8; it23_g519++ ){
				voroi23_g519 += fade23_g519 * voronoi23_g519( coords23_g519, time23_g519, id23_g519, uv23_g519, voronoiSmooth23_g519,voronoiSmoothId23_g519 );
				rest23_g519 += fade23_g519;
				coords23_g519 *= 2;
				fade23_g519 *= 0.5;
				}//Voronoi23_g519
				voroi23_g519 /= rest23_g519;
				#if defined( _CELLA_OCT_CELL1 )
				float staticSwitch40_g516 = voroi2_g519;
				#elif defined( _CELLA_OCT_CELL2 )
				float staticSwitch40_g516 = voroi8_g519;
				#elif defined( _CELLA_OCT_CELL3 )
				float staticSwitch40_g516 = voroi18_g519;
				#elif defined( _CELLA_OCT_CELL4 )
				float staticSwitch40_g516 = voroi17_g519;
				#elif defined( _CELLA_OCT_CELL5 )
				float staticSwitch40_g516 = voroi10_g519;
				#elif defined( _CELLA_OCT_CELL6 )
				float staticSwitch40_g516 = voroi12_g519;
				#elif defined( _CELLA_OCT_CELL7 )
				float staticSwitch40_g516 = voroi24_g519;
				#elif defined( _CELLA_OCT_CELL8 )
				float staticSwitch40_g516 = voroi23_g519;
				#else
				float staticSwitch40_g516 = voroi2_g519;
				#endif
				float3 temp_cast_19 = (staticSwitch40_g516).xxx;
				float temp_output_5_0_g518 = temp_output_36_0_g516;
				float temp_output_4_0_g518 = mulTime3_g516;
				float time2_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId2_g518 = 0;
				float voronoiSmooth2_g518 = 0.0;
				float2 temp_output_3_0_g518 = UV20_g516;
				float2 coords2_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id2_g518 = 0;
				float2 uv2_g518 = 0;
				float voroi2_g518 = voronoi2_g518( coords2_g518, time2_g518, id2_g518, uv2_g518, voronoiSmooth2_g518, voronoiSmoothId2_g518 );
				float time8_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId8_g518 = 0;
				float voronoiSmooth8_g518 = 0.0;
				float2 coords8_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id8_g518 = 0;
				float2 uv8_g518 = 0;
				float fade8_g518 = 0.5;
				float voroi8_g518 = 0;
				float rest8_g518 = 0;
				for( int it8_g518 = 0; it8_g518 <2; it8_g518++ ){
				voroi8_g518 += fade8_g518 * voronoi8_g518( coords8_g518, time8_g518, id8_g518, uv8_g518, voronoiSmooth8_g518,voronoiSmoothId8_g518 );
				rest8_g518 += fade8_g518;
				coords8_g518 *= 2;
				fade8_g518 *= 0.5;
				}//Voronoi8_g518
				voroi8_g518 /= rest8_g518;
				float time18_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId18_g518 = 0;
				float voronoiSmooth18_g518 = 0.0;
				float2 coords18_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id18_g518 = 0;
				float2 uv18_g518 = 0;
				float fade18_g518 = 0.5;
				float voroi18_g518 = 0;
				float rest18_g518 = 0;
				for( int it18_g518 = 0; it18_g518 <3; it18_g518++ ){
				voroi18_g518 += fade18_g518 * voronoi18_g518( coords18_g518, time18_g518, id18_g518, uv18_g518, voronoiSmooth18_g518,voronoiSmoothId18_g518 );
				rest18_g518 += fade18_g518;
				coords18_g518 *= 2;
				fade18_g518 *= 0.5;
				}//Voronoi18_g518
				voroi18_g518 /= rest18_g518;
				float time17_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId17_g518 = 0;
				float voronoiSmooth17_g518 = 0.0;
				float2 coords17_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id17_g518 = 0;
				float2 uv17_g518 = 0;
				float fade17_g518 = 0.5;
				float voroi17_g518 = 0;
				float rest17_g518 = 0;
				for( int it17_g518 = 0; it17_g518 <6; it17_g518++ ){
				voroi17_g518 += fade17_g518 * voronoi17_g518( coords17_g518, time17_g518, id17_g518, uv17_g518, voronoiSmooth17_g518,voronoiSmoothId17_g518 );
				rest17_g518 += fade17_g518;
				coords17_g518 *= 2;
				fade17_g518 *= 0.5;
				}//Voronoi17_g518
				voroi17_g518 /= rest17_g518;
				float time10_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId10_g518 = 0;
				float2 coords10_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id10_g518 = 0;
				float2 uv10_g518 = 0;
				float voroi10_g518 = voronoi10_g518( coords10_g518, time10_g518, id10_g518, uv10_g518, 0, voronoiSmoothId10_g518 );
				float time12_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId12_g518 = 0;
				float2 coords12_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id12_g518 = 0;
				float2 uv12_g518 = 0;
				float fade12_g518 = 0.5;
				float voroi12_g518 = 0;
				float rest12_g518 = 0;
				for( int it12_g518 = 0; it12_g518 <3; it12_g518++ ){
				voroi12_g518 += fade12_g518 * voronoi12_g518( coords12_g518, time12_g518, id12_g518, uv12_g518, 0,voronoiSmoothId12_g518 );
				rest12_g518 += fade12_g518;
				coords12_g518 *= 2;
				fade12_g518 *= 0.5;
				}//Voronoi12_g518
				voroi12_g518 /= rest12_g518;
				float time24_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId24_g518 = 0;
				float2 coords24_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id24_g518 = 0;
				float2 uv24_g518 = 0;
				float fade24_g518 = 0.5;
				float voroi24_g518 = 0;
				float rest24_g518 = 0;
				for( int it24_g518 = 0; it24_g518 <5; it24_g518++ ){
				voroi24_g518 += fade24_g518 * voronoi24_g518( coords24_g518, time24_g518, id24_g518, uv24_g518, 0,voronoiSmoothId24_g518 );
				rest24_g518 += fade24_g518;
				coords24_g518 *= 2;
				fade24_g518 *= 0.5;
				}//Voronoi24_g518
				voroi24_g518 /= rest24_g518;
				float time23_g518 = temp_output_4_0_g518;
				float2 voronoiSmoothId23_g518 = 0;
				float2 coords23_g518 = temp_output_3_0_g518 * temp_output_5_0_g518;
				float2 id23_g518 = 0;
				float2 uv23_g518 = 0;
				float fade23_g518 = 0.5;
				float voroi23_g518 = 0;
				float rest23_g518 = 0;
				for( int it23_g518 = 0; it23_g518 <6; it23_g518++ ){
				voroi23_g518 += fade23_g518 * voronoi23_g518( coords23_g518, time23_g518, id23_g518, uv23_g518, 0,voronoiSmoothId23_g518 );
				rest23_g518 += fade23_g518;
				coords23_g518 *= 2;
				fade23_g518 *= 0.5;
				}//Voronoi23_g518
				voroi23_g518 /= rest23_g518;
				#if defined( _CAUSTICA_OCT_CAUSTIC1 )
				float staticSwitch13_g516 = voroi2_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC2 )
				float staticSwitch13_g516 = voroi8_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC3 )
				float staticSwitch13_g516 = voroi18_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC4 )
				float staticSwitch13_g516 = voroi17_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC5 )
				float staticSwitch13_g516 = voroi10_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC6 )
				float staticSwitch13_g516 = voroi12_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC7 )
				float staticSwitch13_g516 = voroi24_g518;
				#elif defined( _CAUSTICA_OCT_CAUSTIC8 )
				float staticSwitch13_g516 = voroi23_g518;
				#else
				float staticSwitch13_g516 = voroi2_g518;
				#endif
				float3 temp_cast_20 = (staticSwitch13_g516).xxx;
				float simplePerlin2D12_g516 = snoise( UV20_g516*temp_output_36_0_g516 );
				simplePerlin2D12_g516 = simplePerlin2D12_g516*0.5 + 0.5;
				float3 temp_cast_21 = (simplePerlin2D12_g516).xxx;
				float3 temp_cast_22 = (RF_Zero56_g516).xxx;
				#if defined( _NOISEATYPE_NONE )
				float3 staticSwitch17_g516 = temp_cast_22;
				#elif defined( _NOISEATYPE_VORONOICELL )
				float3 staticSwitch17_g516 = temp_cast_19;
				#elif defined( _NOISEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g516 = temp_cast_20;
				#elif defined( _NOISEATYPE_PERLIN )
				float3 staticSwitch17_g516 = temp_cast_21;
				#elif defined( _NOISEATYPE_TEXTURE )
				float3 staticSwitch17_g516 = tex2D( _DeformNoiseTypeA, UV20_g516 ).rgb;
				#else
				float3 staticSwitch17_g516 = temp_cast_22;
				#endif
				float3 DBG_RF_NoiseOUT_A674 = staticSwitch17_g516;
				float2 appendResult39_g789 = (float2(_FoamTileX , _FoamTileY));
				float temp_output_53_0_g789 = _FoamOverallSpeed;
				float mulTime27_g789 = _TimeParameters.x * ( _FoamSpeedX * temp_output_53_0_g789 );
				float mulTime28_g789 = _TimeParameters.x * ( _FoamSpeedY * temp_output_53_0_g789 );
				float2 appendResult34_g789 = (float2(( _FoamOffsetX + mulTime27_g789 ) , ( mulTime28_g789 + _FoamOffsetY )));
				float2 texCoord37_g789 = IN.ase_texcoord1.xy * ( (( _FoamDeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightFoam ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g789 ) + appendResult34_g789;
				float2 appendResult36_g789 = (float2(_FoamAnchorX , _FoamAnchorY));
				float mulTime29_g789 = _TimeParameters.x * _FoamRotateSpeed;
				float cos38_g789 = cos( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float sin38_g789 = sin( ( radians( mulTime29_g789 ) + radians( _FoamRotate ) ) );
				float2 rotator38_g789 = mul( texCoord37_g789 - appendResult36_g789 , float2x2( cos38_g789 , -sin38_g789 , sin38_g789 , cos38_g789 )) + appendResult36_g789;
				float2 UV20_g786 = rotator38_g789;
				float2 temp_output_3_0_g788 = UV20_g786;
				float2 coords2_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id2_g788 = 0;
				float2 uv2_g788 = 0;
				float voroi2_g788 = voronoi2_g788( coords2_g788, time2_g788, id2_g788, uv2_g788, voronoiSmooth2_g788, voronoiSmoothId2_g788 );
				float time8_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId8_g788 = 0;
				float voronoiSmooth8_g788 = temp_output_28_0_g788;
				float2 coords8_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id8_g788 = 0;
				float2 uv8_g788 = 0;
				float fade8_g788 = 0.5;
				float voroi8_g788 = 0;
				float rest8_g788 = 0;
				for( int it8_g788 = 0; it8_g788 <2; it8_g788++ ){
				voroi8_g788 += fade8_g788 * voronoi8_g788( coords8_g788, time8_g788, id8_g788, uv8_g788, voronoiSmooth8_g788,voronoiSmoothId8_g788 );
				rest8_g788 += fade8_g788;
				coords8_g788 *= 2;
				fade8_g788 *= 0.5;
				}//Voronoi8_g788
				voroi8_g788 /= rest8_g788;
				float time18_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId18_g788 = 0;
				float voronoiSmooth18_g788 = temp_output_28_0_g788;
				float2 coords18_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id18_g788 = 0;
				float2 uv18_g788 = 0;
				float fade18_g788 = 0.5;
				float voroi18_g788 = 0;
				float rest18_g788 = 0;
				for( int it18_g788 = 0; it18_g788 <3; it18_g788++ ){
				voroi18_g788 += fade18_g788 * voronoi18_g788( coords18_g788, time18_g788, id18_g788, uv18_g788, voronoiSmooth18_g788,voronoiSmoothId18_g788 );
				rest18_g788 += fade18_g788;
				coords18_g788 *= 2;
				fade18_g788 *= 0.5;
				}//Voronoi18_g788
				voroi18_g788 /= rest18_g788;
				float time17_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId17_g788 = 0;
				float voronoiSmooth17_g788 = temp_output_28_0_g788;
				float2 coords17_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id17_g788 = 0;
				float2 uv17_g788 = 0;
				float fade17_g788 = 0.5;
				float voroi17_g788 = 0;
				float rest17_g788 = 0;
				for( int it17_g788 = 0; it17_g788 <4; it17_g788++ ){
				voroi17_g788 += fade17_g788 * voronoi17_g788( coords17_g788, time17_g788, id17_g788, uv17_g788, voronoiSmooth17_g788,voronoiSmoothId17_g788 );
				rest17_g788 += fade17_g788;
				coords17_g788 *= 2;
				fade17_g788 *= 0.5;
				}//Voronoi17_g788
				voroi17_g788 /= rest17_g788;
				float time10_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId10_g788 = 0;
				float voronoiSmooth10_g788 = temp_output_28_0_g788;
				float2 coords10_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id10_g788 = 0;
				float2 uv10_g788 = 0;
				float fade10_g788 = 0.5;
				float voroi10_g788 = 0;
				float rest10_g788 = 0;
				for( int it10_g788 = 0; it10_g788 <5; it10_g788++ ){
				voroi10_g788 += fade10_g788 * voronoi10_g788( coords10_g788, time10_g788, id10_g788, uv10_g788, voronoiSmooth10_g788,voronoiSmoothId10_g788 );
				rest10_g788 += fade10_g788;
				coords10_g788 *= 2;
				fade10_g788 *= 0.5;
				}//Voronoi10_g788
				voroi10_g788 /= rest10_g788;
				float time12_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId12_g788 = 0;
				float voronoiSmooth12_g788 = temp_output_28_0_g788;
				float2 coords12_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id12_g788 = 0;
				float2 uv12_g788 = 0;
				float fade12_g788 = 0.5;
				float voroi12_g788 = 0;
				float rest12_g788 = 0;
				for( int it12_g788 = 0; it12_g788 <6; it12_g788++ ){
				voroi12_g788 += fade12_g788 * voronoi12_g788( coords12_g788, time12_g788, id12_g788, uv12_g788, voronoiSmooth12_g788,voronoiSmoothId12_g788 );
				rest12_g788 += fade12_g788;
				coords12_g788 *= 2;
				fade12_g788 *= 0.5;
				}//Voronoi12_g788
				voroi12_g788 /= rest12_g788;
				float time24_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId24_g788 = 0;
				float voronoiSmooth24_g788 = temp_output_28_0_g788;
				float2 coords24_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id24_g788 = 0;
				float2 uv24_g788 = 0;
				float fade24_g788 = 0.5;
				float voroi24_g788 = 0;
				float rest24_g788 = 0;
				for( int it24_g788 = 0; it24_g788 <7; it24_g788++ ){
				voroi24_g788 += fade24_g788 * voronoi24_g788( coords24_g788, time24_g788, id24_g788, uv24_g788, voronoiSmooth24_g788,voronoiSmoothId24_g788 );
				rest24_g788 += fade24_g788;
				coords24_g788 *= 2;
				fade24_g788 *= 0.5;
				}//Voronoi24_g788
				voroi24_g788 /= rest24_g788;
				float time23_g788 = temp_output_4_0_g788;
				float2 voronoiSmoothId23_g788 = 0;
				float voronoiSmooth23_g788 = temp_output_28_0_g788;
				float2 coords23_g788 = temp_output_3_0_g788 * temp_output_5_0_g788;
				float2 id23_g788 = 0;
				float2 uv23_g788 = 0;
				float fade23_g788 = 0.5;
				float voroi23_g788 = 0;
				float rest23_g788 = 0;
				for( int it23_g788 = 0; it23_g788 <8; it23_g788++ ){
				voroi23_g788 += fade23_g788 * voronoi23_g788( coords23_g788, time23_g788, id23_g788, uv23_g788, voronoiSmooth23_g788,voronoiSmoothId23_g788 );
				rest23_g788 += fade23_g788;
				coords23_g788 *= 2;
				fade23_g788 *= 0.5;
				}//Voronoi23_g788
				voroi23_g788 /= rest23_g788;
				#if defined( _CELLFOAM_OCT_CELL1 )
				float staticSwitch40_g786 = voroi2_g788;
				#elif defined( _CELLFOAM_OCT_CELL2 )
				float staticSwitch40_g786 = voroi8_g788;
				#elif defined( _CELLFOAM_OCT_CELL3 )
				float staticSwitch40_g786 = voroi18_g788;
				#elif defined( _CELLFOAM_OCT_CELL4 )
				float staticSwitch40_g786 = voroi17_g788;
				#elif defined( _CELLFOAM_OCT_CELL5 )
				float staticSwitch40_g786 = voroi10_g788;
				#elif defined( _CELLFOAM_OCT_CELL6 )
				float staticSwitch40_g786 = voroi12_g788;
				#elif defined( _CELLFOAM_OCT_CELL7 )
				float staticSwitch40_g786 = voroi24_g788;
				#elif defined( _CELLFOAM_OCT_CELL8 )
				float staticSwitch40_g786 = voroi23_g788;
				#else
				float staticSwitch40_g786 = voroi2_g788;
				#endif
				float3 temp_cast_24 = (staticSwitch40_g786).xxx;
				float temp_output_5_0_g787 = temp_output_36_0_g786;
				float temp_output_4_0_g787 = mulTime3_g786;
				float time2_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId2_g787 = 0;
				float voronoiSmooth2_g787 = 0.0;
				float2 temp_output_3_0_g787 = UV20_g786;
				float2 coords2_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id2_g787 = 0;
				float2 uv2_g787 = 0;
				float voroi2_g787 = voronoi2_g787( coords2_g787, time2_g787, id2_g787, uv2_g787, voronoiSmooth2_g787, voronoiSmoothId2_g787 );
				float time8_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId8_g787 = 0;
				float voronoiSmooth8_g787 = 0.0;
				float2 coords8_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id8_g787 = 0;
				float2 uv8_g787 = 0;
				float fade8_g787 = 0.5;
				float voroi8_g787 = 0;
				float rest8_g787 = 0;
				for( int it8_g787 = 0; it8_g787 <2; it8_g787++ ){
				voroi8_g787 += fade8_g787 * voronoi8_g787( coords8_g787, time8_g787, id8_g787, uv8_g787, voronoiSmooth8_g787,voronoiSmoothId8_g787 );
				rest8_g787 += fade8_g787;
				coords8_g787 *= 2;
				fade8_g787 *= 0.5;
				}//Voronoi8_g787
				voroi8_g787 /= rest8_g787;
				float time18_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId18_g787 = 0;
				float voronoiSmooth18_g787 = 0.0;
				float2 coords18_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id18_g787 = 0;
				float2 uv18_g787 = 0;
				float fade18_g787 = 0.5;
				float voroi18_g787 = 0;
				float rest18_g787 = 0;
				for( int it18_g787 = 0; it18_g787 <3; it18_g787++ ){
				voroi18_g787 += fade18_g787 * voronoi18_g787( coords18_g787, time18_g787, id18_g787, uv18_g787, voronoiSmooth18_g787,voronoiSmoothId18_g787 );
				rest18_g787 += fade18_g787;
				coords18_g787 *= 2;
				fade18_g787 *= 0.5;
				}//Voronoi18_g787
				voroi18_g787 /= rest18_g787;
				float time17_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId17_g787 = 0;
				float voronoiSmooth17_g787 = 0.0;
				float2 coords17_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id17_g787 = 0;
				float2 uv17_g787 = 0;
				float fade17_g787 = 0.5;
				float voroi17_g787 = 0;
				float rest17_g787 = 0;
				for( int it17_g787 = 0; it17_g787 <6; it17_g787++ ){
				voroi17_g787 += fade17_g787 * voronoi17_g787( coords17_g787, time17_g787, id17_g787, uv17_g787, voronoiSmooth17_g787,voronoiSmoothId17_g787 );
				rest17_g787 += fade17_g787;
				coords17_g787 *= 2;
				fade17_g787 *= 0.5;
				}//Voronoi17_g787
				voroi17_g787 /= rest17_g787;
				float time10_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId10_g787 = 0;
				float2 coords10_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id10_g787 = 0;
				float2 uv10_g787 = 0;
				float voroi10_g787 = voronoi10_g787( coords10_g787, time10_g787, id10_g787, uv10_g787, 0, voronoiSmoothId10_g787 );
				float time12_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId12_g787 = 0;
				float2 coords12_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id12_g787 = 0;
				float2 uv12_g787 = 0;
				float fade12_g787 = 0.5;
				float voroi12_g787 = 0;
				float rest12_g787 = 0;
				for( int it12_g787 = 0; it12_g787 <3; it12_g787++ ){
				voroi12_g787 += fade12_g787 * voronoi12_g787( coords12_g787, time12_g787, id12_g787, uv12_g787, 0,voronoiSmoothId12_g787 );
				rest12_g787 += fade12_g787;
				coords12_g787 *= 2;
				fade12_g787 *= 0.5;
				}//Voronoi12_g787
				voroi12_g787 /= rest12_g787;
				float time24_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId24_g787 = 0;
				float2 coords24_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id24_g787 = 0;
				float2 uv24_g787 = 0;
				float fade24_g787 = 0.5;
				float voroi24_g787 = 0;
				float rest24_g787 = 0;
				for( int it24_g787 = 0; it24_g787 <5; it24_g787++ ){
				voroi24_g787 += fade24_g787 * voronoi24_g787( coords24_g787, time24_g787, id24_g787, uv24_g787, 0,voronoiSmoothId24_g787 );
				rest24_g787 += fade24_g787;
				coords24_g787 *= 2;
				fade24_g787 *= 0.5;
				}//Voronoi24_g787
				voroi24_g787 /= rest24_g787;
				float time23_g787 = temp_output_4_0_g787;
				float2 voronoiSmoothId23_g787 = 0;
				float2 coords23_g787 = temp_output_3_0_g787 * temp_output_5_0_g787;
				float2 id23_g787 = 0;
				float2 uv23_g787 = 0;
				float fade23_g787 = 0.5;
				float voroi23_g787 = 0;
				float rest23_g787 = 0;
				for( int it23_g787 = 0; it23_g787 <6; it23_g787++ ){
				voroi23_g787 += fade23_g787 * voronoi23_g787( coords23_g787, time23_g787, id23_g787, uv23_g787, 0,voronoiSmoothId23_g787 );
				rest23_g787 += fade23_g787;
				coords23_g787 *= 2;
				fade23_g787 *= 0.5;
				}//Voronoi23_g787
				voroi23_g787 /= rest23_g787;
				#if defined( _CAUSTICFOAM_OCT_CAUSTIC1 )
				float staticSwitch13_g786 = voroi2_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC2 )
				float staticSwitch13_g786 = voroi8_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC3 )
				float staticSwitch13_g786 = voroi18_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC4 )
				float staticSwitch13_g786 = voroi17_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC5 )
				float staticSwitch13_g786 = voroi10_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC6 )
				float staticSwitch13_g786 = voroi12_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC7 )
				float staticSwitch13_g786 = voroi24_g787;
				#elif defined( _CAUSTICFOAM_OCT_CAUSTIC8 )
				float staticSwitch13_g786 = voroi23_g787;
				#else
				float staticSwitch13_g786 = voroi2_g787;
				#endif
				float3 temp_cast_25 = (staticSwitch13_g786).xxx;
				float simplePerlin2D12_g786 = snoise( UV20_g786*temp_output_36_0_g786 );
				simplePerlin2D12_g786 = simplePerlin2D12_g786*0.5 + 0.5;
				float3 temp_cast_26 = (simplePerlin2D12_g786).xxx;
				float3 temp_cast_27 = (RF_Zero56_g786).xxx;
				#if defined( _FOAMTYPE_NONE )
				float3 staticSwitch17_g786 = temp_cast_27;
				#elif defined( _FOAMTYPE_VORONOICELL )
				float3 staticSwitch17_g786 = temp_cast_24;
				#elif defined( _FOAMTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g786 = temp_cast_25;
				#elif defined( _FOAMTYPE_PERLIN )
				float3 staticSwitch17_g786 = temp_cast_26;
				#elif defined( _FOAMTYPE_TEXTURE )
				float3 staticSwitch17_g786 = tex2D( _FoamTexture, UV20_g786 ).rgb;
				#else
				float3 staticSwitch17_g786 = temp_cast_27;
				#endif
				float3 DBG_FoamOUT1664 = staticSwitch17_g786;
				float3 gammaToLinear1680 = Gamma22ToLinear( DBG_FoamOUT1664 );
				float3 linearToGamma1681 = LinearToGamma22( DBG_FoamOUT1664 );
				#if defined( _FOAMGRADETYPE_LINEAR )
				float3 staticSwitch1682 = gammaToLinear1680;
				#elif defined( _FOAMGRADETYPE_NORMAL )
				float3 staticSwitch1682 = DBG_FoamOUT1664;
				#elif defined( _FOAMGRADETYPE_GAMMA )
				float3 staticSwitch1682 = linearToGamma1681;
				#else
				float3 staticSwitch1682 = gammaToLinear1680;
				#endif
				float3 temp_cast_28 = (_FoamExp).xxx;
				float3 temp_output_1673_0 = pow( (staticSwitch1682*_FoamAmplitude + 0.0) , temp_cast_28 );
				#ifdef _FOAMINVERT_ON
				float3 staticSwitch1675 = ( 1.0 - temp_output_1673_0 );
				#else
				float3 staticSwitch1675 = temp_output_1673_0;
				#endif
				float4 lerpResult5_g1 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1675 , 0.0 ) , _FoamContrast);
				float4 RF_FoamTexture1690 = ( _FoamIntensity * saturate( lerpResult5_g1 ) );
				float RF_Zero56_g790 = 0.0;
				float3 temp_cast_32 = (RF_Zero56_g790).xxx;
				float temp_output_36_0_g790 = _WANoiseScale;
				float temp_output_5_0_g792 = temp_output_36_0_g790;
				float mulTime3_g790 = _TimeParameters.x * _WAVoronoiAngleSpeed;
				float temp_output_4_0_g792 = mulTime3_g790;
				float time2_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId2_g792 = 0;
				float temp_output_28_0_g792 = _WAVoronoiSmooth;
				float voronoiSmooth2_g792 = temp_output_28_0_g792;
				float2 appendResult39_g793 = (float2(_WTypeATileX , _WTypeATileY));
				float temp_output_53_0_g793 = _WTypeAOverallSpeed;
				float mulTime27_g793 = _TimeParameters.x * ( _WTypeASpeedX * temp_output_53_0_g793 );
				float mulTime28_g793 = _TimeParameters.x * ( _WTypeASpeedY * temp_output_53_0_g793 );
				float2 appendResult34_g793 = (float2(( _WTypeAOffsetX + mulTime27_g793 ) , ( mulTime28_g793 + _WTypeAOffsetY )));
				float2 texCoord37_g793 = IN.ase_texcoord1.xy * ( (( _MidADeformToggle )?( ( DBG_RF_NoiseOUT_A674 * _DefWeightA ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g793 ) + appendResult34_g793;
				float2 appendResult36_g793 = (float2(_WTypeAAnchorX , _WTypeAAnchorY));
				float mulTime29_g793 = _TimeParameters.x * _WTypeARotateSpeed;
				float cos38_g793 = cos( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float sin38_g793 = sin( ( radians( mulTime29_g793 ) + radians( _WTypeARotate ) ) );
				float2 rotator38_g793 = mul( texCoord37_g793 - appendResult36_g793 , float2x2( cos38_g793 , -sin38_g793 , sin38_g793 , cos38_g793 )) + appendResult36_g793;
				float2 UV20_g790 = rotator38_g793;
				float2 temp_output_3_0_g792 = UV20_g790;
				float2 coords2_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id2_g792 = 0;
				float2 uv2_g792 = 0;
				float voroi2_g792 = voronoi2_g792( coords2_g792, time2_g792, id2_g792, uv2_g792, voronoiSmooth2_g792, voronoiSmoothId2_g792 );
				float time8_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId8_g792 = 0;
				float voronoiSmooth8_g792 = temp_output_28_0_g792;
				float2 coords8_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id8_g792 = 0;
				float2 uv8_g792 = 0;
				float fade8_g792 = 0.5;
				float voroi8_g792 = 0;
				float rest8_g792 = 0;
				for( int it8_g792 = 0; it8_g792 <2; it8_g792++ ){
				voroi8_g792 += fade8_g792 * voronoi8_g792( coords8_g792, time8_g792, id8_g792, uv8_g792, voronoiSmooth8_g792,voronoiSmoothId8_g792 );
				rest8_g792 += fade8_g792;
				coords8_g792 *= 2;
				fade8_g792 *= 0.5;
				}//Voronoi8_g792
				voroi8_g792 /= rest8_g792;
				float time18_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId18_g792 = 0;
				float voronoiSmooth18_g792 = temp_output_28_0_g792;
				float2 coords18_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id18_g792 = 0;
				float2 uv18_g792 = 0;
				float fade18_g792 = 0.5;
				float voroi18_g792 = 0;
				float rest18_g792 = 0;
				for( int it18_g792 = 0; it18_g792 <3; it18_g792++ ){
				voroi18_g792 += fade18_g792 * voronoi18_g792( coords18_g792, time18_g792, id18_g792, uv18_g792, voronoiSmooth18_g792,voronoiSmoothId18_g792 );
				rest18_g792 += fade18_g792;
				coords18_g792 *= 2;
				fade18_g792 *= 0.5;
				}//Voronoi18_g792
				voroi18_g792 /= rest18_g792;
				float time17_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId17_g792 = 0;
				float voronoiSmooth17_g792 = temp_output_28_0_g792;
				float2 coords17_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id17_g792 = 0;
				float2 uv17_g792 = 0;
				float fade17_g792 = 0.5;
				float voroi17_g792 = 0;
				float rest17_g792 = 0;
				for( int it17_g792 = 0; it17_g792 <4; it17_g792++ ){
				voroi17_g792 += fade17_g792 * voronoi17_g792( coords17_g792, time17_g792, id17_g792, uv17_g792, voronoiSmooth17_g792,voronoiSmoothId17_g792 );
				rest17_g792 += fade17_g792;
				coords17_g792 *= 2;
				fade17_g792 *= 0.5;
				}//Voronoi17_g792
				voroi17_g792 /= rest17_g792;
				float time10_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId10_g792 = 0;
				float voronoiSmooth10_g792 = temp_output_28_0_g792;
				float2 coords10_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id10_g792 = 0;
				float2 uv10_g792 = 0;
				float fade10_g792 = 0.5;
				float voroi10_g792 = 0;
				float rest10_g792 = 0;
				for( int it10_g792 = 0; it10_g792 <5; it10_g792++ ){
				voroi10_g792 += fade10_g792 * voronoi10_g792( coords10_g792, time10_g792, id10_g792, uv10_g792, voronoiSmooth10_g792,voronoiSmoothId10_g792 );
				rest10_g792 += fade10_g792;
				coords10_g792 *= 2;
				fade10_g792 *= 0.5;
				}//Voronoi10_g792
				voroi10_g792 /= rest10_g792;
				float time12_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId12_g792 = 0;
				float voronoiSmooth12_g792 = temp_output_28_0_g792;
				float2 coords12_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id12_g792 = 0;
				float2 uv12_g792 = 0;
				float fade12_g792 = 0.5;
				float voroi12_g792 = 0;
				float rest12_g792 = 0;
				for( int it12_g792 = 0; it12_g792 <6; it12_g792++ ){
				voroi12_g792 += fade12_g792 * voronoi12_g792( coords12_g792, time12_g792, id12_g792, uv12_g792, voronoiSmooth12_g792,voronoiSmoothId12_g792 );
				rest12_g792 += fade12_g792;
				coords12_g792 *= 2;
				fade12_g792 *= 0.5;
				}//Voronoi12_g792
				voroi12_g792 /= rest12_g792;
				float time24_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId24_g792 = 0;
				float voronoiSmooth24_g792 = temp_output_28_0_g792;
				float2 coords24_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id24_g792 = 0;
				float2 uv24_g792 = 0;
				float fade24_g792 = 0.5;
				float voroi24_g792 = 0;
				float rest24_g792 = 0;
				for( int it24_g792 = 0; it24_g792 <7; it24_g792++ ){
				voroi24_g792 += fade24_g792 * voronoi24_g792( coords24_g792, time24_g792, id24_g792, uv24_g792, voronoiSmooth24_g792,voronoiSmoothId24_g792 );
				rest24_g792 += fade24_g792;
				coords24_g792 *= 2;
				fade24_g792 *= 0.5;
				}//Voronoi24_g792
				voroi24_g792 /= rest24_g792;
				float time23_g792 = temp_output_4_0_g792;
				float2 voronoiSmoothId23_g792 = 0;
				float voronoiSmooth23_g792 = temp_output_28_0_g792;
				float2 coords23_g792 = temp_output_3_0_g792 * temp_output_5_0_g792;
				float2 id23_g792 = 0;
				float2 uv23_g792 = 0;
				float fade23_g792 = 0.5;
				float voroi23_g792 = 0;
				float rest23_g792 = 0;
				for( int it23_g792 = 0; it23_g792 <8; it23_g792++ ){
				voroi23_g792 += fade23_g792 * voronoi23_g792( coords23_g792, time23_g792, id23_g792, uv23_g792, voronoiSmooth23_g792,voronoiSmoothId23_g792 );
				rest23_g792 += fade23_g792;
				coords23_g792 *= 2;
				fade23_g792 *= 0.5;
				}//Voronoi23_g792
				voroi23_g792 /= rest23_g792;
				#if defined( _CELLWAVEA_OCT_CELL1 )
				float staticSwitch40_g790 = voroi2_g792;
				#elif defined( _CELLWAVEA_OCT_CELL2 )
				float staticSwitch40_g790 = voroi8_g792;
				#elif defined( _CELLWAVEA_OCT_CELL3 )
				float staticSwitch40_g790 = voroi18_g792;
				#elif defined( _CELLWAVEA_OCT_CELL4 )
				float staticSwitch40_g790 = voroi17_g792;
				#elif defined( _CELLWAVEA_OCT_CELL5 )
				float staticSwitch40_g790 = voroi10_g792;
				#elif defined( _CELLWAVEA_OCT_CELL6 )
				float staticSwitch40_g790 = voroi12_g792;
				#elif defined( _CELLWAVEA_OCT_CELL7 )
				float staticSwitch40_g790 = voroi24_g792;
				#elif defined( _CELLWAVEA_OCT_CELL8 )
				float staticSwitch40_g790 = voroi23_g792;
				#else
				float staticSwitch40_g790 = voroi2_g792;
				#endif
				float3 temp_cast_35 = (staticSwitch40_g790).xxx;
				float temp_output_5_0_g791 = temp_output_36_0_g790;
				float temp_output_4_0_g791 = mulTime3_g790;
				float time2_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId2_g791 = 0;
				float voronoiSmooth2_g791 = 0.0;
				float2 temp_output_3_0_g791 = UV20_g790;
				float2 coords2_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id2_g791 = 0;
				float2 uv2_g791 = 0;
				float voroi2_g791 = voronoi2_g791( coords2_g791, time2_g791, id2_g791, uv2_g791, voronoiSmooth2_g791, voronoiSmoothId2_g791 );
				float time8_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId8_g791 = 0;
				float voronoiSmooth8_g791 = 0.0;
				float2 coords8_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id8_g791 = 0;
				float2 uv8_g791 = 0;
				float fade8_g791 = 0.5;
				float voroi8_g791 = 0;
				float rest8_g791 = 0;
				for( int it8_g791 = 0; it8_g791 <2; it8_g791++ ){
				voroi8_g791 += fade8_g791 * voronoi8_g791( coords8_g791, time8_g791, id8_g791, uv8_g791, voronoiSmooth8_g791,voronoiSmoothId8_g791 );
				rest8_g791 += fade8_g791;
				coords8_g791 *= 2;
				fade8_g791 *= 0.5;
				}//Voronoi8_g791
				voroi8_g791 /= rest8_g791;
				float time18_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId18_g791 = 0;
				float voronoiSmooth18_g791 = 0.0;
				float2 coords18_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id18_g791 = 0;
				float2 uv18_g791 = 0;
				float fade18_g791 = 0.5;
				float voroi18_g791 = 0;
				float rest18_g791 = 0;
				for( int it18_g791 = 0; it18_g791 <3; it18_g791++ ){
				voroi18_g791 += fade18_g791 * voronoi18_g791( coords18_g791, time18_g791, id18_g791, uv18_g791, voronoiSmooth18_g791,voronoiSmoothId18_g791 );
				rest18_g791 += fade18_g791;
				coords18_g791 *= 2;
				fade18_g791 *= 0.5;
				}//Voronoi18_g791
				voroi18_g791 /= rest18_g791;
				float time17_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId17_g791 = 0;
				float voronoiSmooth17_g791 = 0.0;
				float2 coords17_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id17_g791 = 0;
				float2 uv17_g791 = 0;
				float fade17_g791 = 0.5;
				float voroi17_g791 = 0;
				float rest17_g791 = 0;
				for( int it17_g791 = 0; it17_g791 <6; it17_g791++ ){
				voroi17_g791 += fade17_g791 * voronoi17_g791( coords17_g791, time17_g791, id17_g791, uv17_g791, voronoiSmooth17_g791,voronoiSmoothId17_g791 );
				rest17_g791 += fade17_g791;
				coords17_g791 *= 2;
				fade17_g791 *= 0.5;
				}//Voronoi17_g791
				voroi17_g791 /= rest17_g791;
				float time10_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId10_g791 = 0;
				float2 coords10_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id10_g791 = 0;
				float2 uv10_g791 = 0;
				float voroi10_g791 = voronoi10_g791( coords10_g791, time10_g791, id10_g791, uv10_g791, 0, voronoiSmoothId10_g791 );
				float time12_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId12_g791 = 0;
				float2 coords12_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id12_g791 = 0;
				float2 uv12_g791 = 0;
				float fade12_g791 = 0.5;
				float voroi12_g791 = 0;
				float rest12_g791 = 0;
				for( int it12_g791 = 0; it12_g791 <3; it12_g791++ ){
				voroi12_g791 += fade12_g791 * voronoi12_g791( coords12_g791, time12_g791, id12_g791, uv12_g791, 0,voronoiSmoothId12_g791 );
				rest12_g791 += fade12_g791;
				coords12_g791 *= 2;
				fade12_g791 *= 0.5;
				}//Voronoi12_g791
				voroi12_g791 /= rest12_g791;
				float time24_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId24_g791 = 0;
				float2 coords24_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id24_g791 = 0;
				float2 uv24_g791 = 0;
				float fade24_g791 = 0.5;
				float voroi24_g791 = 0;
				float rest24_g791 = 0;
				for( int it24_g791 = 0; it24_g791 <5; it24_g791++ ){
				voroi24_g791 += fade24_g791 * voronoi24_g791( coords24_g791, time24_g791, id24_g791, uv24_g791, 0,voronoiSmoothId24_g791 );
				rest24_g791 += fade24_g791;
				coords24_g791 *= 2;
				fade24_g791 *= 0.5;
				}//Voronoi24_g791
				voroi24_g791 /= rest24_g791;
				float time23_g791 = temp_output_4_0_g791;
				float2 voronoiSmoothId23_g791 = 0;
				float2 coords23_g791 = temp_output_3_0_g791 * temp_output_5_0_g791;
				float2 id23_g791 = 0;
				float2 uv23_g791 = 0;
				float fade23_g791 = 0.5;
				float voroi23_g791 = 0;
				float rest23_g791 = 0;
				for( int it23_g791 = 0; it23_g791 <6; it23_g791++ ){
				voroi23_g791 += fade23_g791 * voronoi23_g791( coords23_g791, time23_g791, id23_g791, uv23_g791, 0,voronoiSmoothId23_g791 );
				rest23_g791 += fade23_g791;
				coords23_g791 *= 2;
				fade23_g791 *= 0.5;
				}//Voronoi23_g791
				voroi23_g791 /= rest23_g791;
				#if defined( _CAUSTICWAVEA_OCT_CAUSTIC1 )
				float staticSwitch13_g790 = voroi2_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC2 )
				float staticSwitch13_g790 = voroi8_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC3 )
				float staticSwitch13_g790 = voroi18_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC4 )
				float staticSwitch13_g790 = voroi17_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC5 )
				float staticSwitch13_g790 = voroi10_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC6 )
				float staticSwitch13_g790 = voroi12_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC7 )
				float staticSwitch13_g790 = voroi24_g791;
				#elif defined( _CAUSTICWAVEA_OCT_CAUSTIC8 )
				float staticSwitch13_g790 = voroi23_g791;
				#else
				float staticSwitch13_g790 = voroi2_g791;
				#endif
				float3 temp_cast_36 = (staticSwitch13_g790).xxx;
				float simplePerlin2D12_g790 = snoise( UV20_g790*temp_output_36_0_g790 );
				simplePerlin2D12_g790 = simplePerlin2D12_g790*0.5 + 0.5;
				float3 temp_cast_37 = (simplePerlin2D12_g790).xxx;
				float3 temp_cast_38 = (RF_Zero56_g790).xxx;
				#if defined( _WAVEATYPE_NONE )
				float3 staticSwitch17_g790 = temp_cast_38;
				#elif defined( _WAVEATYPE_VORONOICELL )
				float3 staticSwitch17_g790 = temp_cast_35;
				#elif defined( _WAVEATYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g790 = temp_cast_36;
				#elif defined( _WAVEATYPE_PERLIN )
				float3 staticSwitch17_g790 = temp_cast_37;
				#elif defined( _WAVEATYPE_TEXTURE )
				float3 staticSwitch17_g790 = tex2D( _WaveTypeA, UV20_g790 ).rgb;
				#else
				float3 staticSwitch17_g790 = temp_cast_38;
				#endif
				float3 DBG_WaveOUT_A1238 = staticSwitch17_g790;
				float3 gammaToLinear1309 = Gamma22ToLinear( DBG_WaveOUT_A1238 );
				float3 linearToGamma1310 = LinearToGamma22( DBG_WaveOUT_A1238 );
				#if defined( _WAVEAGRADETYPE_LINEAR )
				float3 staticSwitch1311 = gammaToLinear1309;
				#elif defined( _WAVEAGRADETYPE_NORMAL )
				float3 staticSwitch1311 = DBG_WaveOUT_A1238;
				#elif defined( _WAVEAGRADETYPE_GAMMA )
				float3 staticSwitch1311 = linearToGamma1310;
				#else
				float3 staticSwitch1311 = gammaToLinear1309;
				#endif
				float3 temp_cast_39 = (_WaveAExp).xxx;
				float3 temp_output_1318_0 = pow( (staticSwitch1311*_WaveAAmplitude + 0.0) , temp_cast_39 );
				#ifdef _WAVEAINVERT_ON
				float3 staticSwitch1321 = ( 1.0 - temp_output_1318_0 );
				#else
				float3 staticSwitch1321 = temp_output_1318_0;
				#endif
				float4 lerpResult5_g767 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1321 , 0.0 ) , _WaveAContrast);
				float4 temp_output_17_0_g769 = ( _WaveAIntensity * saturate( lerpResult5_g767 ) );
				float RF_Zero56_g540 = 0.0;
				float3 temp_cast_43 = (RF_Zero56_g540).xxx;
				float temp_output_36_0_g540 = _WBNoiseScale;
				float temp_output_5_0_g542 = temp_output_36_0_g540;
				float mulTime3_g540 = _TimeParameters.x * _WBVoronoiAngleSpeed;
				float temp_output_4_0_g542 = mulTime3_g540;
				float time2_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId2_g542 = 0;
				float temp_output_28_0_g542 = _WBVoronoiSmooth;
				float voronoiSmooth2_g542 = temp_output_28_0_g542;
				float RF_Zero56_g512 = 0.0;
				float3 temp_cast_45 = (RF_Zero56_g512).xxx;
				float temp_output_36_0_g512 = _BNoiseScale;
				float temp_output_5_0_g514 = temp_output_36_0_g512;
				float mulTime3_g512 = _TimeParameters.x * _BVoronoiAngleSpeed;
				float temp_output_4_0_g514 = mulTime3_g512;
				float time2_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId2_g514 = 0;
				float temp_output_28_0_g514 = _BVoronoiSmooth;
				float voronoiSmooth2_g514 = temp_output_28_0_g514;
				float2 appendResult39_g515 = (float2(_NTypeBTileX , _NTypeBTileY));
				float temp_output_53_0_g515 = _NTypeBOverallSpeed;
				float mulTime27_g515 = _TimeParameters.x * ( _NTypeBSpeedX * temp_output_53_0_g515 );
				float mulTime28_g515 = _TimeParameters.x * ( _NTypeBSpeedY * temp_output_53_0_g515 );
				float2 appendResult34_g515 = (float2(( _NTypeBOffsetX + mulTime27_g515 ) , ( mulTime28_g515 + _NTypeBOffsetY )));
				float2 texCoord37_g515 = IN.ase_texcoord1.xy * appendResult39_g515 + appendResult34_g515;
				float2 appendResult36_g515 = (float2(_NTypeBAnchorX , _NTypeBAnchorY));
				float mulTime29_g515 = _TimeParameters.x * _NTypeBRotateSpeed;
				float cos38_g515 = cos( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float sin38_g515 = sin( ( radians( mulTime29_g515 ) + radians( _NTypeBRotate ) ) );
				float2 rotator38_g515 = mul( texCoord37_g515 - appendResult36_g515 , float2x2( cos38_g515 , -sin38_g515 , sin38_g515 , cos38_g515 )) + appendResult36_g515;
				float2 UV20_g512 = rotator38_g515;
				float2 temp_output_3_0_g514 = UV20_g512;
				float2 coords2_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id2_g514 = 0;
				float2 uv2_g514 = 0;
				float voroi2_g514 = voronoi2_g514( coords2_g514, time2_g514, id2_g514, uv2_g514, voronoiSmooth2_g514, voronoiSmoothId2_g514 );
				float time8_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId8_g514 = 0;
				float voronoiSmooth8_g514 = temp_output_28_0_g514;
				float2 coords8_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id8_g514 = 0;
				float2 uv8_g514 = 0;
				float fade8_g514 = 0.5;
				float voroi8_g514 = 0;
				float rest8_g514 = 0;
				for( int it8_g514 = 0; it8_g514 <2; it8_g514++ ){
				voroi8_g514 += fade8_g514 * voronoi8_g514( coords8_g514, time8_g514, id8_g514, uv8_g514, voronoiSmooth8_g514,voronoiSmoothId8_g514 );
				rest8_g514 += fade8_g514;
				coords8_g514 *= 2;
				fade8_g514 *= 0.5;
				}//Voronoi8_g514
				voroi8_g514 /= rest8_g514;
				float time18_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId18_g514 = 0;
				float voronoiSmooth18_g514 = temp_output_28_0_g514;
				float2 coords18_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id18_g514 = 0;
				float2 uv18_g514 = 0;
				float fade18_g514 = 0.5;
				float voroi18_g514 = 0;
				float rest18_g514 = 0;
				for( int it18_g514 = 0; it18_g514 <3; it18_g514++ ){
				voroi18_g514 += fade18_g514 * voronoi18_g514( coords18_g514, time18_g514, id18_g514, uv18_g514, voronoiSmooth18_g514,voronoiSmoothId18_g514 );
				rest18_g514 += fade18_g514;
				coords18_g514 *= 2;
				fade18_g514 *= 0.5;
				}//Voronoi18_g514
				voroi18_g514 /= rest18_g514;
				float time17_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId17_g514 = 0;
				float voronoiSmooth17_g514 = temp_output_28_0_g514;
				float2 coords17_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id17_g514 = 0;
				float2 uv17_g514 = 0;
				float fade17_g514 = 0.5;
				float voroi17_g514 = 0;
				float rest17_g514 = 0;
				for( int it17_g514 = 0; it17_g514 <4; it17_g514++ ){
				voroi17_g514 += fade17_g514 * voronoi17_g514( coords17_g514, time17_g514, id17_g514, uv17_g514, voronoiSmooth17_g514,voronoiSmoothId17_g514 );
				rest17_g514 += fade17_g514;
				coords17_g514 *= 2;
				fade17_g514 *= 0.5;
				}//Voronoi17_g514
				voroi17_g514 /= rest17_g514;
				float time10_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId10_g514 = 0;
				float voronoiSmooth10_g514 = temp_output_28_0_g514;
				float2 coords10_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id10_g514 = 0;
				float2 uv10_g514 = 0;
				float fade10_g514 = 0.5;
				float voroi10_g514 = 0;
				float rest10_g514 = 0;
				for( int it10_g514 = 0; it10_g514 <5; it10_g514++ ){
				voroi10_g514 += fade10_g514 * voronoi10_g514( coords10_g514, time10_g514, id10_g514, uv10_g514, voronoiSmooth10_g514,voronoiSmoothId10_g514 );
				rest10_g514 += fade10_g514;
				coords10_g514 *= 2;
				fade10_g514 *= 0.5;
				}//Voronoi10_g514
				voroi10_g514 /= rest10_g514;
				float time12_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId12_g514 = 0;
				float voronoiSmooth12_g514 = temp_output_28_0_g514;
				float2 coords12_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id12_g514 = 0;
				float2 uv12_g514 = 0;
				float fade12_g514 = 0.5;
				float voroi12_g514 = 0;
				float rest12_g514 = 0;
				for( int it12_g514 = 0; it12_g514 <6; it12_g514++ ){
				voroi12_g514 += fade12_g514 * voronoi12_g514( coords12_g514, time12_g514, id12_g514, uv12_g514, voronoiSmooth12_g514,voronoiSmoothId12_g514 );
				rest12_g514 += fade12_g514;
				coords12_g514 *= 2;
				fade12_g514 *= 0.5;
				}//Voronoi12_g514
				voroi12_g514 /= rest12_g514;
				float time24_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId24_g514 = 0;
				float voronoiSmooth24_g514 = temp_output_28_0_g514;
				float2 coords24_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id24_g514 = 0;
				float2 uv24_g514 = 0;
				float fade24_g514 = 0.5;
				float voroi24_g514 = 0;
				float rest24_g514 = 0;
				for( int it24_g514 = 0; it24_g514 <7; it24_g514++ ){
				voroi24_g514 += fade24_g514 * voronoi24_g514( coords24_g514, time24_g514, id24_g514, uv24_g514, voronoiSmooth24_g514,voronoiSmoothId24_g514 );
				rest24_g514 += fade24_g514;
				coords24_g514 *= 2;
				fade24_g514 *= 0.5;
				}//Voronoi24_g514
				voroi24_g514 /= rest24_g514;
				float time23_g514 = temp_output_4_0_g514;
				float2 voronoiSmoothId23_g514 = 0;
				float voronoiSmooth23_g514 = temp_output_28_0_g514;
				float2 coords23_g514 = temp_output_3_0_g514 * temp_output_5_0_g514;
				float2 id23_g514 = 0;
				float2 uv23_g514 = 0;
				float fade23_g514 = 0.5;
				float voroi23_g514 = 0;
				float rest23_g514 = 0;
				for( int it23_g514 = 0; it23_g514 <8; it23_g514++ ){
				voroi23_g514 += fade23_g514 * voronoi23_g514( coords23_g514, time23_g514, id23_g514, uv23_g514, voronoiSmooth23_g514,voronoiSmoothId23_g514 );
				rest23_g514 += fade23_g514;
				coords23_g514 *= 2;
				fade23_g514 *= 0.5;
				}//Voronoi23_g514
				voroi23_g514 /= rest23_g514;
				#if defined( _CELLB_OCT_CELL1 )
				float staticSwitch40_g512 = voroi2_g514;
				#elif defined( _CELLB_OCT_CELL2 )
				float staticSwitch40_g512 = voroi8_g514;
				#elif defined( _CELLB_OCT_CELL3 )
				float staticSwitch40_g512 = voroi18_g514;
				#elif defined( _CELLB_OCT_CELL4 )
				float staticSwitch40_g512 = voroi17_g514;
				#elif defined( _CELLB_OCT_CELL5 )
				float staticSwitch40_g512 = voroi10_g514;
				#elif defined( _CELLB_OCT_CELL6 )
				float staticSwitch40_g512 = voroi12_g514;
				#elif defined( _CELLB_OCT_CELL7 )
				float staticSwitch40_g512 = voroi24_g514;
				#elif defined( _CELLB_OCT_CELL8 )
				float staticSwitch40_g512 = voroi23_g514;
				#else
				float staticSwitch40_g512 = voroi2_g514;
				#endif
				float3 temp_cast_46 = (staticSwitch40_g512).xxx;
				float temp_output_5_0_g513 = temp_output_36_0_g512;
				float temp_output_4_0_g513 = mulTime3_g512;
				float time2_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId2_g513 = 0;
				float voronoiSmooth2_g513 = 0.0;
				float2 temp_output_3_0_g513 = UV20_g512;
				float2 coords2_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id2_g513 = 0;
				float2 uv2_g513 = 0;
				float voroi2_g513 = voronoi2_g513( coords2_g513, time2_g513, id2_g513, uv2_g513, voronoiSmooth2_g513, voronoiSmoothId2_g513 );
				float time8_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId8_g513 = 0;
				float voronoiSmooth8_g513 = 0.0;
				float2 coords8_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id8_g513 = 0;
				float2 uv8_g513 = 0;
				float fade8_g513 = 0.5;
				float voroi8_g513 = 0;
				float rest8_g513 = 0;
				for( int it8_g513 = 0; it8_g513 <2; it8_g513++ ){
				voroi8_g513 += fade8_g513 * voronoi8_g513( coords8_g513, time8_g513, id8_g513, uv8_g513, voronoiSmooth8_g513,voronoiSmoothId8_g513 );
				rest8_g513 += fade8_g513;
				coords8_g513 *= 2;
				fade8_g513 *= 0.5;
				}//Voronoi8_g513
				voroi8_g513 /= rest8_g513;
				float time18_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId18_g513 = 0;
				float voronoiSmooth18_g513 = 0.0;
				float2 coords18_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id18_g513 = 0;
				float2 uv18_g513 = 0;
				float fade18_g513 = 0.5;
				float voroi18_g513 = 0;
				float rest18_g513 = 0;
				for( int it18_g513 = 0; it18_g513 <3; it18_g513++ ){
				voroi18_g513 += fade18_g513 * voronoi18_g513( coords18_g513, time18_g513, id18_g513, uv18_g513, voronoiSmooth18_g513,voronoiSmoothId18_g513 );
				rest18_g513 += fade18_g513;
				coords18_g513 *= 2;
				fade18_g513 *= 0.5;
				}//Voronoi18_g513
				voroi18_g513 /= rest18_g513;
				float time17_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId17_g513 = 0;
				float voronoiSmooth17_g513 = 0.0;
				float2 coords17_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id17_g513 = 0;
				float2 uv17_g513 = 0;
				float fade17_g513 = 0.5;
				float voroi17_g513 = 0;
				float rest17_g513 = 0;
				for( int it17_g513 = 0; it17_g513 <6; it17_g513++ ){
				voroi17_g513 += fade17_g513 * voronoi17_g513( coords17_g513, time17_g513, id17_g513, uv17_g513, voronoiSmooth17_g513,voronoiSmoothId17_g513 );
				rest17_g513 += fade17_g513;
				coords17_g513 *= 2;
				fade17_g513 *= 0.5;
				}//Voronoi17_g513
				voroi17_g513 /= rest17_g513;
				float time10_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId10_g513 = 0;
				float2 coords10_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id10_g513 = 0;
				float2 uv10_g513 = 0;
				float voroi10_g513 = voronoi10_g513( coords10_g513, time10_g513, id10_g513, uv10_g513, 0, voronoiSmoothId10_g513 );
				float time12_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId12_g513 = 0;
				float2 coords12_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id12_g513 = 0;
				float2 uv12_g513 = 0;
				float fade12_g513 = 0.5;
				float voroi12_g513 = 0;
				float rest12_g513 = 0;
				for( int it12_g513 = 0; it12_g513 <3; it12_g513++ ){
				voroi12_g513 += fade12_g513 * voronoi12_g513( coords12_g513, time12_g513, id12_g513, uv12_g513, 0,voronoiSmoothId12_g513 );
				rest12_g513 += fade12_g513;
				coords12_g513 *= 2;
				fade12_g513 *= 0.5;
				}//Voronoi12_g513
				voroi12_g513 /= rest12_g513;
				float time24_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId24_g513 = 0;
				float2 coords24_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id24_g513 = 0;
				float2 uv24_g513 = 0;
				float fade24_g513 = 0.5;
				float voroi24_g513 = 0;
				float rest24_g513 = 0;
				for( int it24_g513 = 0; it24_g513 <5; it24_g513++ ){
				voroi24_g513 += fade24_g513 * voronoi24_g513( coords24_g513, time24_g513, id24_g513, uv24_g513, 0,voronoiSmoothId24_g513 );
				rest24_g513 += fade24_g513;
				coords24_g513 *= 2;
				fade24_g513 *= 0.5;
				}//Voronoi24_g513
				voroi24_g513 /= rest24_g513;
				float time23_g513 = temp_output_4_0_g513;
				float2 voronoiSmoothId23_g513 = 0;
				float2 coords23_g513 = temp_output_3_0_g513 * temp_output_5_0_g513;
				float2 id23_g513 = 0;
				float2 uv23_g513 = 0;
				float fade23_g513 = 0.5;
				float voroi23_g513 = 0;
				float rest23_g513 = 0;
				for( int it23_g513 = 0; it23_g513 <6; it23_g513++ ){
				voroi23_g513 += fade23_g513 * voronoi23_g513( coords23_g513, time23_g513, id23_g513, uv23_g513, 0,voronoiSmoothId23_g513 );
				rest23_g513 += fade23_g513;
				coords23_g513 *= 2;
				fade23_g513 *= 0.5;
				}//Voronoi23_g513
				voroi23_g513 /= rest23_g513;
				#if defined( _CAUSTICB_OCT_CAUSTIC1 )
				float staticSwitch13_g512 = voroi2_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC2 )
				float staticSwitch13_g512 = voroi8_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC3 )
				float staticSwitch13_g512 = voroi18_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC4 )
				float staticSwitch13_g512 = voroi17_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC5 )
				float staticSwitch13_g512 = voroi10_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC6 )
				float staticSwitch13_g512 = voroi12_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC7 )
				float staticSwitch13_g512 = voroi24_g513;
				#elif defined( _CAUSTICB_OCT_CAUSTIC8 )
				float staticSwitch13_g512 = voroi23_g513;
				#else
				float staticSwitch13_g512 = voroi2_g513;
				#endif
				float3 temp_cast_47 = (staticSwitch13_g512).xxx;
				float simplePerlin2D12_g512 = snoise( UV20_g512*temp_output_36_0_g512 );
				simplePerlin2D12_g512 = simplePerlin2D12_g512*0.5 + 0.5;
				float3 temp_cast_48 = (simplePerlin2D12_g512).xxx;
				float3 temp_cast_49 = (RF_Zero56_g512).xxx;
				#if defined( _NOISEBTYPE_NONE )
				float3 staticSwitch17_g512 = temp_cast_49;
				#elif defined( _NOISEBTYPE_VORONOICELL )
				float3 staticSwitch17_g512 = temp_cast_46;
				#elif defined( _NOISEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g512 = temp_cast_47;
				#elif defined( _NOISEBTYPE_PERLIN )
				float3 staticSwitch17_g512 = temp_cast_48;
				#elif defined( _NOISEBTYPE_TEXTURE )
				float3 staticSwitch17_g512 = tex2D( _DeformNoiseTypeB, UV20_g512 ).rgb;
				#else
				float3 staticSwitch17_g512 = temp_cast_49;
				#endif
				float3 DBG_RF_NoiseOUT_B701 = staticSwitch17_g512;
				float2 appendResult39_g543 = (float2(_WTypeBTileX , _WTypeBTileY));
				float temp_output_53_0_g543 = _WTypeBOverallSpeed;
				float mulTime27_g543 = _TimeParameters.x * ( _WTypeBSpeedX * temp_output_53_0_g543 );
				float mulTime28_g543 = _TimeParameters.x * ( _WTypeBSpeedY * temp_output_53_0_g543 );
				float2 appendResult34_g543 = (float2(( _WTypeBOffsetX + mulTime27_g543 ) , ( mulTime28_g543 + _WTypeBOffsetY )));
				float2 texCoord37_g543 = IN.ase_texcoord1.xy * ( (( _MidBDeformToggle )?( ( DBG_RF_NoiseOUT_B701 * _DefWeightB ) ):( float3( float2( 0,0 ) ,  0.0 ) )).xy + appendResult39_g543 ) + appendResult34_g543;
				float2 appendResult36_g543 = (float2(_WTypeBAnchorX , _WTypeBAnchorY));
				float mulTime29_g543 = _TimeParameters.x * _WTypeBRotateSpeed;
				float cos38_g543 = cos( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float sin38_g543 = sin( ( radians( mulTime29_g543 ) + radians( _WTypeBRotate ) ) );
				float2 rotator38_g543 = mul( texCoord37_g543 - appendResult36_g543 , float2x2( cos38_g543 , -sin38_g543 , sin38_g543 , cos38_g543 )) + appendResult36_g543;
				float2 UV20_g540 = rotator38_g543;
				float2 temp_output_3_0_g542 = UV20_g540;
				float2 coords2_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id2_g542 = 0;
				float2 uv2_g542 = 0;
				float voroi2_g542 = voronoi2_g542( coords2_g542, time2_g542, id2_g542, uv2_g542, voronoiSmooth2_g542, voronoiSmoothId2_g542 );
				float time8_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId8_g542 = 0;
				float voronoiSmooth8_g542 = temp_output_28_0_g542;
				float2 coords8_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id8_g542 = 0;
				float2 uv8_g542 = 0;
				float fade8_g542 = 0.5;
				float voroi8_g542 = 0;
				float rest8_g542 = 0;
				for( int it8_g542 = 0; it8_g542 <2; it8_g542++ ){
				voroi8_g542 += fade8_g542 * voronoi8_g542( coords8_g542, time8_g542, id8_g542, uv8_g542, voronoiSmooth8_g542,voronoiSmoothId8_g542 );
				rest8_g542 += fade8_g542;
				coords8_g542 *= 2;
				fade8_g542 *= 0.5;
				}//Voronoi8_g542
				voroi8_g542 /= rest8_g542;
				float time18_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId18_g542 = 0;
				float voronoiSmooth18_g542 = temp_output_28_0_g542;
				float2 coords18_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id18_g542 = 0;
				float2 uv18_g542 = 0;
				float fade18_g542 = 0.5;
				float voroi18_g542 = 0;
				float rest18_g542 = 0;
				for( int it18_g542 = 0; it18_g542 <3; it18_g542++ ){
				voroi18_g542 += fade18_g542 * voronoi18_g542( coords18_g542, time18_g542, id18_g542, uv18_g542, voronoiSmooth18_g542,voronoiSmoothId18_g542 );
				rest18_g542 += fade18_g542;
				coords18_g542 *= 2;
				fade18_g542 *= 0.5;
				}//Voronoi18_g542
				voroi18_g542 /= rest18_g542;
				float time17_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId17_g542 = 0;
				float voronoiSmooth17_g542 = temp_output_28_0_g542;
				float2 coords17_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id17_g542 = 0;
				float2 uv17_g542 = 0;
				float fade17_g542 = 0.5;
				float voroi17_g542 = 0;
				float rest17_g542 = 0;
				for( int it17_g542 = 0; it17_g542 <4; it17_g542++ ){
				voroi17_g542 += fade17_g542 * voronoi17_g542( coords17_g542, time17_g542, id17_g542, uv17_g542, voronoiSmooth17_g542,voronoiSmoothId17_g542 );
				rest17_g542 += fade17_g542;
				coords17_g542 *= 2;
				fade17_g542 *= 0.5;
				}//Voronoi17_g542
				voroi17_g542 /= rest17_g542;
				float time10_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId10_g542 = 0;
				float voronoiSmooth10_g542 = temp_output_28_0_g542;
				float2 coords10_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id10_g542 = 0;
				float2 uv10_g542 = 0;
				float fade10_g542 = 0.5;
				float voroi10_g542 = 0;
				float rest10_g542 = 0;
				for( int it10_g542 = 0; it10_g542 <5; it10_g542++ ){
				voroi10_g542 += fade10_g542 * voronoi10_g542( coords10_g542, time10_g542, id10_g542, uv10_g542, voronoiSmooth10_g542,voronoiSmoothId10_g542 );
				rest10_g542 += fade10_g542;
				coords10_g542 *= 2;
				fade10_g542 *= 0.5;
				}//Voronoi10_g542
				voroi10_g542 /= rest10_g542;
				float time12_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId12_g542 = 0;
				float voronoiSmooth12_g542 = temp_output_28_0_g542;
				float2 coords12_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id12_g542 = 0;
				float2 uv12_g542 = 0;
				float fade12_g542 = 0.5;
				float voroi12_g542 = 0;
				float rest12_g542 = 0;
				for( int it12_g542 = 0; it12_g542 <6; it12_g542++ ){
				voroi12_g542 += fade12_g542 * voronoi12_g542( coords12_g542, time12_g542, id12_g542, uv12_g542, voronoiSmooth12_g542,voronoiSmoothId12_g542 );
				rest12_g542 += fade12_g542;
				coords12_g542 *= 2;
				fade12_g542 *= 0.5;
				}//Voronoi12_g542
				voroi12_g542 /= rest12_g542;
				float time24_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId24_g542 = 0;
				float voronoiSmooth24_g542 = temp_output_28_0_g542;
				float2 coords24_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id24_g542 = 0;
				float2 uv24_g542 = 0;
				float fade24_g542 = 0.5;
				float voroi24_g542 = 0;
				float rest24_g542 = 0;
				for( int it24_g542 = 0; it24_g542 <7; it24_g542++ ){
				voroi24_g542 += fade24_g542 * voronoi24_g542( coords24_g542, time24_g542, id24_g542, uv24_g542, voronoiSmooth24_g542,voronoiSmoothId24_g542 );
				rest24_g542 += fade24_g542;
				coords24_g542 *= 2;
				fade24_g542 *= 0.5;
				}//Voronoi24_g542
				voroi24_g542 /= rest24_g542;
				float time23_g542 = temp_output_4_0_g542;
				float2 voronoiSmoothId23_g542 = 0;
				float voronoiSmooth23_g542 = temp_output_28_0_g542;
				float2 coords23_g542 = temp_output_3_0_g542 * temp_output_5_0_g542;
				float2 id23_g542 = 0;
				float2 uv23_g542 = 0;
				float fade23_g542 = 0.5;
				float voroi23_g542 = 0;
				float rest23_g542 = 0;
				for( int it23_g542 = 0; it23_g542 <8; it23_g542++ ){
				voroi23_g542 += fade23_g542 * voronoi23_g542( coords23_g542, time23_g542, id23_g542, uv23_g542, voronoiSmooth23_g542,voronoiSmoothId23_g542 );
				rest23_g542 += fade23_g542;
				coords23_g542 *= 2;
				fade23_g542 *= 0.5;
				}//Voronoi23_g542
				voroi23_g542 /= rest23_g542;
				#if defined( _CELLWAVEB_OCT_CELL1 )
				float staticSwitch40_g540 = voroi2_g542;
				#elif defined( _CELLWAVEB_OCT_CELL2 )
				float staticSwitch40_g540 = voroi8_g542;
				#elif defined( _CELLWAVEB_OCT_CELL3 )
				float staticSwitch40_g540 = voroi18_g542;
				#elif defined( _CELLWAVEB_OCT_CELL4 )
				float staticSwitch40_g540 = voroi17_g542;
				#elif defined( _CELLWAVEB_OCT_CELL5 )
				float staticSwitch40_g540 = voroi10_g542;
				#elif defined( _CELLWAVEB_OCT_CELL6 )
				float staticSwitch40_g540 = voroi12_g542;
				#elif defined( _CELLWAVEB_OCT_CELL7 )
				float staticSwitch40_g540 = voroi24_g542;
				#elif defined( _CELLWAVEB_OCT_CELL8 )
				float staticSwitch40_g540 = voroi23_g542;
				#else
				float staticSwitch40_g540 = voroi2_g542;
				#endif
				float3 temp_cast_51 = (staticSwitch40_g540).xxx;
				float temp_output_5_0_g541 = temp_output_36_0_g540;
				float temp_output_4_0_g541 = mulTime3_g540;
				float time2_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId2_g541 = 0;
				float voronoiSmooth2_g541 = 0.0;
				float2 temp_output_3_0_g541 = UV20_g540;
				float2 coords2_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id2_g541 = 0;
				float2 uv2_g541 = 0;
				float voroi2_g541 = voronoi2_g541( coords2_g541, time2_g541, id2_g541, uv2_g541, voronoiSmooth2_g541, voronoiSmoothId2_g541 );
				float time8_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId8_g541 = 0;
				float voronoiSmooth8_g541 = 0.0;
				float2 coords8_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id8_g541 = 0;
				float2 uv8_g541 = 0;
				float fade8_g541 = 0.5;
				float voroi8_g541 = 0;
				float rest8_g541 = 0;
				for( int it8_g541 = 0; it8_g541 <2; it8_g541++ ){
				voroi8_g541 += fade8_g541 * voronoi8_g541( coords8_g541, time8_g541, id8_g541, uv8_g541, voronoiSmooth8_g541,voronoiSmoothId8_g541 );
				rest8_g541 += fade8_g541;
				coords8_g541 *= 2;
				fade8_g541 *= 0.5;
				}//Voronoi8_g541
				voroi8_g541 /= rest8_g541;
				float time18_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId18_g541 = 0;
				float voronoiSmooth18_g541 = 0.0;
				float2 coords18_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id18_g541 = 0;
				float2 uv18_g541 = 0;
				float fade18_g541 = 0.5;
				float voroi18_g541 = 0;
				float rest18_g541 = 0;
				for( int it18_g541 = 0; it18_g541 <3; it18_g541++ ){
				voroi18_g541 += fade18_g541 * voronoi18_g541( coords18_g541, time18_g541, id18_g541, uv18_g541, voronoiSmooth18_g541,voronoiSmoothId18_g541 );
				rest18_g541 += fade18_g541;
				coords18_g541 *= 2;
				fade18_g541 *= 0.5;
				}//Voronoi18_g541
				voroi18_g541 /= rest18_g541;
				float time17_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId17_g541 = 0;
				float voronoiSmooth17_g541 = 0.0;
				float2 coords17_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id17_g541 = 0;
				float2 uv17_g541 = 0;
				float fade17_g541 = 0.5;
				float voroi17_g541 = 0;
				float rest17_g541 = 0;
				for( int it17_g541 = 0; it17_g541 <6; it17_g541++ ){
				voroi17_g541 += fade17_g541 * voronoi17_g541( coords17_g541, time17_g541, id17_g541, uv17_g541, voronoiSmooth17_g541,voronoiSmoothId17_g541 );
				rest17_g541 += fade17_g541;
				coords17_g541 *= 2;
				fade17_g541 *= 0.5;
				}//Voronoi17_g541
				voroi17_g541 /= rest17_g541;
				float time10_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId10_g541 = 0;
				float2 coords10_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id10_g541 = 0;
				float2 uv10_g541 = 0;
				float voroi10_g541 = voronoi10_g541( coords10_g541, time10_g541, id10_g541, uv10_g541, 0, voronoiSmoothId10_g541 );
				float time12_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId12_g541 = 0;
				float2 coords12_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id12_g541 = 0;
				float2 uv12_g541 = 0;
				float fade12_g541 = 0.5;
				float voroi12_g541 = 0;
				float rest12_g541 = 0;
				for( int it12_g541 = 0; it12_g541 <3; it12_g541++ ){
				voroi12_g541 += fade12_g541 * voronoi12_g541( coords12_g541, time12_g541, id12_g541, uv12_g541, 0,voronoiSmoothId12_g541 );
				rest12_g541 += fade12_g541;
				coords12_g541 *= 2;
				fade12_g541 *= 0.5;
				}//Voronoi12_g541
				voroi12_g541 /= rest12_g541;
				float time24_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId24_g541 = 0;
				float2 coords24_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id24_g541 = 0;
				float2 uv24_g541 = 0;
				float fade24_g541 = 0.5;
				float voroi24_g541 = 0;
				float rest24_g541 = 0;
				for( int it24_g541 = 0; it24_g541 <5; it24_g541++ ){
				voroi24_g541 += fade24_g541 * voronoi24_g541( coords24_g541, time24_g541, id24_g541, uv24_g541, 0,voronoiSmoothId24_g541 );
				rest24_g541 += fade24_g541;
				coords24_g541 *= 2;
				fade24_g541 *= 0.5;
				}//Voronoi24_g541
				voroi24_g541 /= rest24_g541;
				float time23_g541 = temp_output_4_0_g541;
				float2 voronoiSmoothId23_g541 = 0;
				float2 coords23_g541 = temp_output_3_0_g541 * temp_output_5_0_g541;
				float2 id23_g541 = 0;
				float2 uv23_g541 = 0;
				float fade23_g541 = 0.5;
				float voroi23_g541 = 0;
				float rest23_g541 = 0;
				for( int it23_g541 = 0; it23_g541 <6; it23_g541++ ){
				voroi23_g541 += fade23_g541 * voronoi23_g541( coords23_g541, time23_g541, id23_g541, uv23_g541, 0,voronoiSmoothId23_g541 );
				rest23_g541 += fade23_g541;
				coords23_g541 *= 2;
				fade23_g541 *= 0.5;
				}//Voronoi23_g541
				voroi23_g541 /= rest23_g541;
				#if defined( _CAUSTICWAVEB_OCT_CAUSTIC1 )
				float staticSwitch13_g540 = voroi2_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC2 )
				float staticSwitch13_g540 = voroi8_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC3 )
				float staticSwitch13_g540 = voroi18_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC4 )
				float staticSwitch13_g540 = voroi17_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC5 )
				float staticSwitch13_g540 = voroi10_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC6 )
				float staticSwitch13_g540 = voroi12_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC7 )
				float staticSwitch13_g540 = voroi24_g541;
				#elif defined( _CAUSTICWAVEB_OCT_CAUSTIC8 )
				float staticSwitch13_g540 = voroi23_g541;
				#else
				float staticSwitch13_g540 = voroi2_g541;
				#endif
				float3 temp_cast_52 = (staticSwitch13_g540).xxx;
				float simplePerlin2D12_g540 = snoise( UV20_g540*temp_output_36_0_g540 );
				simplePerlin2D12_g540 = simplePerlin2D12_g540*0.5 + 0.5;
				float3 temp_cast_53 = (simplePerlin2D12_g540).xxx;
				float3 temp_cast_54 = (RF_Zero56_g540).xxx;
				#if defined( _WAVEBTYPE_NONE )
				float3 staticSwitch17_g540 = temp_cast_54;
				#elif defined( _WAVEBTYPE_VORONOICELL )
				float3 staticSwitch17_g540 = temp_cast_51;
				#elif defined( _WAVEBTYPE_VORONOICAUSTIC )
				float3 staticSwitch17_g540 = temp_cast_52;
				#elif defined( _WAVEBTYPE_PERLIN )
				float3 staticSwitch17_g540 = temp_cast_53;
				#elif defined( _WAVEBTYPE_TEXTURE )
				float3 staticSwitch17_g540 = tex2D( _WaveTypeB, UV20_g540 ).rgb;
				#else
				float3 staticSwitch17_g540 = temp_cast_54;
				#endif
				float3 DBG_WaveOUT_B1275 = staticSwitch17_g540;
				float3 gammaToLinear1312 = Gamma22ToLinear( DBG_WaveOUT_B1275 );
				float3 linearToGamma1313 = LinearToGamma22( DBG_WaveOUT_B1275 );
				#if defined( _WAVEBGRADETYPE_LINEAR )
				float3 staticSwitch1314 = gammaToLinear1312;
				#elif defined( _WAVEBGRADETYPE_NORMAL )
				float3 staticSwitch1314 = DBG_WaveOUT_B1275;
				#elif defined( _WAVEBGRADETYPE_GAMMA )
				float3 staticSwitch1314 = linearToGamma1313;
				#else
				float3 staticSwitch1314 = gammaToLinear1312;
				#endif
				float3 temp_cast_55 = (_WaveBExp).xxx;
				float3 temp_output_1329_0 = pow( (staticSwitch1314*_WaveBAmplitude + 0.0) , temp_cast_55 );
				#ifdef _WAVEBINVERT_ON
				float3 staticSwitch1332 = ( 1.0 - temp_output_1329_0 );
				#else
				float3 staticSwitch1332 = temp_output_1329_0;
				#endif
				float4 lerpResult5_g768 = lerp( float4( float3(0.5,0.5,0.5) , 0.0 ) , float4( staticSwitch1332 , 0.0 ) , _WaveBContrast);
				float4 temp_output_18_0_g769 = ( _WaveBIntensity * saturate( lerpResult5_g768 ) );
				float dotResult7_g769 = dot( temp_output_17_0_g769 , temp_output_18_0_g769 );
				float4 temp_cast_58 = (dotResult7_g769).xxxx;
				#if defined( _SELECTWAVETYPE_LAYERA )
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#elif defined( _SELECTWAVETYPE_LAYERB )
				float4 staticSwitch9_g769 = temp_output_18_0_g769;
				#elif defined( _SELECTWAVETYPE_MULTIPLY )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 * temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_ADD )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 + temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_SUBTRACT )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 - temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DIVIDE )
				float4 staticSwitch9_g769 = ( temp_output_17_0_g769 / temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_DOT )
				float4 staticSwitch9_g769 = temp_cast_58;
				#elif defined( _SELECTWAVETYPE_FMOD )
				float4 staticSwitch9_g769 = fmod( temp_output_17_0_g769 , temp_output_18_0_g769 );
				#elif defined( _SELECTWAVETYPE_FMODINVERT )
				float4 staticSwitch9_g769 = fmod( temp_output_18_0_g769 , temp_output_17_0_g769 );
				#else
				float4 staticSwitch9_g769 = temp_output_17_0_g769;
				#endif
				float4 temp_output_1303_0 = staticSwitch9_g769;
				float3 RF_FlowMask535 = staticSwitch23_g762;
				float4 RF_MidWave1281 = saturate( (( _MidFlowMask )?( ( temp_output_1303_0 * float4( ( 1.0 - ( RF_FlowMask535 * RF_FlowMask535 ) ) , 0.0 ) ) ):( temp_output_1303_0 )) );
				float4 temp_output_1638_0 = ( _MiddleWaveIntensity * RF_MidWave1281 );
				float3 linearToGamma1433 = LinearToGamma22( saturate( ( (( _ShoreFoamToggle )?( ( RF_FoamTexture1690 * float4( temp_output_1637_0 , 0.0 ) ) ):( float4( temp_output_1637_0 , 0.0 ) )) + (( _MiddleFoamToggle )?( ( temp_output_1638_0 * RF_FoamTexture1690 ) ):( temp_output_1638_0 )) ) ).rgb );
				float3 RF_SurfaceWave1466 = linearToGamma1433;
				float3 RF_TransparentIntensity1436 = (( _TRSurfWaveToggle )?( ( _Transparency * RF_SurfaceWave1466 ) ):( temp_cast_0 ));
				

				surfaceDescription.Alpha = RF_TransparentIntensity1436.x;
				surfaceDescription.AlphaClipThreshold = 0.5;

				#if _ALPHATEST_ON
					float alphaClipThreshold = 0.01f;
					#if ALPHA_CLIP_THRESHOLD
						alphaClipThreshold = surfaceDescription.AlphaClipThreshold;
					#endif
						clip(surfaceDescription.Alpha - alphaClipThreshold);
				#endif

				half4 outColor = 0;

				#ifdef SCENESELECTIONPASS
					outColor = half4(_ObjectId, _PassValue, 1.0, 1.0);
				#elif defined(SCENEPICKINGPASS)
					outColor = _SelectionID;
				#endif

				return outColor;
			}

			ENDHLSL
		}
		
	}
	
	CustomEditor "BWaterSurfaceEditor"
	FallBack "Hidden/Shader Graph/FallbackError"
	
	Fallback Off
}
/*ASEBEGIN
Version=19602
Node;AmplifyShaderEditor.CommentaryNode;693;-4528,-2896;Inherit;False;1056.933;1149;NoiseType A;17;674;692;691;686;687;690;688;689;685;683;682;681;680;679;678;798;1380;;0.7926196,0.4496855,1,1;0;0
Node;AmplifyShaderEditor.CommentaryNode;700;-4528,-1712;Inherit;False;1061.267;1141.2;NoiseType B;18;1;701;713;712;715;716;710;711;714;709;708;707;706;705;704;703;792;1342;;0.7926196,0.4496855,1,1;0;0
Node;AmplifyShaderEditor.RangedFloatNode;691;-4432,-1840;Inherit;False;Property;_NTypeAAnchorY;NType A Anchor Y;235;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;692;-4432,-1904;Inherit;False;Property;_NTypeAAnchorX;NType A Anchor X;110;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;690;-4464,-1968;Inherit;False;Property;_NTypeARotateSpeed;NType A Rotate Speed;221;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;688;-4464,-2096;Inherit;False;Property;_NTypeAOverallSpeed;NType A OverallSpeed;152;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;687;-4432,-2160;Inherit;False;Property;_NTypeASpeedY;NType A Speed Y;146;0;Create;True;0;0;0;True;0;False;0.1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;686;-4432,-2224;Inherit;False;Property;_NTypeASpeedX;NType A Speed X;142;0;Create;True;0;0;0;True;0;False;0.1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;685;-4432,-2288;Inherit;False;Property;_NTypeAOffsetY;NType A Offset Y;223;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;683;-4432,-2352;Inherit;False;Property;_NTypeAOffsetX;NType A Offset X;127;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;682;-4400,-2416;Inherit;False;Property;_NTypeATileY;NType A Tile Y;125;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;681;-4400,-2480;Inherit;False;Property;_NTypeATileX;NType A Tile X;119;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;680;-4400,-2544;Inherit;False;Property;_ANoiseScale;A Noise Scale;135;0;Create;True;0;0;0;True;0;False;8;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;679;-4496,-2608;Inherit;False;Property;_AVoronoiSmooth;A Voronoi Smooth;243;0;Create;True;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;678;-4496,-2672;Inherit;False;Property;_AVoronoiAngleSpeed;A Voronoi Angle Speed;242;0;Create;True;0;0;0;True;0;False;1;0;-8;8;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;689;-4496,-2032;Inherit;False;Property;_NTypeARotate;NType A Rotate;158;0;Create;True;0;0;0;True;0;False;0;0;-360;360;0;1;FLOAT;0
Node;AmplifyShaderEditor.TexturePropertyNode;798;-4464,-2848;Inherit;True;Property;_DeformNoiseTypeA;Deform Noise Type A;154;1;[NoScaleOffset];Create;True;0;0;0;True;0;False;None;None;False;white;Auto;Texture2D;-1;0;2;SAMPLER2D;0;SAMPLERSTATE;1
Node;AmplifyShaderEditor.RangedFloatNode;703;-4496,-1488;Inherit;False;Property;_BVoronoiAngleSpeed;B Voronoi Angle Speed;237;0;Create;True;0;0;0;True;0;False;1;0;-8;8;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;705;-4400,-1360;Inherit;False;Property;_BNoiseScale;B Noise Scale;136;0;Create;True;0;0;0;True;0;False;8;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;706;-4400,-1296;Inherit;False;Property;_NTypeBTileX;NType B Tile X;115;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;707;-4400,-1232;Inherit;False;Property;_NTypeBTileY;NType B Tile Y;120;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;708;-4432,-1168;Inherit;False;Property;_NTypeBOffsetX;NType B Offset X;126;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;709;-4432,-1104;Inherit;False;Property;_NTypeBOffsetY;NType B Offset Y;222;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;714;-4432,-1040;Inherit;False;Property;_NTypeBSpeedX;NType B Speed X;138;0;Create;True;0;0;0;True;0;False;0.1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;713;-4432,-976;Inherit;False;Property;_NTypeBSpeedY;NType B Speed Y;147;0;Create;True;0;0;0;True;0;False;0.1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;711;-4464,-912;Inherit;False;Property;_NTypeBOverallSpeed;NType B OverallSpeed;148;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;716;-4432,-720;Inherit;False;Property;_NTypeBAnchorX;NType B Anchor X;114;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;715;-4432,-656;Inherit;False;Property;_NTypeBAnchorY;NType B Anchor Y;228;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;704;-4496,-1424;Inherit;False;Property;_BVoronoiSmooth;B Voronoi Smooth;247;0;Create;True;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.TexturePropertyNode;792;-4464,-1664;Inherit;True;Property;_DeformNoiseTypeB;Deform Noise Type B;153;1;[NoScaleOffset];Create;True;0;0;0;True;0;False;None;None;False;white;Auto;Texture2D;-1;0;2;SAMPLER2D;0;SAMPLERSTATE;1
Node;AmplifyShaderEditor.RangedFloatNode;712;-4464,-784;Inherit;False;Property;_NTypeBRotateSpeed;NType B Rotate Speed;201;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;710;-4496,-848;Inherit;False;Property;_NTypeBRotate;NType B Rotate;162;0;Create;True;0;0;0;True;0;False;0;0;-360;360;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;1342;-4080,-1360;Inherit;False;BUDUNoiseBSelector;53;;512;bd6f4d8408874c245806f989fa955dd9;0;15;62;SAMPLER2D;;False;34;FLOAT;0;False;35;FLOAT;0;False;36;FLOAT;0;False;21;FLOAT;1;False;22;FLOAT;1;False;23;FLOAT;0;False;24;FLOAT;0;False;25;FLOAT;0;False;26;FLOAT;0;False;27;FLOAT;0;False;28;FLOAT;0;False;29;FLOAT;0;False;30;FLOAT;0;False;31;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.FunctionNode;1380;-4080,-2512;Inherit;False;BUDUNoiseASelector;70;;516;07c1ef44ebfbb4f429f60b74c0d6514f;0;15;62;SAMPLER2D;;False;34;FLOAT;0;False;35;FLOAT;0;False;36;FLOAT;0;False;21;FLOAT;1;False;22;FLOAT;1;False;23;FLOAT;0;False;24;FLOAT;0;False;25;FLOAT;0;False;26;FLOAT;0;False;27;FLOAT;0;False;28;FLOAT;0;False;29;FLOAT;0;False;30;FLOAT;0;False;31;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.CommentaryNode;1237;-3436.373,-2896;Inherit;False;1469.306;1147.867;waveType A;21;1351;1349;1350;1251;1238;1239;1240;1241;1254;1242;1243;1244;1245;1246;1247;1248;1249;1250;1253;1361;1362;;0.7926196,0.4496855,1,1;0;0
Node;AmplifyShaderEditor.CommentaryNode;1258;-3438.873,-1712;Inherit;False;1471.806;1133.632;WaveType B;22;1353;1354;1352;1260;1274;1273;1272;1271;1270;1269;1268;1267;1266;1265;1264;1263;1262;1261;1275;1363;1364;1355;;0.7926196,0.4496855,1,1;0;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;674;-3728,-2512;Inherit;False;DBG_RF_NoiseOUT_A;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;701;-3728,-1360;Inherit;False;DBG_RF_NoiseOUT_B;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1361;-3424,-2304;Inherit;False;Property;_DefWeightA;DefWeightA;195;0;Create;True;0;0;0;False;0;False;1;0;-20;20;0;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1349;-3408,-2384;Inherit;False;674;DBG_RF_NoiseOUT_A;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1364;-3424,-1120;Inherit;False;Property;_DefWeightB;DefWeightB;194;0;Create;True;0;0;0;False;0;False;1;0;-20;20;0;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1353;-3408,-1200;Inherit;False;701;DBG_RF_NoiseOUT_B;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.Vector2Node;1351;-3312,-2560;Inherit;False;Constant;_Vector1;Vector 1;141;0;Create;True;0;0;0;False;0;False;0,0;0,0;0;3;FLOAT2;0;FLOAT;1;FLOAT;2
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1362;-3152,-2352;Inherit;False;2;2;0;FLOAT3;0,0,0;False;1;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.Vector2Node;1354;-3312,-1360;Inherit;False;Constant;_Vector2;Vector 1;141;0;Create;True;0;0;0;False;0;False;0,0;0,0;0;3;FLOAT2;0;FLOAT;1;FLOAT;2
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1363;-3152,-1168;Inherit;False;2;2;0;FLOAT3;0,0,0;False;1;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1253;-2992,-2672;Inherit;False;Property;_WAVoronoiAngleSpeed;WA Voronoi Angle Speed;239;0;Create;True;0;0;0;True;0;False;1;0;-8;8;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1250;-2992,-2608;Inherit;False;Property;_WAVoronoiSmooth;WA Voronoi Smooth;246;0;Create;True;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1249;-2896,-2544;Inherit;False;Property;_WANoiseScale;WA Noise Scale;134;0;Create;True;0;0;0;True;0;False;8;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1248;-2896,-2480;Inherit;False;Property;_WTypeATileX;WType A Tile X;116;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1247;-2896,-2416;Inherit;False;Property;_WTypeATileY;WType A Tile Y;123;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1246;-2928,-2352;Inherit;False;Property;_WTypeAOffsetX;WType A Offset X;130;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1245;-2928,-2288;Inherit;False;Property;_WTypeAOffsetY;WType A Offset Y;224;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1244;-2928,-2224;Inherit;False;Property;_WTypeASpeedX;WType A Speed X;139;0;Create;True;0;0;0;True;0;False;0.1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1243;-2928,-2160;Inherit;False;Property;_WTypeASpeedY;WType A Speed Y;143;0;Create;True;0;0;0;True;0;False;0.1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1242;-2960,-2096;Inherit;False;Property;_WTypeAOverallSpeed;WType A OverallSpeed;151;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1254;-2992,-2032;Inherit;False;Property;_WTypeARotate;WType A Rotate;159;0;Create;True;0;0;0;True;0;False;0;0;-360;360;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1241;-2960,-1968;Inherit;False;Property;_WTypeARotateSpeed;WType A Rotate Speed;202;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1240;-2928,-1904;Inherit;False;Property;_WTypeAAnchorX;WType A Anchor X;113;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1239;-2928,-1840;Inherit;False;Property;_WTypeAAnchorY;WType A Anchor Y;230;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.TexturePropertyNode;1251;-2944,-2848;Inherit;True;Property;_WaveTypeA;Wave Type A;157;1;[NoScaleOffset];Create;True;0;0;0;True;0;False;None;None;False;white;Auto;Texture2D;-1;0;2;SAMPLER2D;0;SAMPLERSTATE;1
Node;AmplifyShaderEditor.ToggleSwitchNode;1350;-3152,-2496;Inherit;False;Property;_MidADeformToggle;MidADeformToggle;192;0;Create;True;0;0;0;False;0;False;0;True;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1261;-2992,-1488;Inherit;False;Property;_WBVoronoiAngleSpeed;WB Voronoi Angle Speed;241;0;Create;True;0;0;0;True;0;False;1;0;-8;8;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1262;-2992,-1424;Inherit;False;Property;_WBVoronoiSmooth;WB Voronoi Smooth;245;0;Create;True;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1263;-2896,-1360;Inherit;False;Property;_WBNoiseScale;WB Noise Scale;131;0;Create;True;0;0;0;True;0;False;8;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1264;-2896,-1296;Inherit;False;Property;_WTypeBTileX;WType B Tile X;118;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1265;-2896,-1232;Inherit;False;Property;_WTypeBTileY;WType B Tile Y;121;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1266;-2928,-1168;Inherit;False;Property;_WTypeBOffsetX;WType B Offset X;129;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1267;-2928,-1104;Inherit;False;Property;_WTypeBOffsetY;WType B Offset Y;225;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1268;-2928,-1040;Inherit;False;Property;_WTypeBSpeedX;WType B Speed X;140;0;Create;True;0;0;0;True;0;False;0.1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1269;-2928,-976;Inherit;False;Property;_WTypeBSpeedY;WType B Speed Y;144;0;Create;True;0;0;0;True;0;False;0.1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1270;-2960,-912;Inherit;False;Property;_WTypeBOverallSpeed;WType B OverallSpeed;150;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1271;-2992,-848;Inherit;False;Property;_WTypeBRotate;WType B Rotate;161;0;Create;True;0;0;0;True;0;False;0;0;-360;360;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1272;-2960,-784;Inherit;False;Property;_WTypeBRotateSpeed;WType B Rotate Speed;219;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1273;-2928,-720;Inherit;False;Property;_WTypeBAnchorX;WType B Anchor X;112;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1274;-2928,-656;Inherit;False;Property;_WTypeBAnchorY;WType B Anchor Y;232;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.TexturePropertyNode;1260;-2944,-1664;Inherit;True;Property;_WaveTypeB;Wave Type B;155;1;[NoScaleOffset];Create;True;0;0;0;True;0;False;None;None;False;white;Auto;Texture2D;-1;0;2;SAMPLER2D;0;SAMPLERSTATE;1
Node;AmplifyShaderEditor.ToggleSwitchNode;1352;-3152,-1296;Inherit;False;Property;_MidBDeformToggle;MidBDeformToggle;190;0;Create;True;0;0;0;False;0;False;0;True;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.FunctionNode;1355;-2576,-1328;Inherit;False;BUDUWaveBSelector;18;;540;8564192d69bcbaa41868c29cc3ce71a5;0;16;62;SAMPLER2D;;False;66;FLOAT2;0,0;False;34;FLOAT;0;False;35;FLOAT;0;False;36;FLOAT;0;False;21;FLOAT;1;False;22;FLOAT;1;False;23;FLOAT;0;False;24;FLOAT;0;False;25;FLOAT;0;False;26;FLOAT;0;False;27;FLOAT;0;False;28;FLOAT;0;False;29;FLOAT;0;False;30;FLOAT;0;False;31;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.FunctionNode;1686;-2576,-2512;Inherit;False;BUDUWaveASelector;35;;790;70f29f6919f9c1b44b28670b30d26061;0;16;62;SAMPLER2D;;False;69;FLOAT2;0,0;False;34;FLOAT;0;False;35;FLOAT;0;False;36;FLOAT;0;False;21;FLOAT;1;False;22;FLOAT;1;False;23;FLOAT;0;False;24;FLOAT;0;False;25;FLOAT;0;False;26;FLOAT;0;False;27;FLOAT;0;False;28;FLOAT;0;False;29;FLOAT;0;False;30;FLOAT;0;False;31;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.CommentaryNode;1337;-1920,-2048;Inherit;False;3124.898;802.4333;Middle Wave;36;1369;1390;1367;1327;1281;1304;1368;1365;1303;1336;1325;1334;1324;1321;1322;1333;1332;1388;1387;1329;1318;1317;1316;1328;1326;1314;1315;1311;1313;1312;1310;1309;1308;1307;1255;1277;;0.7926196,0.4496855,1,1;0;0
Node;AmplifyShaderEditor.CommentaryNode;1642;-6032,-1712;Inherit;False;1471.806;1133.632;Foam Texture;22;1664;1662;1661;1660;1659;1658;1657;1656;1655;1654;1653;1652;1651;1650;1649;1648;1647;1646;1645;1644;1643;1685;;0.7926196,0.4496855,1,1;0;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1238;-2224,-2512;Inherit;False;DBG_WaveOUT_A;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1275;-2224,-1328;Inherit;False;DBG_WaveOUT_B;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GetLocalVarNode;1277;-1888,-1568;Inherit;False;1275;DBG_WaveOUT_B;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GetLocalVarNode;1255;-1888,-1920;Inherit;False;1238;DBG_WaveOUT_A;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GetLocalVarNode;1644;-6000,-1200;Inherit;False;674;DBG_RF_NoiseOUT_A;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1643;-6016,-1120;Inherit;False;Property;_DefWeightFoam;DefWeightFoam;193;0;Create;True;0;0;0;False;0;False;1;0;-20;20;0;1;FLOAT;0
Node;AmplifyShaderEditor.RelayNode;1307;-1664,-1920;Inherit;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RelayNode;1308;-1664,-1568;Inherit;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1646;-5744,-1168;Inherit;False;2;2;0;FLOAT3;0,0,0;False;1;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.Vector2Node;1645;-5904,-1360;Inherit;False;Constant;_Vector3;Vector 1;141;0;Create;True;0;0;0;False;0;False;0,0;0,0;0;3;FLOAT2;0;FLOAT;1;FLOAT;2
Node;AmplifyShaderEditor.CommentaryNode;576;-4128,288;Inherit;False;1819.708;1361.475;Flow Map Settings;27;535;536;542;541;540;539;538;537;546;570;549;550;562;547;551;545;552;544;625;623;624;660;659;1119;1126;1374;1543;;1,0.5251572,0.5251572,1;0;0
Node;AmplifyShaderEditor.GammaToLinearNode;1309;-1536,-1952;Inherit;False;3;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.LinearToGammaNode;1310;-1536,-1856;Inherit;False;3;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GammaToLinearNode;1312;-1536,-1600;Inherit;False;3;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.LinearToGammaNode;1313;-1536,-1504;Inherit;False;3;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.ToggleSwitchNode;1662;-5744,-1296;Inherit;False;Property;_FoamDeformToggle;FoamDeformToggle;191;0;Create;True;0;0;0;False;0;False;0;True;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1657;-5552,-848;Inherit;False;Property;_FoamRotate;Foam Rotate;160;0;Create;True;0;0;0;True;0;False;0;0;-360;360;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1658;-5488,-784;Inherit;False;Property;_FoamRotateSpeed;Foam Rotate Speed;218;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1659;-5456,-720;Inherit;False;Property;_FoamAnchorX;Foam Anchor X;111;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1660;-5456,-656;Inherit;False;Property;_FoamAnchorY;Foam Anchor Y;231;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1647;-5552,-1488;Inherit;False;Property;_FoamVoronoiAngleSpeed;Foam Voronoi Angle Speed;240;0;Create;True;0;0;0;True;0;False;1;0;-8;8;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1648;-5552,-1424;Inherit;False;Property;_FoamVoronoiSmooth;Foam Voronoi Smooth;244;0;Create;True;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1652;-5456,-1168;Inherit;False;Property;_FoamOffsetX;Foam Offset X;128;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1653;-5456,-1104;Inherit;False;Property;_FoamOffsetY;Foam Offset Y;226;0;Create;True;0;0;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1654;-5456,-1040;Inherit;False;Property;_FoamSpeedX;Foam Speed X;141;0;Create;True;0;0;0;True;0;False;0.1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1655;-5456,-976;Inherit;False;Property;_FoamSpeedY;Foam Speed Y;145;0;Create;True;0;0;0;True;0;False;0.1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1656;-5488,-912;Inherit;False;Property;_FoamOverallSpeed;Foam OverallSpeed;149;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1649;-5488,-1360;Inherit;False;Property;_FoamNoiseScale;Foam Noise Scale;132;0;Create;True;0;0;0;True;0;False;8;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1650;-5456,-1296;Inherit;False;Property;_FoamTileX;Foam Tile X;117;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1651;-5456,-1232;Inherit;False;Property;_FoamTileY;Foam Tile Y;122;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.TexturePropertyNode;1661;-5504,-1664;Inherit;True;Property;_FoamTexture;Foam Texture;156;1;[NoScaleOffset];Create;True;0;0;0;True;0;False;None;None;False;white;Auto;Texture2D;-1;0;2;SAMPLER2D;0;SAMPLERSTATE;1
Node;AmplifyShaderEditor.RangedFloatNode;625;-4096,800;Inherit;False;Property;_DepthSize;Depth Size;271;0;Create;True;0;0;0;True;0;False;1;1;0;2;0;1;FLOAT;0
Node;AmplifyShaderEditor.StaticSwitch;1311;-1312,-1920;Inherit;False;Property;_WaveAGradeType;WaveAGradeType;174;0;Create;True;0;0;0;True;0;False;0;0;0;True;;KeywordEnum;3;Linear;Normal;Gamma;Create;True;True;All;9;1;FLOAT3;0,0,0;False;0;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;7;FLOAT3;0,0,0;False;8;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.StaticSwitch;1314;-1312,-1568;Inherit;False;Property;_WaveBGradeType;WaveBGradeType;175;0;Create;True;0;0;0;True;0;False;0;0;0;True;;KeywordEnum;3;Linear;Normal;Gamma;Create;True;True;All;9;1;FLOAT3;0,0,0;False;0;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;7;FLOAT3;0,0,0;False;8;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1326;-1344,-1424;Inherit;False;Property;_WaveBAmplitude;WaveBAmplitude;165;0;Create;True;0;0;0;True;0;False;1;0;0;4;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;1685;-5200,-1328;Inherit;False;BUDUFoamSelector;0;;786;d76099b89fef04f4dbde574259a547ab;0;16;62;SAMPLER2D;;False;69;FLOAT2;0,0;False;34;FLOAT;0;False;35;FLOAT;0;False;36;FLOAT;0;False;21;FLOAT;1;False;22;FLOAT;1;False;23;FLOAT;0;False;24;FLOAT;0;False;25;FLOAT;0;False;26;FLOAT;0;False;27;FLOAT;0;False;28;FLOAT;0;False;29;FLOAT;0;False;30;FLOAT;0;False;31;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1315;-1344,-1776;Inherit;False;Property;_WaveAAmplitude;WaveAAmplitude;166;0;Create;True;0;0;0;True;0;False;1;0;0;4;0;1;FLOAT;0
Node;AmplifyShaderEditor.CommentaryNode;1691;-1920,1792;Inherit;False;2278.667;475.3335;Foam Texture Settings;16;1697;1669;1690;1689;1688;1687;1676;1675;1674;1673;1672;1671;1682;1680;1681;1670;;1,1,1,1;0;0
Node;AmplifyShaderEditor.RangedFloatNode;624;-4000,608;Inherit;False;Property;_DepthDistance;Depth Distance;269;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;623;-4032,704;Inherit;False;Property;_DepthExponential;Depth Exponential;270;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleAddOpNode;660;-3824,800;Inherit;False;2;2;0;FLOAT;0;False;1;FLOAT;1;False;1;FLOAT;0
Node;AmplifyShaderEditor.ScaleAndOffsetNode;1328;-1056,-1568;Inherit;False;3;0;FLOAT3;0,0,0;False;1;FLOAT;1;False;2;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.ScaleAndOffsetNode;1317;-1056,-1920;Inherit;False;3;0;FLOAT3;0,0,0;False;1;FLOAT;1;False;2;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1327;-1120,-1344;Inherit;False;Property;_WaveBExp;WaveBExp;169;0;Create;True;0;0;0;True;0;False;1;0;0;4;0;1;FLOAT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1664;-4816,-1328;Inherit;False;DBG_FoamOUT;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1316;-1120,-1696;Inherit;False;Property;_WaveAExp;WaveAExp;170;0;Create;True;0;0;0;True;0;False;1;0;0;4;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;549;-3264,912;Inherit;False;Property;_FlowSpeed;Flow Speed;280;0;Create;True;0;0;0;True;0;False;0.25;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;570;-3360,992;Inherit;False;Property;_OffsetB;Offset B;279;0;Create;True;0;0;0;True;0;False;0.5;0;-1;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;546;-3360,1072;Inherit;False;Property;_MapChangeSpeed;Map Change Speed;284;0;Create;True;0;0;0;True;0;False;1;2;0;20;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;537;-3232,1152;Inherit;False;Property;_ATileX;ATileX;286;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;538;-3232,1232;Inherit;False;Property;_ATileY;ATileY;285;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;539;-3360,1312;Inherit;False;Property;_RotateA;Rotate A;287;1;[IntRange];Create;True;0;0;0;True;0;False;0;0;0;4;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;540;-3232,1392;Inherit;False;Property;_BTileX;BTileX;288;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;541;-3232,1472;Inherit;False;Property;_BTileY;BTileY;289;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.TexturePropertyNode;552;-3408,352;Inherit;True;Property;_TextureMap;Texture Map;274;1;[NoScaleOffset];Create;True;0;0;0;True;0;False;None;None;False;white;Auto;Texture2D;-1;0;2;SAMPLER2D;0;SAMPLERSTATE;1
Node;AmplifyShaderEditor.TexturePropertyNode;545;-3632,352;Inherit;True;Property;_FlowMap;Flow Map;273;1;[NoScaleOffset];Create;True;0;0;0;True;0;False;None;None;False;white;Auto;Texture2D;-1;0;2;SAMPLER2D;0;SAMPLERSTATE;1
Node;AmplifyShaderEditor.RangedFloatNode;542;-3360,1552;Inherit;False;Property;_RotateB;Rotate B;290;1;[IntRange];Create;True;0;0;0;True;0;False;0;0;0;4;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;659;-3648,672;Inherit;False;BUDUDepthFade;263;;761;47987ecf53b4f2847a33a9193dc9d94e;0;3;18;FLOAT;0;False;19;FLOAT;0;False;26;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;550;-3360,832;Inherit;False;Property;_InfluenceFlow;InfluenceFlow;278;0;Create;False;0;0;0;True;0;False;2;0;-4;4;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1119;-3712,1008;Inherit;False;Property;_FlowTextureAmplitude;FlowTextureAmplitude;164;0;Create;True;0;0;0;True;0;False;1;0;0;4;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1126;-3712,928;Inherit;False;Property;_FlowTextureExponential;FlowTextureExponential;163;0;Create;True;0;0;0;True;0;False;1;0;0;4;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;551;-3712,1088;Inherit;False;Property;_FlowTextureContrast;Flow Texture Contrast;282;0;Create;True;0;0;0;True;0;False;1;0;-4;4;0;1;FLOAT;0
Node;AmplifyShaderEditor.TexturePropertyNode;544;-3184,352;Inherit;True;Property;_MaskMap;Mask Map;275;1;[NoScaleOffset];Create;True;0;0;0;True;0;False;None;None;False;white;Auto;Texture2D;-1;0;2;SAMPLER2D;0;SAMPLERSTATE;1
Node;AmplifyShaderEditor.RangedFloatNode;1374;-3360,592;Inherit;False;Property;_MaskGradeAmplitude;Mask Grade Amplitude;277;0;Create;True;0;0;0;True;0;False;1;1;1;4;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;562;-3360,752;Inherit;False;Property;_MapExponential;Map Exponential;283;0;Create;True;0;0;0;True;0;False;0.3;1;-0.4;2;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;547;-3360,672;Inherit;False;Property;_MaskGradePower;Mask Grade Power;276;0;Create;True;0;0;0;True;0;False;1;0;0.3;5;0;1;FLOAT;0
Node;AmplifyShaderEditor.PowerNode;1318;-832,-1920;Inherit;False;False;2;0;FLOAT3;0,0,0;False;1;FLOAT;1;False;1;FLOAT3;0
Node;AmplifyShaderEditor.PowerNode;1329;-832,-1568;Inherit;False;False;2;0;FLOAT3;0,0,0;False;1;FLOAT;1;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GetLocalVarNode;1669;-1872,1936;Inherit;False;1664;DBG_FoamOUT;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.OneMinusNode;1387;-672,-1856;Inherit;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.OneMinusNode;1388;-672,-1504;Inherit;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.FunctionNode;1543;-2896,752;Inherit;False;BUDUFlowMap;88;;762;b88bd16f4e10f7b44aa23edcbaad21c4;0;20;100;FLOAT3;0,0,0;False;70;SAMPLER2D;0;False;84;SAMPLER2D;0,0,0;False;72;SAMPLER2D;0;False;124;FLOAT;0;False;66;FLOAT;0;False;118;FLOAT;0;False;115;FLOAT;0;False;81;FLOAT;0;False;93;FLOAT;0;False;58;FLOAT;0;False;56;FLOAT;0;False;97;FLOAT;0;False;65;FLOAT;0;False;54;FLOAT;0;False;55;FLOAT;0;False;57;FLOAT;0;False;60;FLOAT;0;False;59;FLOAT;0;False;61;FLOAT;0;False;2;FLOAT3;0;FLOAT3;67
Node;AmplifyShaderEditor.RelayNode;1670;-1648,1936;Inherit;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;535;-2528,832;Inherit;False;RF_FlowMask;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.StaticSwitch;1332;-512,-1568;Inherit;False;Property;_WaveBInvert;WaveBInvert;198;0;Create;True;0;0;0;True;0;False;0;0;0;True;;Toggle;2;Key0;Key1;Create;True;True;All;9;1;FLOAT3;0,0,0;False;0;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;7;FLOAT3;0,0,0;False;8;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1333;-512,-1456;Inherit;False;Property;_WaveBContrast;Wave B Contrast;180;0;Create;True;0;0;0;True;0;False;1;1;0;3;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1322;-512,-1808;Inherit;False;Property;_WaveAContrast;Wave A Contrast;179;0;Create;True;0;0;0;True;0;False;1;1;0;3;0;1;FLOAT;0
Node;AmplifyShaderEditor.StaticSwitch;1321;-480,-1920;Inherit;False;Property;_WaveAInvert;WaveAInvert;197;0;Create;True;0;0;0;True;0;False;0;0;0;True;;Toggle;2;Key0;Key1;Create;True;True;All;9;1;FLOAT3;0,0,0;False;0;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;7;FLOAT3;0,0,0;False;8;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.LinearToGammaNode;1681;-1520,2000;Inherit;False;3;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GammaToLinearNode;1680;-1520,1904;Inherit;False;3;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1324;-320,-2000;Inherit;False;Property;_WaveAIntensity;WaveAIntensity;185;0;Create;True;0;0;0;True;0;False;1;0;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1334;-320,-1648;Inherit;False;Property;_WaveBIntensity;WaveBIntensity;184;0;Create;True;0;0;0;True;0;False;1;0;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1367;-112,-1424;Inherit;False;535;RF_FlowMask;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.FunctionNode;1544;-224,-1920;Inherit;False;BUDUContrast;-1;;767;bbef371528583124ab5d8e8ec0c6a0f1;0;2;1;COLOR;0,0,0,0;False;3;FLOAT;1;False;1;COLOR;0
Node;AmplifyShaderEditor.FunctionNode;1545;-224,-1568;Inherit;False;BUDUContrast;-1;;768;bbef371528583124ab5d8e8ec0c6a0f1;0;2;1;COLOR;0,0,0,0;False;3;FLOAT;1;False;1;COLOR;0
Node;AmplifyShaderEditor.StaticSwitch;1682;-1296,1936;Inherit;False;Property;_FoamGradeType;FoamGradeType;177;0;Create;True;0;0;0;True;0;False;0;0;0;True;;KeywordEnum;3;Linear;Normal;Gamma;Create;True;True;All;9;1;FLOAT3;0,0,0;False;0;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;7;FLOAT3;0,0,0;False;8;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1671;-1328,2080;Inherit;False;Property;_FoamAmplitude;FoamAmplitude;167;0;Create;True;0;0;0;True;0;False;1;0;0;4;0;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1325;-32,-1920;Inherit;False;2;2;0;FLOAT;0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1336;-32,-1568;Inherit;False;2;2;0;FLOAT;0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1390;112,-1424;Inherit;False;2;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1697;-1104,2176;Inherit;False;Property;_FoamExp;FoamExp;171;0;Create;True;0;0;0;True;0;False;1;0;0;4;0;1;FLOAT;0
Node;AmplifyShaderEditor.ScaleAndOffsetNode;1672;-1040,1936;Inherit;False;3;0;FLOAT3;0,0,0;False;1;FLOAT;1;False;2;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.FunctionNode;1303;144,-1808;Inherit;False;BUDUBlendSelectorWave;16;;769;0b8b087a6c852f24a8e176ec5ca5a377;0;2;17;FLOAT4;0,0,0,0;False;18;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.OneMinusNode;1369;272,-1424;Inherit;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.PowerNode;1673;-816,1936;Inherit;False;False;2;0;FLOAT3;0,0,0;False;1;FLOAT;1;False;1;FLOAT3;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1365;432,-1744;Inherit;False;2;2;0;FLOAT4;0,0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.OneMinusNode;1674;-656,2000;Inherit;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.ToggleSwitchNode;1368;592,-1808;Inherit;False;Property;_MidFlowMask;MidFlowMask;196;0;Create;True;0;0;0;False;0;False;0;True;2;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.StaticSwitch;1675;-496,1936;Inherit;False;Property;_FoamInvert;FoamInvert;189;0;Create;True;0;0;0;True;0;False;0;0;0;True;;Toggle;2;Key0;Key1;Create;True;True;All;9;1;FLOAT3;0,0,0;False;0;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;7;FLOAT3;0,0,0;False;8;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1676;-528,2080;Inherit;False;Property;_FoamContrast;Foam Contrast;182;0;Create;True;0;0;0;True;0;False;1;1;0;3;0;1;FLOAT;0
Node;AmplifyShaderEditor.SaturateNode;1304;816,-1808;Inherit;False;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.FunctionNode;1687;-240,1936;Inherit;False;BUDUContrast;-1;;1;bbef371528583124ab5d8e8ec0c6a0f1;0;2;1;COLOR;0,0,0,0;False;3;FLOAT;1;False;1;COLOR;0
Node;AmplifyShaderEditor.RangedFloatNode;1688;-336,1840;Inherit;False;Property;_FoamIntensity;Foam Intensity;206;0;Create;True;0;0;0;False;0;False;1;0;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.CommentaryNode;1464;-1920,1120;Inherit;False;2046.25;639.4923;Surface Wave Settings;21;1692;1466;1629;1631;1634;1632;1633;1433;1465;1392;1693;1696;1695;1283;1636;1635;1637;1667;1376;1638;1694;;1,1,1,1;0;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;536;-2528,752;Inherit;False;RF_FlowMap;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1281;976,-1808;Inherit;False;RF_MidWave;-1;True;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1689;-48,1888;Inherit;False;2;2;0;FLOAT;0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1690;112,1888;Inherit;False;RF_FoamTexture;-1;True;1;0;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.RangedFloatNode;1635;-1888,1376;Inherit;False;Property;_ShoreIntensity;ShoreIntensity;217;0;Create;True;0;0;0;True;0;False;1;0;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1636;-1888,1472;Inherit;False;Property;_MiddleWaveIntensity;MiddleWaveIntensity;215;0;Create;True;0;0;0;True;0;False;1;0;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1283;-1824,1568;Inherit;False;1281;RF_MidWave;1;0;OBJECT;;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;1376;-1792,1280;Inherit;False;536;RF_FlowMap;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1638;-1600,1504;Inherit;False;2;2;0;FLOAT;0;False;1;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;1667;-1664,1184;Inherit;False;1690;RF_FoamTexture;1;0;OBJECT;;False;1;COLOR;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1637;-1600,1312;Inherit;False;2;2;0;FLOAT3;0,0,0;False;1;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GetLocalVarNode;1695;-1664,1664;Inherit;False;1690;RF_FoamTexture;1;0;OBJECT;;False;1;COLOR;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1694;-1440,1248;Inherit;False;2;2;0;COLOR;0,0,0,0;False;1;FLOAT3;0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1696;-1440,1568;Inherit;False;2;2;0;FLOAT4;0,0,0,0;False;1;COLOR;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.ToggleSwitchNode;1693;-1280,1472;Inherit;False;Property;_MiddleFoamToggle;Middle Foam Toggle;209;0;Create;True;0;0;0;False;0;False;0;True;2;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.ToggleSwitchNode;1692;-1280,1280;Inherit;False;Property;_ShoreFoamToggle;Shore Foam Toggle;210;0;Create;True;0;0;0;False;0;False;0;True;2;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.CommentaryNode;1710;160,1120;Inherit;False;2087.741;552.34;Displacement Settings;18;1728;1726;1725;1724;1723;1722;1721;1720;1719;1730;1717;1718;1716;1715;1714;1712;1713;1731;;1,1,1,1;0;0
Node;AmplifyShaderEditor.SimpleAddOpNode;1392;-1024,1376;Inherit;False;2;2;0;COLOR;0,0,0,0;False;1;FLOAT4;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;1728;192,1424;Inherit;False;535;RF_FlowMask;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.SaturateNode;1465;-896,1376;Inherit;False;1;0;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.LinearToGammaNode;1731;416,1424;Inherit;False;0;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1713;544,1504;Inherit;False;Property;_EdgeWaveExponential;EdgeWaveExponential;236;0;Create;True;0;0;0;False;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.OneMinusNode;1712;640,1424;Inherit;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.LinearToGammaNode;1433;-736,1376;Inherit;False;3;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.PowerNode;1714;800,1408;Inherit;False;True;2;0;FLOAT3;0,0,0;False;1;FLOAT;2;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1715;736,1584;Inherit;False;Property;_EdgeWaveMultiplier;EdgeWaveMultiplier;234;0;Create;True;0;0;0;False;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1466;-96,1408;Inherit;False;RF_SurfaceWave;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.ScaleAndOffsetNode;1716;960,1408;Inherit;False;3;0;FLOAT3;0,0,0;False;1;FLOAT;1;False;2;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GetLocalVarNode;1718;912,1248;Inherit;False;1466;RF_SurfaceWave;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.CommentaryNode;318;1792,-2944;Inherit;False;1420.101;967.5837;Local Vars;36;164;163;181;668;665;664;663;666;661;195;317;315;313;192;137;211;210;209;207;206;205;316;314;312;139;808;809;817;1256;213;212;1279;1280;1497;1668;1732;;1,1,1,1;0;0
Node;AmplifyShaderEditor.SaturateNode;1717;1184,1328;Inherit;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.LinearToGammaNode;1730;1136,1248;Inherit;False;0;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.CommentaryNode;1434;-1920,-192;Inherit;False;1667.492;739.0012;Refraction Settings;19;1461;1440;1441;1442;1439;1448;1443;1437;1551;1445;1564;1449;1446;1447;1436;1467;1469;1468;1435;;0,0.4211543,1,1;0;0
Node;AmplifyShaderEditor.RangedFloatNode;314;2288,-2816;Inherit;False;Constant;_Zero1;[Zero];19;0;Create;True;0;0;0;False;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1719;1344,1248;Inherit;False;2;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1720;1312,1408;Inherit;False;Property;_WaveLength;WaveLength;233;0;Create;True;0;0;0;True;0;False;4;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1435;-1456,272;Inherit;False;Property;_Transparency;Transparency;33;0;Create;True;0;0;0;False;0;False;1;0.5;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1468;-1392,192;Inherit;False;1466;RF_SurfaceWave;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;315;2448,-2816;Inherit;False;RF_Zero;-1;True;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1721;1504,1248;Inherit;False;2;2;0;FLOAT3;0,0,0;False;1;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.NormalVertexDataNode;1722;1472,1488;Inherit;False;0;5;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1469;-1152,208;Inherit;False;2;2;0;FLOAT;0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GetLocalVarNode;1723;1632,1168;Inherit;False;315;RF_Zero;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1724;1664,1248;Inherit;False;2;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.CommentaryNode;1393;-1920,-1216;Inherit;False;3299.011;983.5927;Reflection Settings;26;1428;1423;1421;1427;1422;1420;1426;1412;1397;1396;1410;1424;1411;1405;1406;1407;1409;1408;1404;1398;1403;1402;1399;1401;1400;1394;;0,0.4211543,1,1;0;0
Node;AmplifyShaderEditor.ToggleSwitchNode;1467;-800,272;Inherit;False;Property;_TRSurfWaveToggle;TRSurfWaveToggle;216;0;Create;True;0;0;0;False;0;False;0;True;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.ToggleSwitchNode;1725;1808,1200;Inherit;False;Property;_Displacement;Displacement;238;0;Create;True;0;0;0;False;0;False;0;True;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.CommentaryNode;1176;-4128,-544;Inherit;False;1841.403;433.7965;Fog Settings;11;1187;1184;1183;1182;1188;1204;1179;1180;1181;1178;1177;;1,1,1,1;0;0
Node;AmplifyShaderEditor.CommentaryNode;1709;2368,-896;Inherit;False;772;705.3333;Other Settings;8;1703;1568;1704;1500;1501;1577;1705;1706;;0,0,0,1;0;0
Node;AmplifyShaderEditor.CommentaryNode;1702;2368,-1376;Inherit;False;804;450.6667;Final Emission;7;1586;1701;1624;1700;1450;1190;1628;;0,0,0,1;0;0
Node;AmplifyShaderEditor.CommentaryNode;1032;-1920,-2896;Inherit;False;2774.232;825.3325;Deform Noise;32;976;974;1381;977;978;980;979;959;1175;957;1174;1386;1385;1042;1043;958;919;1044;1045;835;834;827;828;831;829;832;830;1041;1040;787;786;1546;;0.7926196,0.4496855,1,1;0;0
Node;AmplifyShaderEditor.CommentaryNode;1394;-352,-800;Inherit;False;1137.022;527.7067;Water Reflect Ref;17;1416;1425;1419;1413;1414;1418;1417;1415;1395;10;9;8;7;6;5;4;3;;1,1,1,1;0;0
Node;AmplifyShaderEditor.CommentaryNode;1192;1984,-1936;Inherit;False;1187.333;532.6666;Fog Comp;11;1199;1197;1208;1185;1195;1198;1194;1196;1200;1193;1699;;0,0,0,1;0;0
Node;AmplifyShaderEditor.CommentaryNode;1211;-3456,-80;Inherit;False;674.4238;334.7356;Normal Light Direction;4;1216;1213;1219;1214;;0.4402515,0.4635113,1,1;0;0
Node;AmplifyShaderEditor.CommentaryNode;1212;-4128,-80;Inherit;False;647.7568;331.4022;Normal View Direction;4;1218;1217;1215;1220;;0.4402515,0.4635113,1,1;0;0
Node;AmplifyShaderEditor.CommentaryNode;1476;-224,-192;Inherit;False;2209.312;544.3563;Screen Space Bump Map Settings;21;1486;1485;1478;1479;1481;1487;1483;1489;1488;1480;1495;1494;1493;1492;1491;1484;1482;1477;1526;1527;1528;;0,0.4211543,1,1;0;0
Node;AmplifyShaderEditor.CommentaryNode;1504;-1920,576;Inherit;False;2662.893;503.9482;Normal Settings;23;1531;1475;1530;1520;1516;1230;1224;1223;1517;1519;1518;1496;1508;1507;1505;1514;1513;1511;1506;1512;1510;1566;1641;;0.4402515,0.4635113,1,1;0;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1436;-544,272;Inherit;False;RF_TransparentIntensity;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1726;2032,1200;Inherit;False;RF_Vertex Offset;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1188;-4080,-288;Inherit;False;Property;_FogDepthSize;Fog Depth Size;229;0;Create;True;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1177;-3856,-384;Inherit;False;Property;_FogDepthExponential;Fog Depth Exponential;292;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1178;-3824,-464;Inherit;False;Property;_FogDepthDistance;Fog Depth Distance;291;0;Create;True;0;0;0;True;0;False;5;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.TFHCRemapNode;1204;-3792,-288;Inherit;False;5;0;FLOAT;0;False;1;FLOAT;0;False;2;FLOAT;1;False;3;FLOAT;2;False;4;FLOAT;3;False;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;1179;-3600,-416;Inherit;False;BUDUDepthFade;263;;772;47987ecf53b4f2847a33a9193dc9d94e;0;3;18;FLOAT;1;False;19;FLOAT;1;False;26;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GammaToLinearNode;1181;-3344,-448;Inherit;False;3;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.LinearToGammaNode;1180;-3344,-336;Inherit;False;3;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.StaticSwitch;1182;-3120,-416;Inherit;False;Property;_FogDepthGradeType;FogDepthGradeType;52;0;Create;True;0;0;0;True;0;False;0;0;0;True;;KeywordEnum;3;Linear;Normal;Gamma;Create;True;True;All;9;1;FLOAT3;0,0,0;False;0;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;7;FLOAT3;0,0,0;False;8;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.OneMinusNode;1183;-2832,-416;Inherit;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.SaturateNode;1184;-2672,-416;Inherit;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1187;-2512,-416;Inherit;False;RF_FogDepth;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;316;2288,-2896;Inherit;False;Constant;_One1;[One];20;0;Create;True;0;0;0;False;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;317;2448,-2896;Inherit;False;RF_One;-1;True;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;787;-1888,-2384;Inherit;False;701;DBG_RF_NoiseOUT_B;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.SaturateNode;1193;2240,-1680;Inherit;False;1;0;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;1200;2176,-1600;Inherit;False;1187;RF_FogDepth;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.ColorNode;1196;2176,-1872;Inherit;False;Property;_FogColor;Fog Color;293;0;Create;True;0;0;0;True;0;False;0,0.5249081,0.6792453,1;0,0.5249081,0.6792453,1;True;True;0;6;COLOR;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4;FLOAT3;5
Node;AmplifyShaderEditor.LerpOp;1194;2432,-1744;Inherit;False;3;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;2;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1197;2944,-1744;Inherit;False;RF_Comp_Fog;-1;True;1;0;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;139;2032,-2240;Inherit;False;2;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;312;2288,-2736;Inherit;False;Constant;_Gray;[Gray];19;0;Create;True;0;0;0;False;0;False;0.5;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.ColorNode;205;1840,-2896;Inherit;False;Constant;_Red1;Red;24;0;Create;True;0;0;0;False;0;False;1,0,0,0;0,0,0,0;True;False;0;6;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4;FLOAT3;5
Node;AmplifyShaderEditor.ColorNode;206;1840,-2752;Inherit;False;Constant;_Green1;Green;24;0;Create;True;0;0;0;False;0;False;0,1,0,0;0,0,0,0;True;False;0;6;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4;FLOAT3;5
Node;AmplifyShaderEditor.ColorNode;207;1840,-2608;Inherit;False;Constant;_Blue;Blue;24;0;Create;True;0;0;0;False;0;False;0,0,1,0;0,0,0,0;True;False;0;6;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4;FLOAT3;5
Node;AmplifyShaderEditor.RegisterLocalVarNode;209;2064,-2896;Inherit;False;RF_Red;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;210;2064,-2752;Inherit;False;RF_Green;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;211;2064,-2608;Inherit;False;RF_Blue;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;137;2032,-2112;Inherit;False;2;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;192;2288,-2656;Inherit;False;Constant;_Ninety;Ninety;14;0;Create;True;0;0;0;False;0;False;90;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;313;2448,-2736;Inherit;False;RF_Gray;-1;True;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;195;2448,-2656;Inherit;False;RF_90;-1;True;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;666;2720,-2896;Inherit;False;Property;_CheckDef;CheckDef;248;2;[HideInInspector];[IntRange];Create;True;0;0;0;True;0;False;0;90;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.StaticSwitch;163;2192,-2240;Inherit;False;Property;_Keyword1;Keyword 1;0;0;Create;True;0;0;0;False;0;False;0;0;0;True;;Toggle;2;Key0;Key1;Reference;181;True;True;All;9;1;FLOAT3;0,0,0;False;0;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;7;FLOAT3;0,0,0;False;8;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.StaticSwitch;164;2192,-2112;Inherit;False;Property;_Keyword2;Keyword 1;0;0;Create;True;0;0;0;False;0;False;0;0;0;True;;Toggle;2;Key0;Key1;Reference;181;True;True;All;9;1;FLOAT3;0,0,0;False;0;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;7;FLOAT3;0,0,0;False;8;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.StaticSwitch;181;1872,-2384;Inherit;False;Property;_DebogOnOff;DebogOnOff;272;0;Create;True;0;0;0;False;1;HideInInspector;False;0;0;0;True;;Toggle;2;Key0;Key1;Create;True;True;All;9;1;FLOAT;0;False;0;FLOAT;0;False;2;FLOAT;0;False;3;FLOAT;0;False;4;FLOAT;0;False;5;FLOAT;0;False;6;FLOAT;0;False;7;FLOAT;0;False;8;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;664;2720,-2464;Inherit;False;Property;_fTxtFold;fTxtFold;262;2;[HideInInspector];[IntRange];Create;True;0;0;0;True;0;False;0;90;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;665;2720,-2384;Inherit;False;Property;_fMaskFold;fMaskFold;253;2;[HideInInspector];[IntRange];Create;True;0;0;0;True;0;False;0;90;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;668;2720,-2304;Inherit;False;Property;_dMaskFold;dMaskFold;250;2;[HideInInspector];[IntRange];Create;True;0;0;0;True;0;False;0;90;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;809;2704,-2144;Inherit;False;Property;_dfNoiseBFold;dfNoiseBFold;249;2;[HideInInspector];[IntRange];Create;True;0;0;0;True;0;False;0;90;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;808;2704,-2224;Inherit;False;Property;_dfNoiseAFold;dfNoiseAFold;251;2;[HideInInspector];[IntRange];Create;True;0;0;0;True;0;False;0;90;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;817;2704,-2064;Inherit;False;Property;_DeformFold;DeformFold;252;2;[HideInInspector];[IntRange];Create;True;0;0;0;True;0;False;0;90;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1220;-4096,-16;Inherit;False;1224;RF_NewNormals;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.ViewDirInputsCoordNode;1215;-4064,80;Inherit;False;World;True;0;4;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3
Node;AmplifyShaderEditor.DotProductOpNode;1217;-3872,16;Inherit;False;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1218;-3744,16;Float;False;NormalViewDirection;-1;True;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.WorldSpaceLightDirHlpNode;1214;-3424,64;Inherit;False;False;1;0;FLOAT;0;False;4;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3
Node;AmplifyShaderEditor.GetLocalVarNode;1219;-3392,-16;Inherit;False;1224;RF_NewNormals;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.DotProductOpNode;1213;-3168,16;Inherit;False;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1216;-3040,16;Float;False;NormalLightDirection;-1;True;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;661;2704,-2816;Inherit;False;Property;_CheckFlowMap;CheckFlowMap;261;2;[HideInInspector];[IntRange];Create;True;0;0;0;True;0;False;0;90;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;213;1840,-2240;Inherit;False;210;RF_Green;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GetLocalVarNode;212;1840,-2112;Inherit;False;209;RF_Red;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;663;2720,-2544;Inherit;False;Property;_fMapFold;fMapFold;256;2;[HideInInspector];[IntRange];Create;True;0;0;0;True;0;False;0;90;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1256;2704,-2736;Inherit;False;Property;_CheckMidWave;CheckMidWave;260;2;[HideInInspector];[IntRange];Create;True;0;0;0;True;0;False;0;90;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.StickyNoteNode;1395;-144,-736;Inherit;False;190.6665;148;New Note;;1,1,1,1;Reflection Map $Gloal olmak zorunda! Yoksa mirror buraya map atayamiyor.$$;0;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1447;-544,-80;Inherit;False;RF_Refraction;-1;True;1;0;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.RelayNode;1041;-1632,-2384;Inherit;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GammaToLinearNode;830;-1504,-2416;Inherit;False;3;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.LinearToGammaNode;832;-1504,-2320;Inherit;False;3;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;828;-1312,-2240;Inherit;False;Property;_DFBAmplitude;DFBAmplitude;183;0;Create;True;0;0;0;True;0;False;1;0;0;4;0;1;FLOAT;0
Node;AmplifyShaderEditor.StaticSwitch;835;-1280,-2384;Inherit;False;Property;_DFBGradeType;DFBGradeType;178;0;Create;True;0;0;0;True;0;False;0;0;0;True;;KeywordEnum;3;Linear;Normal;Gamma;Create;True;True;All;9;1;FLOAT3;0,0,0;False;0;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;7;FLOAT3;0,0,0;False;8;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1045;-1088,-2160;Inherit;False;Property;_DFBExp;DFBExp;173;0;Create;True;0;0;0;True;0;False;1;0;0;4;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1044;-1088,-2544;Inherit;False;Property;_DFAExp;DFAExp;172;0;Create;True;0;0;0;True;0;False;1;0;0;4;0;1;FLOAT;0
Node;AmplifyShaderEditor.ScaleAndOffsetNode;958;-1024,-2384;Inherit;False;3;0;FLOAT3;0,0,0;False;1;FLOAT;1;False;2;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.PowerNode;1043;-800,-2384;Inherit;False;False;2;0;FLOAT3;0,0,0;False;1;FLOAT;1;False;1;FLOAT3;0
Node;AmplifyShaderEditor.OneMinusNode;1386;-640,-2320;Inherit;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.StaticSwitch;1175;-464,-2384;Inherit;False;Property;_DfNoiseBInvert;DfNoiseBInvert;199;0;Create;True;0;0;0;True;0;False;0;0;0;True;;Toggle;2;Key0;Key1;Create;True;True;All;9;1;FLOAT3;0,0,0;False;0;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;7;FLOAT3;0,0,0;False;8;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;959;-464,-2272;Inherit;False;Property;_NoiseBContrast;Noise B Contrast;187;0;Create;True;0;0;0;True;0;False;1;1;0;3;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;980;-272,-2464;Inherit;False;Property;_NB_Intensity;NB_Intensity;200;0;Create;True;0;0;0;True;0;False;1;0;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;978;16,-2448;Inherit;False;2;2;0;FLOAT;0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.FunctionNode;1381;176,-2592;Inherit;False;BUDUBlendSelectorDeform;14;;775;2632734b11bbca645b6d5da61aac4d4e;0;2;17;FLOAT4;0,0,0,0;False;18;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;974;624,-2592;Inherit;False;RF_DeformNoise;-1;True;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.SaturateNode;976;464,-2592;Inherit;False;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.RangedFloatNode;1400;-1840,-848;Inherit;False;Property;_CubeMapRotate;Cube Map Rotate;51;0;Create;True;0;0;0;False;0;False;0;0;0;360;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1401;-1680,-688;Inherit;False;Property;_CMYPos;CM Y Pos;34;0;Create;True;0;0;0;False;0;False;0;0;-5;5;0;1;FLOAT;0
Node;AmplifyShaderEditor.RadiansOpNode;1399;-1552,-848;Inherit;False;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1402;-1680,-608;Inherit;False;Property;_CMZPos;CM Z Pos;50;0;Create;True;0;0;0;False;0;False;0;0;-2;2;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1403;-1680,-768;Inherit;False;Property;_CMXPos;CM X Pos;49;0;Create;True;0;0;0;False;0;False;0;0;-2;2;0;1;FLOAT;0
Node;AmplifyShaderEditor.WorldReflectionVector;1398;-1632,-1088;Inherit;False;True;1;0;FLOAT3;0,0,0;False;4;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3
Node;AmplifyShaderEditor.NegateNode;1404;-1392,-688;Inherit;False;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;1408;-1376,-960;Inherit;False;BUDUComputeRotationY;-1;;776;735e1ea1387616c47955e6ec5703988c;0;2;4;FLOAT3;0,0,0;False;2;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.DynamicAppendNode;1409;-1248,-736;Inherit;False;FLOAT3;4;0;FLOAT;0;False;1;FLOAT;0;False;2;FLOAT;0;False;3;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.SimpleAddOpNode;1407;-1088,-960;Inherit;False;2;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.ScreenPosInputsNode;1419;-304,-560;Float;False;0;False;0;5;FLOAT4;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4
Node;AmplifyShaderEditor.GetLocalVarNode;1425;-336,-368;Inherit;False;1230;RF_NewObjectNormal;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.ColorNode;1405;-800,-768;Inherit;False;Property;_ReflectColor;Reflect Color;69;1;[HDR];Create;True;0;0;0;False;0;False;1,1,1,1;1,1,1,1;True;True;0;6;COLOR;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4;FLOAT3;5
Node;AmplifyShaderEditor.RangedFloatNode;1411;-800,-528;Inherit;False;Property;_ReflectionMultiplier;Reflection Multiplier;281;0;Create;True;0;0;0;False;0;False;1;1;1;10;0;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1424;-704,-448;Inherit;False;317;RF_One;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleAddOpNode;1413;-80,-560;Inherit;False;2;2;0;FLOAT4;0,0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.SimpleAddOpNode;1410;-512,-528;Inherit;False;2;2;0;FLOAT;0;False;1;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1396;-576,-960;Inherit;True;2;2;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.RangedFloatNode;1397;-656,-1040;Inherit;False;Property;_ReflectionStrength;Reflection Strength;86;0;Create;False;0;0;0;False;0;False;1;1;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.ColorNode;1417;112,-752;Inherit;False;Property;_MirrorRefColor;MirrorRefColor;297;0;Create;True;0;0;0;False;0;False;1,1,1,1;1,1,1,1;True;True;0;6;COLOR;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4;FLOAT3;5
Node;AmplifyShaderEditor.RangedFloatNode;1414;48,-352;Inherit;False;Property;_MirrorRefIntensity;MirrorRefIntensity;295;0;Create;True;0;0;0;False;0;False;1;1;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1412;-352,-1040;Inherit;False;3;3;0;FLOAT;0;False;1;COLOR;0,0,0,0;False;2;FLOAT;0;False;1;COLOR;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1415;400,-480;Inherit;False;3;3;0;COLOR;0,0,0,0;False;1;FLOAT;0;False;2;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;1426;-160,-928;Inherit;False;315;RF_Zero;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.ToggleSwitchNode;1416;560,-560;Inherit;False;Property;_MirrorReflect;MirrorReflect;294;0;Create;True;0;0;0;False;0;False;0;True;2;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.ToggleSwitchNode;1420;192,-1056;Inherit;False;Property;_CMReflect;CMReflect;298;0;Create;True;0;0;0;False;0;False;0;True;2;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.SimpleAddOpNode;1422;800,-1056;Inherit;False;2;2;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;1427;736,-1152;Inherit;False;315;RF_Zero;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.ToggleSwitchNode;1421;928,-1056;Inherit;False;Property;_Reflect;Reflect;109;0;Create;True;0;0;0;False;0;False;0;True;2;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1423;1152,-1056;Inherit;False;RF_Reflect;-1;True;1;0;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.RangedFloatNode;1280;2896,-2464;Inherit;False;Property;_wBFold;wBFold;254;2;[HideInInspector];[IntRange];Create;True;0;0;0;True;0;False;0;90;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1497;2896,-2384;Inherit;False;Property;_SSTxtInfo;SSTxtInfo;255;2;[HideInInspector];[IntRange];Create;True;0;0;0;True;0;False;0;90;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1482;672,-48;Inherit;False;2;2;0;FLOAT2;0,0;False;1;FLOAT2;0,0;False;1;FLOAT2;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1484;1280,-48;Inherit;False;2;2;0;FLOAT4;0,0,0,0;False;1;FLOAT;0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.ComponentMaskNode;1491;720,64;Inherit;False;False;False;True;False;1;0;FLOAT4;0,0,0,0;False;1;FLOAT;0
Node;AmplifyShaderEditor.ComponentMaskNode;1492;720,144;Inherit;False;False;False;False;True;1;0;FLOAT4;0,0,0,0;False;1;FLOAT;0
Node;AmplifyShaderEditor.BreakToComponentsNode;1493;832,-48;Inherit;False;FLOAT2;1;0;FLOAT2;0,0;False;16;FLOAT;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4;FLOAT;5;FLOAT;6;FLOAT;7;FLOAT;8;FLOAT;9;FLOAT;10;FLOAT;11;FLOAT;12;FLOAT;13;FLOAT;14;FLOAT;15
Node;AmplifyShaderEditor.DynamicAppendNode;1494;960,-48;Inherit;False;FLOAT4;4;0;FLOAT;0;False;1;FLOAT;0;False;2;FLOAT;0;False;3;FLOAT;0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.SimpleDivideOpNode;1495;1120,-48;Inherit;False;2;0;FLOAT4;0,0,0,0;False;1;FLOAT;0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.ComponentMaskNode;1480;464,32;Inherit;False;True;True;False;False;1;0;FLOAT4;0,0,0,0;False;1;FLOAT2;0
Node;AmplifyShaderEditor.DynamicAppendNode;1488;528,-96;Inherit;False;FLOAT2;4;0;FLOAT;0;False;1;FLOAT;0;False;2;FLOAT;0;False;3;FLOAT;0;False;1;FLOAT2;0
Node;AmplifyShaderEditor.RangedFloatNode;1483;1120,64;Inherit;False;Property;_SSSize;SS Size;87;0;Create;True;0;0;0;True;0;False;10;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1487;368,-128;Inherit;False;Property;_SSTileX;SS Tile X;124;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1481;368,-48;Inherit;False;Property;_SSTileY;SS Tile Y;133;0;Create;True;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1486;1728,-16;Inherit;False;RF_BumpForSmooth;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.SamplerNode;1485;1440,-16;Inherit;True;Property;_BluricRefractionPattern;Bluric Refraction Pattern;84;1;[NoScaleOffset];Create;True;0;0;0;False;0;False;-1;None;None;True;0;False;white;Auto;True;Object;-1;Auto;Texture2D;8;0;SAMPLER2D;;False;1;FLOAT2;0,0;False;2;FLOAT;0;False;3;FLOAT2;0,0;False;4;FLOAT2;0,0;False;5;FLOAT;1;False;6;FLOAT;0;False;7;SAMPLERSTATE;;False;6;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4;FLOAT3;5
Node;AmplifyShaderEditor.ComputeScreenPosHlpNode;1478;192,64;Inherit;False;False;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.UnityObjToClipPosHlpNode;1477;-16,64;Inherit;False;1;0;FLOAT3;0,0,0;False;5;FLOAT4;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4
Node;AmplifyShaderEditor.RangedFloatNode;1489;960,160;Inherit;False;Property;_PatternHeight;Pattern Height;106;0;Create;True;0;0;0;True;0;False;0.1;0;-1;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1526;960,256;Inherit;False;Property;_PatternMultiplier;Pattern Multiplier;107;0;Create;True;0;0;0;True;0;False;1;0;1;10;0;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1527;1440,208;Inherit;False;2;2;0;FLOAT;0;False;1;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.TFHCRemapNode;1528;1248,160;Inherit;False;5;0;FLOAT;0;False;1;FLOAT;-1;False;2;FLOAT;1;False;3;FLOAT;-0.1;False;4;FLOAT;0.1;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1428;-1888,-1088;Inherit;False;1230;RF_NewObjectNormal;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.FunctionNode;1547;-176,-2384;Inherit;False;BUDUContrast;-1;;778;bbef371528583124ab5d8e8ec0c6a0f1;0;2;1;COLOR;0,0,0,0;False;3;FLOAT;1;False;1;COLOR;0
Node;AmplifyShaderEditor.PosVertexDataNode;1479;-192,64;Inherit;False;1;0;5;FLOAT4;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4
Node;AmplifyShaderEditor.ToggleSwitchNode;1446;-800,-80;Inherit;False;Property;_RefractionToggle;RefractionToggle;108;0;Create;True;0;0;0;False;0;False;0;True;2;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;1449;-992,-128;Inherit;False;315;RF_Zero;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1496;-480,896;Inherit;False;1486;RF_BumpForSmooth;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.SimpleAddOpNode;1519;-128,912;Inherit;False;2;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.WorldNormalVector;1223;320,736;Inherit;False;True;1;0;FLOAT3;0,0,0;False;4;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3
Node;AmplifyShaderEditor.RegisterLocalVarNode;1224;512,736;Float;False;RF_NewNormals;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1230;480,896;Inherit;False;RF_NewObjectNormal;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.ToggleSwitchNode;1516;-448,736;Inherit;False;Property;_NormalToggle;NormalToggle;32;0;Create;True;0;0;0;False;0;False;1;True;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.ToggleSwitchNode;1520;64,736;Inherit;False;Property;_SSBluricTransparent;SS Bluric Transparent;137;0;Create;True;0;0;0;False;0;False;0;True;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.SimpleAddOpNode;1564;-1632,16;Inherit;False;2;2;0;FLOAT4;0,0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.ColorNode;1445;-1392,-144;Inherit;False;Property;_RefractColor;Refract Color;85;0;Create;True;0;0;0;True;0;False;0,0,0,0;0,0,0,0;True;False;0;6;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4;FLOAT3;5
Node;AmplifyShaderEditor.RangedFloatNode;1551;-1600,128;Inherit;False;Constant;_ColorNorm;ColorNorm;176;0;Create;True;0;0;0;False;0;False;0.6;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.SaturateNode;1437;-1520,16;Inherit;False;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.ScreenColorNode;1443;-1360,16;Inherit;False;Global;_GrabScreen0;Grab Screen 0;11;0;Create;True;0;0;0;False;0;False;Object;-1;False;False;False;False;2;0;FLOAT2;0,0;False;1;FLOAT;0;False;5;COLOR;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4
Node;AmplifyShaderEditor.SimpleAddOpNode;1506;-1440,784;Inherit;False;2;2;0;FLOAT3;0,0,0;False;1;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1512;-1600,672;Inherit;False;2;2;0;FLOAT3;0,0,0;False;1;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1514;-1600,880;Inherit;False;2;2;0;FLOAT;0;False;1;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.SaturateNode;1507;-1312,784;Inherit;False;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.PowerNode;1530;-928,784;Inherit;False;False;2;0;FLOAT3;0,0,0;False;1;FLOAT;1;False;1;FLOAT3;0
Node;AmplifyShaderEditor.TFHCRemapNode;1566;-1152,912;Inherit;False;5;0;FLOAT;0;False;1;FLOAT;0;False;2;FLOAT;2;False;3;FLOAT;0.01;False;4;FLOAT;2;False;1;FLOAT;0
Node;AmplifyShaderEditor.LinearToGammaNode;1508;-1152,784;Inherit;False;3;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.SamplerNode;1418;48,-544;Inherit;True;Global;_ReflectionMap;_ReflectionMap;296;0;Create;True;0;0;0;False;0;False;-1;None;None;True;0;False;white;Auto;False;Object;-1;Auto;Texture2D;8;0;SAMPLER2D;;False;1;FLOAT2;0,0;False;2;FLOAT;0;False;3;FLOAT2;0,0;False;4;FLOAT2;0,0;False;5;FLOAT;1;False;6;FLOAT;0;False;7;SAMPLERSTATE;;False;6;COLOR;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4;FLOAT3;5
Node;AmplifyShaderEditor.SamplerNode;1406;-864,-960;Inherit;True;Property;_ReflectMap;Reflect Map;68;1;[NoScaleOffset];Create;True;0;0;0;False;0;False;-1;None;None;True;0;False;white;LockedToCube;False;Object;-1;Auto;Cube;8;0;SAMPLERCUBE;;False;1;FLOAT3;0,0,0;False;2;FLOAT;0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT;1;False;6;FLOAT;0;False;7;SAMPLERSTATE;;False;6;COLOR;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4;FLOAT3;5
Node;AmplifyShaderEditor.BlendNormalsNode;1518;-224,800;Inherit;False;1;3;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1475;-976,976;Inherit;False;Property;_NormalIntensity;Normal Intensity;203;0;Create;True;0;0;0;True;0;False;1;0;-10;10;0;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1448;-1888,128;Inherit;False;1230;RF_NewObjectNormal;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GrabScreenPosition;1439;-1888,-48;Inherit;False;0;0;5;FLOAT4;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1442;-976,16;Inherit;False;3;3;0;FLOAT3;0,0,0;False;1;COLOR;0,0,0,0;False;2;FLOAT;0;False;1;COLOR;0
Node;AmplifyShaderEditor.RangedFloatNode;1441;-1632,368;Inherit;False;Property;_ScreenContrast;ScreenContrast;67;0;Create;True;0;0;0;True;0;False;0.6;0;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.TFHCRemapNode;1440;-1360,368;Inherit;False;5;0;FLOAT;0;False;1;FLOAT;0;False;2;FLOAT;1;False;3;FLOAT;0.3;False;4;FLOAT;1.5;False;1;FLOAT;0
Node;AmplifyShaderEditor.PowerNode;1461;-1168,16;Inherit;False;True;2;0;COLOR;0,0,0,0;False;1;FLOAT;1;False;1;COLOR;0
Node;AmplifyShaderEditor.FunctionNode;1517;-704,688;Inherit;False;Normal Reconstruct Z;-1;;780;63ba85b764ae0c84ab3d698b86364ae9;0;1;1;FLOAT2;0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GetLocalVarNode;1510;-1792,640;Inherit;False;536;RF_FlowMap;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GetLocalVarNode;1505;-1824,960;Inherit;False;1281;RF_MidWave;1;0;OBJECT;;False;1;FLOAT4;0
Node;AmplifyShaderEditor.RangedFloatNode;1279;2896,-2544;Inherit;False;Property;_wAFold;wAFold;257;2;[HideInInspector];[IntRange];Create;True;0;0;0;True;0;False;0;90;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;786;-1888,-2768;Inherit;False;674;DBG_RF_NoiseOUT_A;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RelayNode;1040;-1632,-2768;Inherit;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;827;-1312,-2624;Inherit;False;Property;_DFAAmplitude;DFAAmplitude;168;0;Create;True;0;0;0;True;0;False;1;0;0;4;0;1;FLOAT;0
Node;AmplifyShaderEditor.ScaleAndOffsetNode;919;-1024,-2768;Inherit;False;3;0;FLOAT3;0,0,0;False;1;FLOAT;1;False;2;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.PowerNode;1042;-800,-2768;Inherit;False;False;2;0;FLOAT3;0,0,0;False;1;FLOAT;1;False;1;FLOAT3;0
Node;AmplifyShaderEditor.OneMinusNode;1385;-640,-2704;Inherit;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.StaticSwitch;1174;-464,-2768;Inherit;False;Property;_DfNoiseAInvert;DfNoiseAInvert;188;0;Create;True;0;0;0;True;0;False;0;0;0;True;;Toggle;2;Key0;Key1;Create;True;True;All;9;1;FLOAT3;0,0,0;False;0;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;7;FLOAT3;0,0,0;False;8;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;957;-464,-2656;Inherit;False;Property;_NoiseAContrast;Noise A Contrast;181;0;Create;True;0;0;0;True;0;False;1;1;0;3;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;979;-272,-2848;Inherit;False;Property;_NA_Intensity;NA_Intensity;186;0;Create;True;0;0;0;True;0;False;1;0;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;977;16,-2816;Inherit;False;2;2;0;FLOAT;0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.FunctionNode;1546;-176,-2768;Inherit;False;BUDUContrast;-1;;777;bbef371528583124ab5d8e8ec0c6a0f1;0;2;1;COLOR;0,0,0,0;False;3;FLOAT;1;False;1;COLOR;0
Node;AmplifyShaderEditor.GammaToLinearNode;829;-1504,-2800;Inherit;False;3;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.LinearToGammaNode;831;-1504,-2704;Inherit;False;3;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.StaticSwitch;834;-1280,-2768;Inherit;False;Property;_DFAGradeType;DFAGradeType;176;0;Create;True;0;0;0;True;0;False;0;0;0;True;;KeywordEnum;3;Linear;Normal;Gamma;Create;True;True;All;9;1;FLOAT3;0,0,0;False;0;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT3;0,0,0;False;6;FLOAT3;0,0,0;False;7;FLOAT3;0,0,0;False;8;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1633;-800,1280;Inherit;False;Property;_SurfaceIntensity;SurfaceIntensity;214;0;Create;True;0;0;0;True;0;False;1;0;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1632;-512,1200;Inherit;False;315;RF_Zero;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1634;-480,1312;Inherit;False;2;2;0;FLOAT;0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.ToggleSwitchNode;1631;-320,1312;Inherit;False;Property;_SurfaceToggle;SurfaceToggle;213;0;Create;True;0;0;0;False;0;False;0;True;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1629;-96,1312;Inherit;False;RF_FinalSurface;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.FunctionNode;1641;-736,784;Inherit;False;Normal From Height;-1;;1;1942fe2c5f1a1f94881a33d532e4afeb;0;2;20;FLOAT;0;False;110;FLOAT;1;False;2;FLOAT3;40;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1513;-1888,864;Inherit;False;Property;_MiddleWaveBumpIntensity;Middle Wave Bump Intensity;212;0;Create;True;0;0;0;True;0;False;0.3;1;-1;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1511;-1888,736;Inherit;False;Property;_ShoreBumpIntensity;Shore Bump Intensity;205;0;Create;True;0;0;0;True;0;False;0.3;1;-1;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1531;-1440,912;Inherit;False;Property;_NormalGradePower;Normal Grade Power;204;0;Create;True;0;0;0;True;0;False;0.5;0;0;2;0;1;FLOAT;0
Node;AmplifyShaderEditor.ToggleSwitchNode;1208;2720,-1744;Inherit;False;Property;_FogToggle;FogToggle;227;0;Create;True;0;0;0;False;0;False;0;True;2;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;1185;2528,-1872;Inherit;False;315;RF_Zero;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleAddOpNode;1195;2592,-1744;Inherit;False;2;2;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.SimpleAddOpNode;1699;2592,-1520;Inherit;False;2;2;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;1199;2016,-1680;Inherit;False;1447;RF_Refraction;1;0;OBJECT;;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;1198;2400,-1600;Inherit;False;1423;RF_Reflect;1;0;OBJECT;;False;1;COLOR;0
Node;AmplifyShaderEditor.LerpOp;1586;2656,-1264;Inherit;False;3;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;2;FLOAT;0;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;1701;2624,-1040;Inherit;False;1423;RF_Reflect;1;0;OBJECT;;False;1;COLOR;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1624;2944,-1264;Inherit;False;RF_FinalEmission;-1;True;1;0;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.SimpleAddOpNode;1700;2816,-1264;Inherit;False;2;2;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;1450;2432,-1328;Inherit;False;1447;RF_Refraction;1;0;OBJECT;;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;1190;2432,-1232;Inherit;False;1197;RF_Comp_Fog;1;0;OBJECT;;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;1628;2464,-1136;Inherit;False;317;RF_One;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.ColorNode;1703;2480,-848;Inherit;False;Property;_SpecularColor;Specular Color;211;0;Create;True;0;0;0;False;0;False;0,0,0,0;0,0,0,0;True;False;0;6;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4;FLOAT3;5
Node;AmplifyShaderEditor.RangedFloatNode;1568;2416,-688;Inherit;False;Property;_Specular;Specular;208;0;Create;True;0;0;0;True;0;False;1;0;0;10;0;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1704;2704,-784;Inherit;False;2;2;0;FLOAT3;0,0,0;False;1;FLOAT;0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;1500;2704,-464;Inherit;False;2;2;0;FLOAT;0;False;1;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.RangedFloatNode;1501;2416,-496;Inherit;False;Property;_VT_Intensity;VT_Intensity;220;0;Create;True;0;0;0;True;0;False;1;0;0.01;10;0;1;FLOAT;0
Node;AmplifyShaderEditor.PosVertexDataNode;1577;2512,-400;Inherit;False;1;0;5;FLOAT4;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4
Node;AmplifyShaderEditor.RegisterLocalVarNode;1705;2864,-784;Inherit;False;RF_Specular;-1;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1706;2864,-464;Inherit;False;RF_VertexTangent;-1;True;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.RangedFloatNode;1668;2896,-2304;Inherit;False;Property;_foamFold;foamFold;258;2;[HideInInspector];[IntRange];Create;True;0;0;0;True;0;False;0;90;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1732;2896,-2224;Inherit;False;Property;_otherFold;otherFold;259;2;[HideInInspector];[IntRange];Create;True;0;0;0;True;0;False;0;90;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1471;2848,560;Inherit;False;1436;RF_TransparentIntensity;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GetLocalVarNode;1625;2912,320;Inherit;False;1624;RF_FinalEmission;1;0;OBJECT;;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;1451;2880,240;Inherit;False;1230;RF_NewObjectNormal;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GetLocalVarNode;1630;2912,160;Inherit;False;1629;RF_FinalSurface;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.RangedFloatNode;1569;2848,480;Inherit;False;Property;_Smoothness;Smoothness;207;0;Create;True;0;0;0;True;0;False;0.5;0;0;1;0;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1707;2944,400;Inherit;False;1705;RF_Specular;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.GetLocalVarNode;1708;2880,720;Inherit;False;1706;RF_VertexTangent;1;0;OBJECT;;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;1727;2912,640;Inherit;False;1726;RF_Vertex Offset;1;0;OBJECT;;False;1;FLOAT3;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;3;48,-272;Float;False;False;-1;2;UnityEditor.ShaderGraphLitGUI;0;19;New Amplify Shader;dcf3e680117c48a4cb69c2c58c49ec28;True;ShadowCaster;0;2;ShadowCaster;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;False;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;4;RenderPipeline=UniversalPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;UniversalMaterialType=Lit;True;5;True;12;all;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;True;False;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;1;LightMode=ShadowCaster;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4;48,-272;Float;False;False;-1;2;UnityEditor.ShaderGraphLitGUI;0;19;New Amplify Shader;dcf3e680117c48a4cb69c2c58c49ec28;True;DepthOnly;0;3;DepthOnly;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;False;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;4;RenderPipeline=UniversalPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;UniversalMaterialType=Lit;True;5;True;12;all;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;True;True;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;False;False;True;1;LightMode=DepthOnly;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;5;48,-272;Float;False;False;-1;2;UnityEditor.ShaderGraphLitGUI;0;19;New Amplify Shader;dcf3e680117c48a4cb69c2c58c49ec28;True;Meta;0;4;Meta;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;False;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;4;RenderPipeline=UniversalPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;UniversalMaterialType=Lit;True;5;True;12;all;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Meta;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;6;48,-272;Float;False;False;-1;2;UnityEditor.ShaderGraphLitGUI;0;19;New Amplify Shader;dcf3e680117c48a4cb69c2c58c49ec28;True;Universal2D;0;5;Universal2D;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;False;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;4;RenderPipeline=UniversalPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;UniversalMaterialType=Lit;True;5;True;12;all;0;False;True;1;5;False;;10;False;;1;1;False;;10;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;False;False;True;2;False;;True;3;False;;True;True;0;False;;0;False;;True;1;LightMode=Universal2D;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;7;48,-272;Float;False;False;-1;2;UnityEditor.ShaderGraphLitGUI;0;19;New Amplify Shader;dcf3e680117c48a4cb69c2c58c49ec28;True;DepthNormals;0;6;DepthNormals;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;False;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;4;RenderPipeline=UniversalPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;UniversalMaterialType=Lit;True;5;True;12;all;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;1;LightMode=DepthNormals;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;8;48,-272;Float;False;False;-1;2;UnityEditor.ShaderGraphLitGUI;0;19;New Amplify Shader;dcf3e680117c48a4cb69c2c58c49ec28;True;GBuffer;0;7;GBuffer;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;False;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;4;RenderPipeline=UniversalPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;UniversalMaterialType=Lit;True;5;True;12;all;0;False;True;1;5;False;;10;False;;1;1;False;;10;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;2;False;;True;3;False;;True;True;0;False;;0;False;;True;1;LightMode=UniversalGBuffer;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;9;48,-272;Float;False;False;-1;2;UnityEditor.ShaderGraphLitGUI;0;19;New Amplify Shader;dcf3e680117c48a4cb69c2c58c49ec28;True;SceneSelectionPass;0;8;SceneSelectionPass;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;False;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;4;RenderPipeline=UniversalPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;UniversalMaterialType=Lit;True;5;True;12;all;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=SceneSelectionPass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;10;48,-272;Float;False;False;-1;2;UnityEditor.ShaderGraphLitGUI;0;19;New Amplify Shader;dcf3e680117c48a4cb69c2c58c49ec28;True;ScenePickingPass;0;9;ScenePickingPass;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;False;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;4;RenderPipeline=UniversalPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;UniversalMaterialType=Lit;True;5;True;12;all;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Picking;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1;-4240,-672;Float;False;False;-1;2;UnityEditor.ShaderGraphLitGUI;0;19;New Amplify Shader;dcf3e680117c48a4cb69c2c58c49ec28;True;ExtraPrePass;0;0;ExtraPrePass;5;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;False;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;4;RenderPipeline=UniversalPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;UniversalMaterialType=Lit;True;5;True;12;all;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;0;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2;3232,384;Float;False;True;-1;2;BWaterSurfaceEditor;0;19;BUDU Shaders/BWaterSurface;dcf3e680117c48a4cb69c2c58c49ec28;True;Forward;0;1;Forward;21;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;False;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;2;False;;True;3;False;;True;True;0;False;;0;False;;True;4;RenderPipeline=UniversalPipeline;RenderType=Transparent=RenderType;Queue=Transparent=Queue=0;UniversalMaterialType=SimpleLit;True;5;True;12;all;0;True;True;1;5;False;;10;False;;1;1;False;;10;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;2;False;;True;3;False;;True;True;0;False;;0;False;;True;1;LightMode=UniversalForward;False;False;0;;0;0;Standard;42;Lighting Model;1;638579274415500117;Workflow;0;0;Surface;1;638579274480563901;  Refraction Model;0;0;  Blend;0;0;Two Sided;1;0;Fragment Normal Space,InvertActionOnDeselection;0;638583299289516926;Forward Only;0;0;Transmission;0;0;  Transmission Shadow;0.5,True,_TransmissionShadow;0;Translucency;0;0;  Translucency Strength;1,True,_TRStrength;0;  Normal Distortion;0.5,True,_TRNormDist;0;  Scattering;2,True,_TRScattering;0;  Direct;0.9,True,_TRDirec;0;  Ambient;0.1,True,_TRAmbient;0;  Shadow;0.5,True,_TRShadow;0;Cast Shadows;1;0;  Use Shadow Threshold;0;0;Receive Shadows;1;638583260053342644;Receive SSAO;1;0;GPU Instancing;1;0;LOD CrossFade;1;0;Built-in Fog;1;0;_FinalColorxAlpha;0;0;Meta Pass;1;0;Override Baked GI;0;0;Extra Pre Pass;0;0;Tessellation;0;0;  Phong;0;0;  Strength;0.5,False,;0;  Type;0;0;  Tess;16,False,;0;  Min;10,False,;0;  Max;25,False,;0;  Edge Length;16,False,;0;  Max Displacement;25,False,;0;Write Depth;0;0;  Early Z;0;0;Vertex Position,InvertActionOnDeselection;1;0;Debug Display;0;638583784139751390;Clear Coat;0;0;0;10;False;True;True;True;True;True;True;True;True;True;False;;False;0
WireConnection;1342;62;792;0
WireConnection;1342;34;703;0
WireConnection;1342;35;704;0
WireConnection;1342;36;705;0
WireConnection;1342;21;706;0
WireConnection;1342;22;707;0
WireConnection;1342;23;708;0
WireConnection;1342;24;709;0
WireConnection;1342;25;714;0
WireConnection;1342;26;713;0
WireConnection;1342;27;711;0
WireConnection;1342;28;710;0
WireConnection;1342;29;712;0
WireConnection;1342;30;716;0
WireConnection;1342;31;715;0
WireConnection;1380;62;798;0
WireConnection;1380;34;678;0
WireConnection;1380;35;679;0
WireConnection;1380;36;680;0
WireConnection;1380;21;681;0
WireConnection;1380;22;682;0
WireConnection;1380;23;683;0
WireConnection;1380;24;685;0
WireConnection;1380;25;686;0
WireConnection;1380;26;687;0
WireConnection;1380;27;688;0
WireConnection;1380;28;689;0
WireConnection;1380;29;690;0
WireConnection;1380;30;692;0
WireConnection;1380;31;691;0
WireConnection;674;0;1380;0
WireConnection;701;0;1342;0
WireConnection;1362;0;1349;0
WireConnection;1362;1;1361;0
WireConnection;1363;0;1353;0
WireConnection;1363;1;1364;0
WireConnection;1350;0;1351;0
WireConnection;1350;1;1362;0
WireConnection;1352;0;1354;0
WireConnection;1352;1;1363;0
WireConnection;1355;62;1260;0
WireConnection;1355;66;1352;0
WireConnection;1355;34;1261;0
WireConnection;1355;35;1262;0
WireConnection;1355;36;1263;0
WireConnection;1355;21;1264;0
WireConnection;1355;22;1265;0
WireConnection;1355;23;1266;0
WireConnection;1355;24;1267;0
WireConnection;1355;25;1268;0
WireConnection;1355;26;1269;0
WireConnection;1355;27;1270;0
WireConnection;1355;28;1271;0
WireConnection;1355;29;1272;0
WireConnection;1355;30;1273;0
WireConnection;1355;31;1274;0
WireConnection;1686;62;1251;0
WireConnection;1686;69;1350;0
WireConnection;1686;34;1253;0
WireConnection;1686;35;1250;0
WireConnection;1686;36;1249;0
WireConnection;1686;21;1248;0
WireConnection;1686;22;1247;0
WireConnection;1686;23;1246;0
WireConnection;1686;24;1245;0
WireConnection;1686;25;1244;0
WireConnection;1686;26;1243;0
WireConnection;1686;27;1242;0
WireConnection;1686;28;1254;0
WireConnection;1686;29;1241;0
WireConnection;1686;30;1240;0
WireConnection;1686;31;1239;0
WireConnection;1238;0;1686;0
WireConnection;1275;0;1355;0
WireConnection;1307;0;1255;0
WireConnection;1308;0;1277;0
WireConnection;1646;0;1644;0
WireConnection;1646;1;1643;0
WireConnection;1309;0;1307;0
WireConnection;1310;0;1307;0
WireConnection;1312;0;1308;0
WireConnection;1313;0;1308;0
WireConnection;1662;0;1645;0
WireConnection;1662;1;1646;0
WireConnection;1311;1;1309;0
WireConnection;1311;0;1307;0
WireConnection;1311;2;1310;0
WireConnection;1314;1;1312;0
WireConnection;1314;0;1308;0
WireConnection;1314;2;1313;0
WireConnection;1685;62;1661;0
WireConnection;1685;69;1662;0
WireConnection;1685;34;1647;0
WireConnection;1685;35;1648;0
WireConnection;1685;36;1649;0
WireConnection;1685;21;1650;0
WireConnection;1685;22;1651;0
WireConnection;1685;23;1652;0
WireConnection;1685;24;1653;0
WireConnection;1685;25;1654;0
WireConnection;1685;26;1655;0
WireConnection;1685;27;1656;0
WireConnection;1685;28;1657;0
WireConnection;1685;29;1658;0
WireConnection;1685;30;1659;0
WireConnection;1685;31;1660;0
WireConnection;660;0;625;0
WireConnection;1328;0;1314;0
WireConnection;1328;1;1326;0
WireConnection;1317;0;1311;0
WireConnection;1317;1;1315;0
WireConnection;1664;0;1685;0
WireConnection;659;18;624;0
WireConnection;659;19;623;0
WireConnection;659;26;660;0
WireConnection;1318;0;1317;0
WireConnection;1318;1;1316;0
WireConnection;1329;0;1328;0
WireConnection;1329;1;1327;0
WireConnection;1387;0;1318;0
WireConnection;1388;0;1329;0
WireConnection;1543;100;659;0
WireConnection;1543;70;545;0
WireConnection;1543;84;552;0
WireConnection;1543;72;544;0
WireConnection;1543;124;1374;0
WireConnection;1543;66;547;0
WireConnection;1543;118;1126;0
WireConnection;1543;115;1119;0
WireConnection;1543;81;551;0
WireConnection;1543;93;562;0
WireConnection;1543;58;550;0
WireConnection;1543;56;549;0
WireConnection;1543;97;570;0
WireConnection;1543;65;546;0
WireConnection;1543;54;537;0
WireConnection;1543;55;538;0
WireConnection;1543;57;539;0
WireConnection;1543;60;540;0
WireConnection;1543;59;541;0
WireConnection;1543;61;542;0
WireConnection;1670;0;1669;0
WireConnection;535;0;1543;67
WireConnection;1332;1;1329;0
WireConnection;1332;0;1388;0
WireConnection;1321;1;1318;0
WireConnection;1321;0;1387;0
WireConnection;1681;0;1670;0
WireConnection;1680;0;1670;0
WireConnection;1544;1;1321;0
WireConnection;1544;3;1322;0
WireConnection;1545;1;1332;0
WireConnection;1545;3;1333;0
WireConnection;1682;1;1680;0
WireConnection;1682;0;1670;0
WireConnection;1682;2;1681;0
WireConnection;1325;0;1324;0
WireConnection;1325;1;1544;0
WireConnection;1336;0;1334;0
WireConnection;1336;1;1545;0
WireConnection;1390;0;1367;0
WireConnection;1390;1;1367;0
WireConnection;1672;0;1682;0
WireConnection;1672;1;1671;0
WireConnection;1303;17;1325;0
WireConnection;1303;18;1336;0
WireConnection;1369;0;1390;0
WireConnection;1673;0;1672;0
WireConnection;1673;1;1697;0
WireConnection;1365;0;1303;0
WireConnection;1365;1;1369;0
WireConnection;1674;0;1673;0
WireConnection;1368;0;1303;0
WireConnection;1368;1;1365;0
WireConnection;1675;1;1673;0
WireConnection;1675;0;1674;0
WireConnection;1304;0;1368;0
WireConnection;1687;1;1675;0
WireConnection;1687;3;1676;0
WireConnection;536;0;1543;0
WireConnection;1281;0;1304;0
WireConnection;1689;0;1688;0
WireConnection;1689;1;1687;0
WireConnection;1690;0;1689;0
WireConnection;1638;0;1636;0
WireConnection;1638;1;1283;0
WireConnection;1637;0;1376;0
WireConnection;1637;1;1635;0
WireConnection;1694;0;1667;0
WireConnection;1694;1;1637;0
WireConnection;1696;0;1638;0
WireConnection;1696;1;1695;0
WireConnection;1693;0;1638;0
WireConnection;1693;1;1696;0
WireConnection;1692;0;1637;0
WireConnection;1692;1;1694;0
WireConnection;1392;0;1692;0
WireConnection;1392;1;1693;0
WireConnection;1465;0;1392;0
WireConnection;1731;0;1728;0
WireConnection;1712;0;1731;0
WireConnection;1433;0;1465;0
WireConnection;1714;0;1712;0
WireConnection;1714;1;1713;0
WireConnection;1466;0;1433;0
WireConnection;1716;0;1714;0
WireConnection;1716;1;1715;0
WireConnection;1717;0;1716;0
WireConnection;1730;0;1718;0
WireConnection;1719;0;1730;0
WireConnection;1719;1;1717;0
WireConnection;315;0;314;0
WireConnection;1721;0;1719;0
WireConnection;1721;1;1720;0
WireConnection;1469;0;1435;0
WireConnection;1469;1;1468;0
WireConnection;1724;0;1721;0
WireConnection;1724;1;1722;0
WireConnection;1467;0;1435;0
WireConnection;1467;1;1469;0
WireConnection;1725;0;1723;0
WireConnection;1725;1;1724;0
WireConnection;1436;0;1467;0
WireConnection;1726;0;1725;0
WireConnection;1204;0;1188;0
WireConnection;1179;18;1178;0
WireConnection;1179;19;1177;0
WireConnection;1179;26;1204;0
WireConnection;1181;0;1179;0
WireConnection;1180;0;1179;0
WireConnection;1182;1;1181;0
WireConnection;1182;0;1179;0
WireConnection;1182;2;1180;0
WireConnection;1183;0;1182;0
WireConnection;1184;0;1183;0
WireConnection;1187;0;1184;0
WireConnection;317;0;316;0
WireConnection;1193;0;1199;0
WireConnection;1194;0;1193;0
WireConnection;1194;1;1196;0
WireConnection;1194;2;1200;0
WireConnection;1197;0;1208;0
WireConnection;139;1;213;0
WireConnection;209;0;205;0
WireConnection;210;0;206;0
WireConnection;211;0;207;0
WireConnection;137;0;212;0
WireConnection;313;0;312;0
WireConnection;195;0;192;0
WireConnection;163;0;139;0
WireConnection;164;0;137;0
WireConnection;1217;0;1220;0
WireConnection;1217;1;1215;0
WireConnection;1218;0;1217;0
WireConnection;1213;0;1219;0
WireConnection;1213;1;1214;0
WireConnection;1216;0;1213;0
WireConnection;1447;0;1446;0
WireConnection;1041;0;787;0
WireConnection;830;0;1041;0
WireConnection;832;0;1041;0
WireConnection;835;1;830;0
WireConnection;835;0;1041;0
WireConnection;835;2;832;0
WireConnection;958;0;835;0
WireConnection;958;1;828;0
WireConnection;1043;0;958;0
WireConnection;1043;1;1045;0
WireConnection;1386;0;1043;0
WireConnection;1175;1;1043;0
WireConnection;1175;0;1386;0
WireConnection;978;0;980;0
WireConnection;978;1;1547;0
WireConnection;1381;17;977;0
WireConnection;1381;18;978;0
WireConnection;974;0;976;0
WireConnection;976;0;1381;0
WireConnection;1399;0;1400;0
WireConnection;1398;0;1428;0
WireConnection;1404;0;1401;0
WireConnection;1408;4;1398;0
WireConnection;1408;2;1399;0
WireConnection;1409;0;1403;0
WireConnection;1409;1;1404;0
WireConnection;1409;2;1402;0
WireConnection;1407;0;1408;0
WireConnection;1407;1;1409;0
WireConnection;1413;0;1419;0
WireConnection;1413;1;1425;0
WireConnection;1410;0;1411;0
WireConnection;1410;1;1424;0
WireConnection;1396;0;1406;0
WireConnection;1396;1;1405;0
WireConnection;1412;0;1397;0
WireConnection;1412;1;1396;0
WireConnection;1412;2;1410;0
WireConnection;1415;0;1418;0
WireConnection;1415;1;1414;0
WireConnection;1415;2;1417;0
WireConnection;1416;0;1426;0
WireConnection;1416;1;1415;0
WireConnection;1420;0;1426;0
WireConnection;1420;1;1412;0
WireConnection;1422;0;1420;0
WireConnection;1422;1;1416;0
WireConnection;1421;0;1427;0
WireConnection;1421;1;1422;0
WireConnection;1423;0;1421;0
WireConnection;1482;0;1488;0
WireConnection;1482;1;1480;0
WireConnection;1484;0;1495;0
WireConnection;1484;1;1483;0
WireConnection;1491;0;1478;0
WireConnection;1492;0;1478;0
WireConnection;1493;0;1482;0
WireConnection;1494;0;1493;0
WireConnection;1494;1;1493;1
WireConnection;1494;2;1491;0
WireConnection;1494;3;1492;0
WireConnection;1495;0;1494;0
WireConnection;1495;1;1492;0
WireConnection;1480;0;1478;0
WireConnection;1488;0;1487;0
WireConnection;1488;1;1481;0
WireConnection;1486;0;1485;0
WireConnection;1485;1;1484;0
WireConnection;1485;5;1527;0
WireConnection;1478;0;1477;0
WireConnection;1477;0;1479;0
WireConnection;1527;0;1528;0
WireConnection;1527;1;1526;0
WireConnection;1528;0;1489;0
WireConnection;1547;1;1175;0
WireConnection;1547;3;959;0
WireConnection;1446;0;1449;0
WireConnection;1446;1;1442;0
WireConnection;1519;0;1516;0
WireConnection;1519;1;1496;0
WireConnection;1223;0;1520;0
WireConnection;1224;0;1223;0
WireConnection;1230;0;1520;0
WireConnection;1516;0;1517;0
WireConnection;1516;1;1641;40
WireConnection;1520;0;1516;0
WireConnection;1520;1;1518;0
WireConnection;1564;0;1439;0
WireConnection;1564;1;1448;0
WireConnection;1437;0;1564;0
WireConnection;1443;0;1437;0
WireConnection;1506;0;1512;0
WireConnection;1506;1;1514;0
WireConnection;1512;0;1510;0
WireConnection;1512;1;1511;0
WireConnection;1514;0;1513;0
WireConnection;1514;1;1505;0
WireConnection;1507;0;1506;0
WireConnection;1530;0;1508;0
WireConnection;1530;1;1566;0
WireConnection;1566;0;1531;0
WireConnection;1508;0;1507;0
WireConnection;1418;1;1413;0
WireConnection;1406;1;1407;0
WireConnection;1518;0;1516;0
WireConnection;1518;1;1496;0
WireConnection;1442;0;1445;0
WireConnection;1442;1;1461;0
WireConnection;1442;2;1551;0
WireConnection;1440;0;1441;0
WireConnection;1461;0;1443;0
WireConnection;1461;1;1440;0
WireConnection;1040;0;786;0
WireConnection;919;0;834;0
WireConnection;919;1;827;0
WireConnection;1042;0;919;0
WireConnection;1042;1;1044;0
WireConnection;1385;0;1042;0
WireConnection;1174;1;1042;0
WireConnection;1174;0;1385;0
WireConnection;977;0;979;0
WireConnection;977;1;1546;0
WireConnection;1546;1;1174;0
WireConnection;1546;3;957;0
WireConnection;829;0;1040;0
WireConnection;831;0;1040;0
WireConnection;834;1;829;0
WireConnection;834;0;1040;0
WireConnection;834;2;831;0
WireConnection;1634;0;1633;0
WireConnection;1634;1;1433;0
WireConnection;1631;0;1632;0
WireConnection;1631;1;1634;0
WireConnection;1629;0;1631;0
WireConnection;1641;20;1530;0
WireConnection;1641;110;1475;0
WireConnection;1208;0;1699;0
WireConnection;1208;1;1195;0
WireConnection;1195;0;1194;0
WireConnection;1195;1;1198;0
WireConnection;1699;0;1198;0
WireConnection;1699;1;1199;0
WireConnection;1586;0;1450;0
WireConnection;1586;1;1190;0
WireConnection;1586;2;1628;0
WireConnection;1624;0;1700;0
WireConnection;1700;0;1586;0
WireConnection;1700;1;1701;0
WireConnection;1704;0;1703;0
WireConnection;1704;1;1568;0
WireConnection;1500;0;1501;0
WireConnection;1500;1;1577;0
WireConnection;1705;0;1704;0
WireConnection;1706;0;1500;0
WireConnection;2;0;1630;0
WireConnection;2;1;1451;0
WireConnection;2;2;1625;0
WireConnection;2;9;1707;0
WireConnection;2;4;1569;0
WireConnection;2;6;1471;0
WireConnection;2;8;1727;0
WireConnection;2;30;1708;0
ASEEND*/
//CHKSM=76B231F74358E03E341454390B9F5D1B39C9B2F5