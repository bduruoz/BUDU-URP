// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Main

// Disable a warning about using a negative number in the pow
// function. We ensure the number is positive in the renderer script
#pragma warning (disable : 3571)

// Import some helper functions
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "BGrassComputeHelpers.hlsl"

// Define the maximum number of blade segments and then the number of points required
#define MAX_GRASS_SEGMENTS 5
#define MAX_GRASS_POINTS MAX_GRASS_SEGMENTS * 2 + 1

// This describes a vertex on the source mesh
struct SourceVertex
{
	float3 positionOS;
};

// Source buffers, arranged as a vertex buffer and index buffer
StructuredBuffer<SourceVertex> _SourceVertices;
StructuredBuffer<int> _SourceIndices;

// This describes a vertex on the generated mesh
struct GeneratedVertex
{
	float3 positionOS;
	float3 normalOS;
	float2 uv;
	float3 grassAnchorOS;
	float3 casterNormalOS;
};

// Source and index buffers for the generated mesh
RWStructuredBuffer<GeneratedVertex> _GeneratedVertices;
RWStructuredBuffer<int> _GeneratedIndices;

int _NumSourceTriangles;
float4x4 _Transform;
float3 _RandomSeed; // An offset to add to random functions
float _MaxBendAngle; // Maximum bend angle as a multiplier to PI / 2
float _GrassHeight; // Maximum height of a grass
float _GrassHeightVariance; // Variance of grass width
float _GrassWidth; // Maximum width of grass
float _GrassWidthVariance; // Variance of grass width
int _NumGrassSegments; // The maximum number of segments on the grass
float _GrassCurvature; // Describes how sharply the blade grass

void GetCenterAndBasis(SourceVertex a, SourceVertex b, SourceVertex c, out float3 positionOS, out float3 normalOS, out float3x3 tsToOs)
{
	float3 posA = mul(_Transform, float4(a.positionOS, 1)).xyz;
	float3 posB = mul(_Transform, float4(b.positionOS, 1)).xyz;
	float3 posC = mul(_Transform, float4(c.positionOS, 1)).xyz;

	// Then get the center point
	positionOS = GetTriangleCenter(posA, posB, posC);

	// and the normal vector and TS -> OS transformation matrix
	GetTriangleNormalAndTSMatrix(posA, posB, posC, normalOS, tsToOs);
}

float2 GetGrassDimensions(float3 positionOS)
{
	// Calculate the grass width and height, applying random Variance
	float width = randNegative1to1(positionOS + _RandomSeed, 0) * _GrassWidthVariance + _GrassWidth;
	float height = randNegative1to1(positionOS + _RandomSeed, 1) * _GrassHeightVariance + _GrassHeight;
	return float2(width, height);
}

float3x3 CalculateTransformationForHeight(float v, float3x3 tsToOs, float3x3 twistMatrix, float bendAngle)
{
	// The bend amount increases towards the tip
    float3x3 bendMatrix = AngleAxis3x3(bendAngle * pow(abs(v), _GrassCurvature), float3(1, 0, 0));
	// Remember rotation is applies from left to right
	// Bend, then twist, then convert to world space
	return mul(tsToOs, mul(twistMatrix, bendMatrix));
}

GeneratedVertex MakeGeneratedPoint(float3 anchorOS, float3 normalOS, float2 dimensions, float3x3 tsToOs, float2 uv)
{ 
	// Calculate the offset in tangent space based on the UV and width/height
	float3 offsetTS = float3((uv.x - 0.5f) * dimensions.x, 0, uv.y * dimensions.y);
	// Calculate the offset in world space using the rotation matrix
	float3 offsetOS = mul(tsToOs, offsetTS);

	GeneratedVertex output = (GeneratedVertex)0;
	output.positionOS = anchorOS + offsetOS;
	output.normalOS = normalOS;
	output.uv = uv;
	output.grassAnchorOS = anchorOS;
	output.casterNormalOS = mul(tsToOs, float3(0, 1, 0));
	return output;
}

GeneratedVertex MakeReversedPoint(GeneratedVertex vertex)
{
	// We need to negate the caster normal on the opposite side
	GeneratedVertex reversed = vertex;
	reversed.casterNormalOS = -vertex.casterNormalOS;
	return reversed;
}

void AddTriangleClockwise(int t, int indexStart, int vertexStart)
{
	int triStart = indexStart + t * 3;
	int vertStart = vertexStart + t; 
	_GeneratedIndices[triStart] = vertStart;
	_GeneratedIndices[triStart + 1] = vertStart + 1;
	_GeneratedIndices[triStart + 2] = vertStart + 2;
}

void AddTriangleCounterClockwise(int t, int indexStart, int vertexStart)
{
	int triStart = indexStart + t * 3;
	int vertStart = vertexStart + t;
	_GeneratedIndices[triStart] = vertStart + 1;
	_GeneratedIndices[triStart + 1] = vertStart;
	_GeneratedIndices[triStart + 2] = vertStart + 2;
}

// This is the number of threads to create per dispatch. This kernel only uses the 
// x value, so you can fine tune that if needed
[numthreads(128, 1, 1)]
void Main (uint3 id : SV_DispatchThreadID)
{
	// Dispatches can only be in chunks of 128, there might be more threads than number
	// of triangles. Return in that case
	if((int)id.x >= _NumSourceTriangles)
	{
		return;
	}

	// Get the vertices which make up this triangle
	// The index array contains indices into the vertex array
	// Three values in the index array describe one triangle in the source mesh
	int sourceTriStart = id.x * 3;
	// Get the triangle center, normal vector, and tangent-to-object space transformation matrix
	float3 positionOS, normalOS;
	float3x3 tsToOs;
	GetCenterAndBasis(
		_SourceVertices[_SourceIndices[sourceTriStart + 0]],
		_SourceVertices[_SourceIndices[sourceTriStart + 1]],
		_SourceVertices[_SourceIndices[sourceTriStart + 2]],
		positionOS, normalOS, tsToOs);

	float2 dimensions = GetGrassDimensions(positionOS);

	// The twist matric decides which direction the grass will face
	float3x3 twistMatrix = AngleAxis3x3(rand(positionOS + _RandomSeed, 2) * PI * 2, float3(0, 0, 1));
	// This bend angle decides how much the tip bends
	float bendAngle = rand(positionOS + _RandomSeed, 3) * _MaxBendAngle;

	int numGrassSegments = min(MAX_GRASS_SEGMENTS, max(1, _NumGrassSegments));
	// Create an array to hold grass points. This is why there is a set maximum number of segments
	GeneratedVertex vertices[MAX_GRASS_POINTS];

	// Grass points will be arranged from the bottom up in the array
	// with the point with the minimum u-coordinate in a pair appearing first

	// Construct the square segments of the grass blade
	for(int i = 0; i < numGrassSegments; i++)
	{
		// The v rises as we increase in segments
		float v = i / (float)numGrassSegments;
		// The u of the first vertex. It converges on 0.5 as the segment increases
		float u = 0.5 - (1 - v) * 0.5;
		// Calculate the final transform for this height
		float3x3 transform = CalculateTransformationForHeight(v, tsToOs, twistMatrix, bendAngle);

		// Append the first vertex
		vertices[i * 2] = MakeGeneratedPoint(positionOS, normalOS, dimensions, transform, float2(u, v));

		// Append the second vertex
		vertices[i * 2 + 1] = MakeGeneratedPoint(positionOS, normalOS, dimensions, transform, float2(1 - u, v));

	}

	// Calculate the transform for the grass tip
	float3x3 tipTransform = CalculateTransformationForHeight(1, tsToOs, twistMatrix, bendAngle);

	// Append the tip vertex
	vertices[numGrassSegments * 2] = MakeGeneratedPoint(positionOS, normalOS, dimensions, tipTransform, float2(0.5, 1));

	// Calculate the positions to insert these vertices and this triangle into the generated mesh arrays
	int numSideVertices = numGrassSegments * 2 + 1;
	int numSideTriangles = numSideVertices - 2;
	int numSideIndices = numSideTriangles * 3; // Three indices per triangle
	int genIndexStart = id.x * numSideIndices * 2;
	int genVertexStart = id.x * numSideVertices * 2;

	for(int i = 0; i < numSideVertices; i++)
	{
		// The reverse side of the blade is stored directly after the front side
		_GeneratedVertices[genVertexStart + i] = vertices[i];
		_GeneratedVertices[genVertexStart + numSideVertices + i] = MakeReversedPoint(vertices[i]);
	}

	// Every three adjacent vertices in the vertices array make a triangle in the blade
	// For instance, triangle #0 contains vertices #0, #1, #2; triangle #1 contains vertices #1, #2, #3; etc..
	// Even and odd triangles have slightly different index orders so both are wound clockwise
	// Note that the triangle on the back side should be treated as having the other winding type
	for(int t = 0; t < numSideTriangles; t += 2)
	{
		AddTriangleClockwise(t, genIndexStart, genVertexStart);
		AddTriangleCounterClockwise(t, genIndexStart + numSideIndices, genVertexStart + numSideVertices);
	}
	for(int t = 1; t < numSideTriangles; t += 2)
	{
		AddTriangleCounterClockwise(t, genIndexStart, genVertexStart);
		AddTriangleClockwise(t, genIndexStart + numSideIndices, genVertexStart + numSideVertices);
	}

}


	/* Tek face cozumu
	for(int t = 0; t < numSideTriangles; t++)
	{
		// Every three adjacent vertices in the vertices array make a triangle in the blade
		// For instance, triangle #0 contains vertices #0, #1, #2; triangle #1 contains vertices #1, #2, #3; etc..
		int genTriangleIndexStart = genIndexStart + t * 3;
		for(int i = 0; i < 3; i++)
		{
			_GeneratedIndices[genTriangleIndexStart + i] = genVertexStart + t + i;
		}
	}

	*/